# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import interaction_pb2 as interaction__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in interaction_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AgentInteractionStub(object):
    """Service the agent will implement (called by frontend)
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.HandleFrontendButton = channel.unary_unary(
                '/rox.interaction.AgentInteraction/HandleFrontendButton',
                request_serializer=interaction__pb2.FrontendButtonClickRequest.SerializeToString,
                response_deserializer=interaction__pb2.AgentResponse.FromString,
                _registered_method=True)
        self.NotifyPageLoad = channel.unary_unary(
                '/rox.interaction.AgentInteraction/NotifyPageLoad',
                request_serializer=interaction__pb2.NotifyPageLoadRequest.SerializeToString,
                response_deserializer=interaction__pb2.AgentResponse.FromString,
                _registered_method=True)


class AgentInteractionServicer(object):
    """Service the agent will implement (called by frontend)
    """

    def HandleFrontendButton(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyPageLoad(self, request, context):
        """Agent acknowledges page load
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AgentInteractionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'HandleFrontendButton': grpc.unary_unary_rpc_method_handler(
                    servicer.HandleFrontendButton,
                    request_deserializer=interaction__pb2.FrontendButtonClickRequest.FromString,
                    response_serializer=interaction__pb2.AgentResponse.SerializeToString,
            ),
            'NotifyPageLoad': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyPageLoad,
                    request_deserializer=interaction__pb2.NotifyPageLoadRequest.FromString,
                    response_serializer=interaction__pb2.AgentResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rox.interaction.AgentInteraction', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rox.interaction.AgentInteraction', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AgentInteraction(object):
    """Service the agent will implement (called by frontend)
    """

    @staticmethod
    def HandleFrontendButton(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rox.interaction.AgentInteraction/HandleFrontendButton',
            interaction__pb2.FrontendButtonClickRequest.SerializeToString,
            interaction__pb2.AgentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NotifyPageLoad(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rox.interaction.AgentInteraction/NotifyPageLoad',
            interaction__pb2.NotifyPageLoadRequest.SerializeToString,
            interaction__pb2.AgentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ClientSideUIStub(object):
    """Service the CLIENT will implement, and the AGENT will call
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PerformUIAction = channel.unary_unary(
                '/rox.interaction.ClientSideUI/PerformUIAction',
                request_serializer=interaction__pb2.AgentToClientUIActionRequest.SerializeToString,
                response_deserializer=interaction__pb2.ClientUIActionResponse.FromString,
                _registered_method=True)


class ClientSideUIServicer(object):
    """Service the CLIENT will implement, and the AGENT will call
    """

    def PerformUIAction(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientSideUIServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PerformUIAction': grpc.unary_unary_rpc_method_handler(
                    servicer.PerformUIAction,
                    request_deserializer=interaction__pb2.AgentToClientUIActionRequest.FromString,
                    response_serializer=interaction__pb2.ClientUIActionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'rox.interaction.ClientSideUI', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('rox.interaction.ClientSideUI', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ClientSideUI(object):
    """Service the CLIENT will implement, and the AGENT will call
    """

    @staticmethod
    def PerformUIAction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/rox.interaction.ClientSideUI/PerformUIAction',
            interaction__pb2.AgentToClientUIActionRequest.SerializeToString,
            interaction__pb2.ClientUIActionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
