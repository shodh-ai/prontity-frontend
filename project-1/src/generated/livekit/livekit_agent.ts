// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.28.3
// source: livekit_agent.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { ParticipantInfo, ParticipantPermission, Room, ServerInfo } from "./livekit_models";

export const protobufPackage = "livekit";

export enum JobType {
  JT_ROOM = 0,
  JT_PUBLISHER = 1,
  JT_PARTICIPANT = 2,
  UNRECOGNIZED = -1,
}

export function jobTypeFromJSON(object: any): JobType {
  switch (object) {
    case 0:
    case "JT_ROOM":
      return JobType.JT_ROOM;
    case 1:
    case "JT_PUBLISHER":
      return JobType.JT_PUBLISHER;
    case 2:
    case "JT_PARTICIPANT":
      return JobType.JT_PARTICIPANT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return JobType.UNRECOGNIZED;
  }
}

export function jobTypeToJSON(object: JobType): string {
  switch (object) {
    case JobType.JT_ROOM:
      return "JT_ROOM";
    case JobType.JT_PUBLISHER:
      return "JT_PUBLISHER";
    case JobType.JT_PARTICIPANT:
      return "JT_PARTICIPANT";
    case JobType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum WorkerStatus {
  WS_AVAILABLE = 0,
  WS_FULL = 1,
  UNRECOGNIZED = -1,
}

export function workerStatusFromJSON(object: any): WorkerStatus {
  switch (object) {
    case 0:
    case "WS_AVAILABLE":
      return WorkerStatus.WS_AVAILABLE;
    case 1:
    case "WS_FULL":
      return WorkerStatus.WS_FULL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return WorkerStatus.UNRECOGNIZED;
  }
}

export function workerStatusToJSON(object: WorkerStatus): string {
  switch (object) {
    case WorkerStatus.WS_AVAILABLE:
      return "WS_AVAILABLE";
    case WorkerStatus.WS_FULL:
      return "WS_FULL";
    case WorkerStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum JobStatus {
  JS_PENDING = 0,
  JS_RUNNING = 1,
  JS_SUCCESS = 2,
  JS_FAILED = 3,
  UNRECOGNIZED = -1,
}

export function jobStatusFromJSON(object: any): JobStatus {
  switch (object) {
    case 0:
    case "JS_PENDING":
      return JobStatus.JS_PENDING;
    case 1:
    case "JS_RUNNING":
      return JobStatus.JS_RUNNING;
    case 2:
    case "JS_SUCCESS":
      return JobStatus.JS_SUCCESS;
    case 3:
    case "JS_FAILED":
      return JobStatus.JS_FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return JobStatus.UNRECOGNIZED;
  }
}

export function jobStatusToJSON(object: JobStatus): string {
  switch (object) {
    case JobStatus.JS_PENDING:
      return "JS_PENDING";
    case JobStatus.JS_RUNNING:
      return "JS_RUNNING";
    case JobStatus.JS_SUCCESS:
      return "JS_SUCCESS";
    case JobStatus.JS_FAILED:
      return "JS_FAILED";
    case JobStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Job {
  id: string;
  dispatchId: string;
  type: JobType;
  room: Room | undefined;
  participant?:
    | ParticipantInfo
    | undefined;
  /** @deprecated */
  namespace: string;
  metadata: string;
  agentName: string;
  state: JobState | undefined;
}

export interface JobState {
  status: JobStatus;
  error: string;
  startedAt: string;
  endedAt: string;
  updatedAt: string;
  participantIdentity: string;
}

/** from Worker to Server */
export interface WorkerMessage {
  message?:
    | //
    /** agent workers need to register themselves with the server first */
    { $case: "register"; register: RegisterWorkerRequest }
    | //
    /** worker confirms to server that it's available for a job, or declines it */
    { $case: "availability"; availability: AvailabilityResponse }
    | //
    /** worker can update its status to the server, including taking itself out of the pool */
    { $case: "updateWorker"; updateWorker: UpdateWorkerStatus }
    | //
    /** job can send status updates to the server, useful for tracking progress */
    { $case: "updateJob"; updateJob: UpdateJobStatus }
    | { $case: "ping"; ping: WorkerPing }
    | { $case: "simulateJob"; simulateJob: SimulateJobRequest }
    | { $case: "migrateJob"; migrateJob: MigrateJobRequest }
    | undefined;
}

/** from Server to Worker */
export interface ServerMessage {
  message?:
    | //
    /** server confirms the registration, from this moment on, the worker is considered active */
    { $case: "register"; register: RegisterWorkerResponse }
    | //
    /** server asks worker to confirm availability for a job */
    { $case: "availability"; availability: AvailabilityRequest }
    | { $case: "assignment"; assignment: JobAssignment }
    | { $case: "termination"; termination: JobTermination }
    | { $case: "pong"; pong: WorkerPong }
    | undefined;
}

export interface SimulateJobRequest {
  type: JobType;
  room: Room | undefined;
  participant: ParticipantInfo | undefined;
}

export interface WorkerPing {
  timestamp: string;
}

export interface WorkerPong {
  lastTimestamp: string;
  timestamp: string;
}

export interface RegisterWorkerRequest {
  type: JobType;
  agentName: string;
  /** string worker_id = 2; */
  version: string;
  /** string name = 4 [deprecated = true]; */
  pingInterval: number;
  namespace?: string | undefined;
  allowedPermissions: ParticipantPermission | undefined;
}

export interface RegisterWorkerResponse {
  workerId: string;
  serverInfo: ServerInfo | undefined;
}

export interface MigrateJobRequest {
  /** string job_id = 1 [deprecated = true]; */
  jobIds: string[];
}

export interface AvailabilityRequest {
  job:
    | Job
    | undefined;
  /**
   * True when the job was previously assigned to another worker but has been
   * migrated due to different reasons (e.g. worker failure, job migration)
   */
  resuming: boolean;
}

export interface AvailabilityResponse {
  jobId: string;
  available: boolean;
  supportsResume: boolean;
  participantName: string;
  participantIdentity: string;
  participantMetadata: string;
  participantAttributes: { [key: string]: string };
}

export interface AvailabilityResponse_ParticipantAttributesEntry {
  key: string;
  value: string;
}

export interface UpdateJobStatus {
  jobId: string;
  /** The worker can indicate the job end by either specifying SUCCESS or FAILED */
  status: JobStatus;
  /** metadata shown on the dashboard, useful for debugging */
  error: string;
}

export interface UpdateWorkerStatus {
  status?:
    | WorkerStatus
    | undefined;
  /** optional string metadata = 2 [deprecated=true]; */
  load: number;
  jobCount: number;
}

export interface JobAssignment {
  job: Job | undefined;
  url?: string | undefined;
  token: string;
}

export interface JobTermination {
  jobId: string;
}

function createBaseJob(): Job {
  return {
    id: "",
    dispatchId: "",
    type: 0,
    room: undefined,
    participant: undefined,
    namespace: "",
    metadata: "",
    agentName: "",
    state: undefined,
  };
}

export const Job: MessageFns<Job> = {
  encode(message: Job, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.dispatchId !== "") {
      writer.uint32(74).string(message.dispatchId);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.room !== undefined) {
      Room.encode(message.room, writer.uint32(26).fork()).join();
    }
    if (message.participant !== undefined) {
      ParticipantInfo.encode(message.participant, writer.uint32(34).fork()).join();
    }
    if (message.namespace !== "") {
      writer.uint32(42).string(message.namespace);
    }
    if (message.metadata !== "") {
      writer.uint32(50).string(message.metadata);
    }
    if (message.agentName !== "") {
      writer.uint32(58).string(message.agentName);
    }
    if (message.state !== undefined) {
      JobState.encode(message.state, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Job {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJob();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.dispatchId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.room = Room.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.participant = ParticipantInfo.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.namespace = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.metadata = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.agentName = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.state = JobState.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Job {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      dispatchId: isSet(object.dispatchId) ? globalThis.String(object.dispatchId) : "",
      type: isSet(object.type) ? jobTypeFromJSON(object.type) : 0,
      room: isSet(object.room) ? Room.fromJSON(object.room) : undefined,
      participant: isSet(object.participant) ? ParticipantInfo.fromJSON(object.participant) : undefined,
      namespace: isSet(object.namespace) ? globalThis.String(object.namespace) : "",
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
      agentName: isSet(object.agentName) ? globalThis.String(object.agentName) : "",
      state: isSet(object.state) ? JobState.fromJSON(object.state) : undefined,
    };
  },

  toJSON(message: Job): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.dispatchId !== "") {
      obj.dispatchId = message.dispatchId;
    }
    if (message.type !== 0) {
      obj.type = jobTypeToJSON(message.type);
    }
    if (message.room !== undefined) {
      obj.room = Room.toJSON(message.room);
    }
    if (message.participant !== undefined) {
      obj.participant = ParticipantInfo.toJSON(message.participant);
    }
    if (message.namespace !== "") {
      obj.namespace = message.namespace;
    }
    if (message.metadata !== "") {
      obj.metadata = message.metadata;
    }
    if (message.agentName !== "") {
      obj.agentName = message.agentName;
    }
    if (message.state !== undefined) {
      obj.state = JobState.toJSON(message.state);
    }
    return obj;
  },

  create(base?: DeepPartial<Job>): Job {
    return Job.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Job>): Job {
    const message = createBaseJob();
    message.id = object.id ?? "";
    message.dispatchId = object.dispatchId ?? "";
    message.type = object.type ?? 0;
    message.room = (object.room !== undefined && object.room !== null) ? Room.fromPartial(object.room) : undefined;
    message.participant = (object.participant !== undefined && object.participant !== null)
      ? ParticipantInfo.fromPartial(object.participant)
      : undefined;
    message.namespace = object.namespace ?? "";
    message.metadata = object.metadata ?? "";
    message.agentName = object.agentName ?? "";
    message.state = (object.state !== undefined && object.state !== null)
      ? JobState.fromPartial(object.state)
      : undefined;
    return message;
  },
};

function createBaseJobState(): JobState {
  return { status: 0, error: "", startedAt: "0", endedAt: "0", updatedAt: "0", participantIdentity: "" };
}

export const JobState: MessageFns<JobState> = {
  encode(message: JobState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    if (message.error !== "") {
      writer.uint32(18).string(message.error);
    }
    if (message.startedAt !== "0") {
      writer.uint32(24).int64(message.startedAt);
    }
    if (message.endedAt !== "0") {
      writer.uint32(32).int64(message.endedAt);
    }
    if (message.updatedAt !== "0") {
      writer.uint32(40).int64(message.updatedAt);
    }
    if (message.participantIdentity !== "") {
      writer.uint32(50).string(message.participantIdentity);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JobState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJobState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.error = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.startedAt = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.endedAt = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.updatedAt = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.participantIdentity = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JobState {
    return {
      status: isSet(object.status) ? jobStatusFromJSON(object.status) : 0,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
      startedAt: isSet(object.startedAt) ? globalThis.String(object.startedAt) : "0",
      endedAt: isSet(object.endedAt) ? globalThis.String(object.endedAt) : "0",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "0",
      participantIdentity: isSet(object.participantIdentity) ? globalThis.String(object.participantIdentity) : "",
    };
  },

  toJSON(message: JobState): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = jobStatusToJSON(message.status);
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    if (message.startedAt !== "0") {
      obj.startedAt = message.startedAt;
    }
    if (message.endedAt !== "0") {
      obj.endedAt = message.endedAt;
    }
    if (message.updatedAt !== "0") {
      obj.updatedAt = message.updatedAt;
    }
    if (message.participantIdentity !== "") {
      obj.participantIdentity = message.participantIdentity;
    }
    return obj;
  },

  create(base?: DeepPartial<JobState>): JobState {
    return JobState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<JobState>): JobState {
    const message = createBaseJobState();
    message.status = object.status ?? 0;
    message.error = object.error ?? "";
    message.startedAt = object.startedAt ?? "0";
    message.endedAt = object.endedAt ?? "0";
    message.updatedAt = object.updatedAt ?? "0";
    message.participantIdentity = object.participantIdentity ?? "";
    return message;
  },
};

function createBaseWorkerMessage(): WorkerMessage {
  return { message: undefined };
}

export const WorkerMessage: MessageFns<WorkerMessage> = {
  encode(message: WorkerMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.message?.$case) {
      case "register":
        RegisterWorkerRequest.encode(message.message.register, writer.uint32(10).fork()).join();
        break;
      case "availability":
        AvailabilityResponse.encode(message.message.availability, writer.uint32(18).fork()).join();
        break;
      case "updateWorker":
        UpdateWorkerStatus.encode(message.message.updateWorker, writer.uint32(26).fork()).join();
        break;
      case "updateJob":
        UpdateJobStatus.encode(message.message.updateJob, writer.uint32(34).fork()).join();
        break;
      case "ping":
        WorkerPing.encode(message.message.ping, writer.uint32(42).fork()).join();
        break;
      case "simulateJob":
        SimulateJobRequest.encode(message.message.simulateJob, writer.uint32(50).fork()).join();
        break;
      case "migrateJob":
        MigrateJobRequest.encode(message.message.migrateJob, writer.uint32(58).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkerMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkerMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = { $case: "register", register: RegisterWorkerRequest.decode(reader, reader.uint32()) };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = {
            $case: "availability",
            availability: AvailabilityResponse.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = { $case: "updateWorker", updateWorker: UpdateWorkerStatus.decode(reader, reader.uint32()) };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.message = { $case: "updateJob", updateJob: UpdateJobStatus.decode(reader, reader.uint32()) };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.message = { $case: "ping", ping: WorkerPing.decode(reader, reader.uint32()) };
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.message = { $case: "simulateJob", simulateJob: SimulateJobRequest.decode(reader, reader.uint32()) };
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.message = { $case: "migrateJob", migrateJob: MigrateJobRequest.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkerMessage {
    return {
      message: isSet(object.register)
        ? { $case: "register", register: RegisterWorkerRequest.fromJSON(object.register) }
        : isSet(object.availability)
        ? { $case: "availability", availability: AvailabilityResponse.fromJSON(object.availability) }
        : isSet(object.updateWorker)
        ? { $case: "updateWorker", updateWorker: UpdateWorkerStatus.fromJSON(object.updateWorker) }
        : isSet(object.updateJob)
        ? { $case: "updateJob", updateJob: UpdateJobStatus.fromJSON(object.updateJob) }
        : isSet(object.ping)
        ? { $case: "ping", ping: WorkerPing.fromJSON(object.ping) }
        : isSet(object.simulateJob)
        ? { $case: "simulateJob", simulateJob: SimulateJobRequest.fromJSON(object.simulateJob) }
        : isSet(object.migrateJob)
        ? { $case: "migrateJob", migrateJob: MigrateJobRequest.fromJSON(object.migrateJob) }
        : undefined,
    };
  },

  toJSON(message: WorkerMessage): unknown {
    const obj: any = {};
    if (message.message?.$case === "register") {
      obj.register = RegisterWorkerRequest.toJSON(message.message.register);
    } else if (message.message?.$case === "availability") {
      obj.availability = AvailabilityResponse.toJSON(message.message.availability);
    } else if (message.message?.$case === "updateWorker") {
      obj.updateWorker = UpdateWorkerStatus.toJSON(message.message.updateWorker);
    } else if (message.message?.$case === "updateJob") {
      obj.updateJob = UpdateJobStatus.toJSON(message.message.updateJob);
    } else if (message.message?.$case === "ping") {
      obj.ping = WorkerPing.toJSON(message.message.ping);
    } else if (message.message?.$case === "simulateJob") {
      obj.simulateJob = SimulateJobRequest.toJSON(message.message.simulateJob);
    } else if (message.message?.$case === "migrateJob") {
      obj.migrateJob = MigrateJobRequest.toJSON(message.message.migrateJob);
    }
    return obj;
  },

  create(base?: DeepPartial<WorkerMessage>): WorkerMessage {
    return WorkerMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkerMessage>): WorkerMessage {
    const message = createBaseWorkerMessage();
    switch (object.message?.$case) {
      case "register": {
        if (object.message?.register !== undefined && object.message?.register !== null) {
          message.message = { $case: "register", register: RegisterWorkerRequest.fromPartial(object.message.register) };
        }
        break;
      }
      case "availability": {
        if (object.message?.availability !== undefined && object.message?.availability !== null) {
          message.message = {
            $case: "availability",
            availability: AvailabilityResponse.fromPartial(object.message.availability),
          };
        }
        break;
      }
      case "updateWorker": {
        if (object.message?.updateWorker !== undefined && object.message?.updateWorker !== null) {
          message.message = {
            $case: "updateWorker",
            updateWorker: UpdateWorkerStatus.fromPartial(object.message.updateWorker),
          };
        }
        break;
      }
      case "updateJob": {
        if (object.message?.updateJob !== undefined && object.message?.updateJob !== null) {
          message.message = { $case: "updateJob", updateJob: UpdateJobStatus.fromPartial(object.message.updateJob) };
        }
        break;
      }
      case "ping": {
        if (object.message?.ping !== undefined && object.message?.ping !== null) {
          message.message = { $case: "ping", ping: WorkerPing.fromPartial(object.message.ping) };
        }
        break;
      }
      case "simulateJob": {
        if (object.message?.simulateJob !== undefined && object.message?.simulateJob !== null) {
          message.message = {
            $case: "simulateJob",
            simulateJob: SimulateJobRequest.fromPartial(object.message.simulateJob),
          };
        }
        break;
      }
      case "migrateJob": {
        if (object.message?.migrateJob !== undefined && object.message?.migrateJob !== null) {
          message.message = {
            $case: "migrateJob",
            migrateJob: MigrateJobRequest.fromPartial(object.message.migrateJob),
          };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseServerMessage(): ServerMessage {
  return { message: undefined };
}

export const ServerMessage: MessageFns<ServerMessage> = {
  encode(message: ServerMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.message?.$case) {
      case "register":
        RegisterWorkerResponse.encode(message.message.register, writer.uint32(10).fork()).join();
        break;
      case "availability":
        AvailabilityRequest.encode(message.message.availability, writer.uint32(18).fork()).join();
        break;
      case "assignment":
        JobAssignment.encode(message.message.assignment, writer.uint32(26).fork()).join();
        break;
      case "termination":
        JobTermination.encode(message.message.termination, writer.uint32(42).fork()).join();
        break;
      case "pong":
        WorkerPong.encode(message.message.pong, writer.uint32(34).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.message = { $case: "register", register: RegisterWorkerResponse.decode(reader, reader.uint32()) };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = {
            $case: "availability",
            availability: AvailabilityRequest.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.message = { $case: "assignment", assignment: JobAssignment.decode(reader, reader.uint32()) };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.message = { $case: "termination", termination: JobTermination.decode(reader, reader.uint32()) };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.message = { $case: "pong", pong: WorkerPong.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerMessage {
    return {
      message: isSet(object.register)
        ? { $case: "register", register: RegisterWorkerResponse.fromJSON(object.register) }
        : isSet(object.availability)
        ? { $case: "availability", availability: AvailabilityRequest.fromJSON(object.availability) }
        : isSet(object.assignment)
        ? { $case: "assignment", assignment: JobAssignment.fromJSON(object.assignment) }
        : isSet(object.termination)
        ? { $case: "termination", termination: JobTermination.fromJSON(object.termination) }
        : isSet(object.pong)
        ? { $case: "pong", pong: WorkerPong.fromJSON(object.pong) }
        : undefined,
    };
  },

  toJSON(message: ServerMessage): unknown {
    const obj: any = {};
    if (message.message?.$case === "register") {
      obj.register = RegisterWorkerResponse.toJSON(message.message.register);
    } else if (message.message?.$case === "availability") {
      obj.availability = AvailabilityRequest.toJSON(message.message.availability);
    } else if (message.message?.$case === "assignment") {
      obj.assignment = JobAssignment.toJSON(message.message.assignment);
    } else if (message.message?.$case === "termination") {
      obj.termination = JobTermination.toJSON(message.message.termination);
    } else if (message.message?.$case === "pong") {
      obj.pong = WorkerPong.toJSON(message.message.pong);
    }
    return obj;
  },

  create(base?: DeepPartial<ServerMessage>): ServerMessage {
    return ServerMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ServerMessage>): ServerMessage {
    const message = createBaseServerMessage();
    switch (object.message?.$case) {
      case "register": {
        if (object.message?.register !== undefined && object.message?.register !== null) {
          message.message = {
            $case: "register",
            register: RegisterWorkerResponse.fromPartial(object.message.register),
          };
        }
        break;
      }
      case "availability": {
        if (object.message?.availability !== undefined && object.message?.availability !== null) {
          message.message = {
            $case: "availability",
            availability: AvailabilityRequest.fromPartial(object.message.availability),
          };
        }
        break;
      }
      case "assignment": {
        if (object.message?.assignment !== undefined && object.message?.assignment !== null) {
          message.message = { $case: "assignment", assignment: JobAssignment.fromPartial(object.message.assignment) };
        }
        break;
      }
      case "termination": {
        if (object.message?.termination !== undefined && object.message?.termination !== null) {
          message.message = {
            $case: "termination",
            termination: JobTermination.fromPartial(object.message.termination),
          };
        }
        break;
      }
      case "pong": {
        if (object.message?.pong !== undefined && object.message?.pong !== null) {
          message.message = { $case: "pong", pong: WorkerPong.fromPartial(object.message.pong) };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseSimulateJobRequest(): SimulateJobRequest {
  return { type: 0, room: undefined, participant: undefined };
}

export const SimulateJobRequest: MessageFns<SimulateJobRequest> = {
  encode(message: SimulateJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.room !== undefined) {
      Room.encode(message.room, writer.uint32(18).fork()).join();
    }
    if (message.participant !== undefined) {
      ParticipantInfo.encode(message.participant, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SimulateJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimulateJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.room = Room.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.participant = ParticipantInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SimulateJobRequest {
    return {
      type: isSet(object.type) ? jobTypeFromJSON(object.type) : 0,
      room: isSet(object.room) ? Room.fromJSON(object.room) : undefined,
      participant: isSet(object.participant) ? ParticipantInfo.fromJSON(object.participant) : undefined,
    };
  },

  toJSON(message: SimulateJobRequest): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = jobTypeToJSON(message.type);
    }
    if (message.room !== undefined) {
      obj.room = Room.toJSON(message.room);
    }
    if (message.participant !== undefined) {
      obj.participant = ParticipantInfo.toJSON(message.participant);
    }
    return obj;
  },

  create(base?: DeepPartial<SimulateJobRequest>): SimulateJobRequest {
    return SimulateJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SimulateJobRequest>): SimulateJobRequest {
    const message = createBaseSimulateJobRequest();
    message.type = object.type ?? 0;
    message.room = (object.room !== undefined && object.room !== null) ? Room.fromPartial(object.room) : undefined;
    message.participant = (object.participant !== undefined && object.participant !== null)
      ? ParticipantInfo.fromPartial(object.participant)
      : undefined;
    return message;
  },
};

function createBaseWorkerPing(): WorkerPing {
  return { timestamp: "0" };
}

export const WorkerPing: MessageFns<WorkerPing> = {
  encode(message: WorkerPing, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.timestamp !== "0") {
      writer.uint32(8).int64(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkerPing {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkerPing();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.timestamp = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkerPing {
    return { timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "0" };
  },

  toJSON(message: WorkerPing): unknown {
    const obj: any = {};
    if (message.timestamp !== "0") {
      obj.timestamp = message.timestamp;
    }
    return obj;
  },

  create(base?: DeepPartial<WorkerPing>): WorkerPing {
    return WorkerPing.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkerPing>): WorkerPing {
    const message = createBaseWorkerPing();
    message.timestamp = object.timestamp ?? "0";
    return message;
  },
};

function createBaseWorkerPong(): WorkerPong {
  return { lastTimestamp: "0", timestamp: "0" };
}

export const WorkerPong: MessageFns<WorkerPong> = {
  encode(message: WorkerPong, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.lastTimestamp !== "0") {
      writer.uint32(8).int64(message.lastTimestamp);
    }
    if (message.timestamp !== "0") {
      writer.uint32(16).int64(message.timestamp);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WorkerPong {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWorkerPong();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.lastTimestamp = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timestamp = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WorkerPong {
    return {
      lastTimestamp: isSet(object.lastTimestamp) ? globalThis.String(object.lastTimestamp) : "0",
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "0",
    };
  },

  toJSON(message: WorkerPong): unknown {
    const obj: any = {};
    if (message.lastTimestamp !== "0") {
      obj.lastTimestamp = message.lastTimestamp;
    }
    if (message.timestamp !== "0") {
      obj.timestamp = message.timestamp;
    }
    return obj;
  },

  create(base?: DeepPartial<WorkerPong>): WorkerPong {
    return WorkerPong.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WorkerPong>): WorkerPong {
    const message = createBaseWorkerPong();
    message.lastTimestamp = object.lastTimestamp ?? "0";
    message.timestamp = object.timestamp ?? "0";
    return message;
  },
};

function createBaseRegisterWorkerRequest(): RegisterWorkerRequest {
  return { type: 0, agentName: "", version: "", pingInterval: 0, namespace: undefined, allowedPermissions: undefined };
}

export const RegisterWorkerRequest: MessageFns<RegisterWorkerRequest> = {
  encode(message: RegisterWorkerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== 0) {
      writer.uint32(8).int32(message.type);
    }
    if (message.agentName !== "") {
      writer.uint32(66).string(message.agentName);
    }
    if (message.version !== "") {
      writer.uint32(26).string(message.version);
    }
    if (message.pingInterval !== 0) {
      writer.uint32(40).uint32(message.pingInterval);
    }
    if (message.namespace !== undefined) {
      writer.uint32(50).string(message.namespace);
    }
    if (message.allowedPermissions !== undefined) {
      ParticipantPermission.encode(message.allowedPermissions, writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterWorkerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterWorkerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.agentName = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.pingInterval = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.namespace = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.allowedPermissions = ParticipantPermission.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegisterWorkerRequest {
    return {
      type: isSet(object.type) ? jobTypeFromJSON(object.type) : 0,
      agentName: isSet(object.agentName) ? globalThis.String(object.agentName) : "",
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      pingInterval: isSet(object.pingInterval) ? globalThis.Number(object.pingInterval) : 0,
      namespace: isSet(object.namespace) ? globalThis.String(object.namespace) : undefined,
      allowedPermissions: isSet(object.allowedPermissions)
        ? ParticipantPermission.fromJSON(object.allowedPermissions)
        : undefined,
    };
  },

  toJSON(message: RegisterWorkerRequest): unknown {
    const obj: any = {};
    if (message.type !== 0) {
      obj.type = jobTypeToJSON(message.type);
    }
    if (message.agentName !== "") {
      obj.agentName = message.agentName;
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.pingInterval !== 0) {
      obj.pingInterval = Math.round(message.pingInterval);
    }
    if (message.namespace !== undefined) {
      obj.namespace = message.namespace;
    }
    if (message.allowedPermissions !== undefined) {
      obj.allowedPermissions = ParticipantPermission.toJSON(message.allowedPermissions);
    }
    return obj;
  },

  create(base?: DeepPartial<RegisterWorkerRequest>): RegisterWorkerRequest {
    return RegisterWorkerRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RegisterWorkerRequest>): RegisterWorkerRequest {
    const message = createBaseRegisterWorkerRequest();
    message.type = object.type ?? 0;
    message.agentName = object.agentName ?? "";
    message.version = object.version ?? "";
    message.pingInterval = object.pingInterval ?? 0;
    message.namespace = object.namespace ?? undefined;
    message.allowedPermissions = (object.allowedPermissions !== undefined && object.allowedPermissions !== null)
      ? ParticipantPermission.fromPartial(object.allowedPermissions)
      : undefined;
    return message;
  },
};

function createBaseRegisterWorkerResponse(): RegisterWorkerResponse {
  return { workerId: "", serverInfo: undefined };
}

export const RegisterWorkerResponse: MessageFns<RegisterWorkerResponse> = {
  encode(message: RegisterWorkerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.workerId !== "") {
      writer.uint32(10).string(message.workerId);
    }
    if (message.serverInfo !== undefined) {
      ServerInfo.encode(message.serverInfo, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RegisterWorkerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRegisterWorkerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.workerId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.serverInfo = ServerInfo.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RegisterWorkerResponse {
    return {
      workerId: isSet(object.workerId) ? globalThis.String(object.workerId) : "",
      serverInfo: isSet(object.serverInfo) ? ServerInfo.fromJSON(object.serverInfo) : undefined,
    };
  },

  toJSON(message: RegisterWorkerResponse): unknown {
    const obj: any = {};
    if (message.workerId !== "") {
      obj.workerId = message.workerId;
    }
    if (message.serverInfo !== undefined) {
      obj.serverInfo = ServerInfo.toJSON(message.serverInfo);
    }
    return obj;
  },

  create(base?: DeepPartial<RegisterWorkerResponse>): RegisterWorkerResponse {
    return RegisterWorkerResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RegisterWorkerResponse>): RegisterWorkerResponse {
    const message = createBaseRegisterWorkerResponse();
    message.workerId = object.workerId ?? "";
    message.serverInfo = (object.serverInfo !== undefined && object.serverInfo !== null)
      ? ServerInfo.fromPartial(object.serverInfo)
      : undefined;
    return message;
  },
};

function createBaseMigrateJobRequest(): MigrateJobRequest {
  return { jobIds: [] };
}

export const MigrateJobRequest: MessageFns<MigrateJobRequest> = {
  encode(message: MigrateJobRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.jobIds) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MigrateJobRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMigrateJobRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.jobIds.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MigrateJobRequest {
    return {
      jobIds: globalThis.Array.isArray(object?.jobIds) ? object.jobIds.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: MigrateJobRequest): unknown {
    const obj: any = {};
    if (message.jobIds?.length) {
      obj.jobIds = message.jobIds;
    }
    return obj;
  },

  create(base?: DeepPartial<MigrateJobRequest>): MigrateJobRequest {
    return MigrateJobRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<MigrateJobRequest>): MigrateJobRequest {
    const message = createBaseMigrateJobRequest();
    message.jobIds = object.jobIds?.map((e) => e) || [];
    return message;
  },
};

function createBaseAvailabilityRequest(): AvailabilityRequest {
  return { job: undefined, resuming: false };
}

export const AvailabilityRequest: MessageFns<AvailabilityRequest> = {
  encode(message: AvailabilityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.job !== undefined) {
      Job.encode(message.job, writer.uint32(10).fork()).join();
    }
    if (message.resuming !== false) {
      writer.uint32(16).bool(message.resuming);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AvailabilityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAvailabilityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.job = Job.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.resuming = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AvailabilityRequest {
    return {
      job: isSet(object.job) ? Job.fromJSON(object.job) : undefined,
      resuming: isSet(object.resuming) ? globalThis.Boolean(object.resuming) : false,
    };
  },

  toJSON(message: AvailabilityRequest): unknown {
    const obj: any = {};
    if (message.job !== undefined) {
      obj.job = Job.toJSON(message.job);
    }
    if (message.resuming !== false) {
      obj.resuming = message.resuming;
    }
    return obj;
  },

  create(base?: DeepPartial<AvailabilityRequest>): AvailabilityRequest {
    return AvailabilityRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AvailabilityRequest>): AvailabilityRequest {
    const message = createBaseAvailabilityRequest();
    message.job = (object.job !== undefined && object.job !== null) ? Job.fromPartial(object.job) : undefined;
    message.resuming = object.resuming ?? false;
    return message;
  },
};

function createBaseAvailabilityResponse(): AvailabilityResponse {
  return {
    jobId: "",
    available: false,
    supportsResume: false,
    participantName: "",
    participantIdentity: "",
    participantMetadata: "",
    participantAttributes: {},
  };
}

export const AvailabilityResponse: MessageFns<AvailabilityResponse> = {
  encode(message: AvailabilityResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobId !== "") {
      writer.uint32(10).string(message.jobId);
    }
    if (message.available !== false) {
      writer.uint32(16).bool(message.available);
    }
    if (message.supportsResume !== false) {
      writer.uint32(24).bool(message.supportsResume);
    }
    if (message.participantName !== "") {
      writer.uint32(34).string(message.participantName);
    }
    if (message.participantIdentity !== "") {
      writer.uint32(42).string(message.participantIdentity);
    }
    if (message.participantMetadata !== "") {
      writer.uint32(50).string(message.participantMetadata);
    }
    Object.entries(message.participantAttributes).forEach(([key, value]) => {
      AvailabilityResponse_ParticipantAttributesEntry.encode({ key: key as any, value }, writer.uint32(58).fork())
        .join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AvailabilityResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAvailabilityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jobId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.available = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.supportsResume = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.participantName = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.participantIdentity = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.participantMetadata = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const entry7 = AvailabilityResponse_ParticipantAttributesEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.participantAttributes[entry7.key] = entry7.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AvailabilityResponse {
    return {
      jobId: isSet(object.jobId) ? globalThis.String(object.jobId) : "",
      available: isSet(object.available) ? globalThis.Boolean(object.available) : false,
      supportsResume: isSet(object.supportsResume) ? globalThis.Boolean(object.supportsResume) : false,
      participantName: isSet(object.participantName) ? globalThis.String(object.participantName) : "",
      participantIdentity: isSet(object.participantIdentity) ? globalThis.String(object.participantIdentity) : "",
      participantMetadata: isSet(object.participantMetadata) ? globalThis.String(object.participantMetadata) : "",
      participantAttributes: isObject(object.participantAttributes)
        ? Object.entries(object.participantAttributes).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: AvailabilityResponse): unknown {
    const obj: any = {};
    if (message.jobId !== "") {
      obj.jobId = message.jobId;
    }
    if (message.available !== false) {
      obj.available = message.available;
    }
    if (message.supportsResume !== false) {
      obj.supportsResume = message.supportsResume;
    }
    if (message.participantName !== "") {
      obj.participantName = message.participantName;
    }
    if (message.participantIdentity !== "") {
      obj.participantIdentity = message.participantIdentity;
    }
    if (message.participantMetadata !== "") {
      obj.participantMetadata = message.participantMetadata;
    }
    if (message.participantAttributes) {
      const entries = Object.entries(message.participantAttributes);
      if (entries.length > 0) {
        obj.participantAttributes = {};
        entries.forEach(([k, v]) => {
          obj.participantAttributes[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<AvailabilityResponse>): AvailabilityResponse {
    return AvailabilityResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AvailabilityResponse>): AvailabilityResponse {
    const message = createBaseAvailabilityResponse();
    message.jobId = object.jobId ?? "";
    message.available = object.available ?? false;
    message.supportsResume = object.supportsResume ?? false;
    message.participantName = object.participantName ?? "";
    message.participantIdentity = object.participantIdentity ?? "";
    message.participantMetadata = object.participantMetadata ?? "";
    message.participantAttributes = Object.entries(object.participantAttributes ?? {}).reduce<
      { [key: string]: string }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseAvailabilityResponse_ParticipantAttributesEntry(): AvailabilityResponse_ParticipantAttributesEntry {
  return { key: "", value: "" };
}

export const AvailabilityResponse_ParticipantAttributesEntry: MessageFns<
  AvailabilityResponse_ParticipantAttributesEntry
> = {
  encode(
    message: AvailabilityResponse_ParticipantAttributesEntry,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AvailabilityResponse_ParticipantAttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAvailabilityResponse_ParticipantAttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AvailabilityResponse_ParticipantAttributesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: AvailabilityResponse_ParticipantAttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(
    base?: DeepPartial<AvailabilityResponse_ParticipantAttributesEntry>,
  ): AvailabilityResponse_ParticipantAttributesEntry {
    return AvailabilityResponse_ParticipantAttributesEntry.fromPartial(base ?? {});
  },
  fromPartial(
    object: DeepPartial<AvailabilityResponse_ParticipantAttributesEntry>,
  ): AvailabilityResponse_ParticipantAttributesEntry {
    const message = createBaseAvailabilityResponse_ParticipantAttributesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseUpdateJobStatus(): UpdateJobStatus {
  return { jobId: "", status: 0, error: "" };
}

export const UpdateJobStatus: MessageFns<UpdateJobStatus> = {
  encode(message: UpdateJobStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobId !== "") {
      writer.uint32(10).string(message.jobId);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    if (message.error !== "") {
      writer.uint32(26).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateJobStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateJobStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jobId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateJobStatus {
    return {
      jobId: isSet(object.jobId) ? globalThis.String(object.jobId) : "",
      status: isSet(object.status) ? jobStatusFromJSON(object.status) : 0,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: UpdateJobStatus): unknown {
    const obj: any = {};
    if (message.jobId !== "") {
      obj.jobId = message.jobId;
    }
    if (message.status !== 0) {
      obj.status = jobStatusToJSON(message.status);
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateJobStatus>): UpdateJobStatus {
    return UpdateJobStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateJobStatus>): UpdateJobStatus {
    const message = createBaseUpdateJobStatus();
    message.jobId = object.jobId ?? "";
    message.status = object.status ?? 0;
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseUpdateWorkerStatus(): UpdateWorkerStatus {
  return { status: undefined, load: 0, jobCount: 0 };
}

export const UpdateWorkerStatus: MessageFns<UpdateWorkerStatus> = {
  encode(message: UpdateWorkerStatus, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.status !== undefined) {
      writer.uint32(8).int32(message.status);
    }
    if (message.load !== 0) {
      writer.uint32(29).float(message.load);
    }
    if (message.jobCount !== 0) {
      writer.uint32(32).uint32(message.jobCount);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateWorkerStatus {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateWorkerStatus();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 29) {
            break;
          }

          message.load = reader.float();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.jobCount = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateWorkerStatus {
    return {
      status: isSet(object.status) ? workerStatusFromJSON(object.status) : undefined,
      load: isSet(object.load) ? globalThis.Number(object.load) : 0,
      jobCount: isSet(object.jobCount) ? globalThis.Number(object.jobCount) : 0,
    };
  },

  toJSON(message: UpdateWorkerStatus): unknown {
    const obj: any = {};
    if (message.status !== undefined) {
      obj.status = workerStatusToJSON(message.status);
    }
    if (message.load !== 0) {
      obj.load = message.load;
    }
    if (message.jobCount !== 0) {
      obj.jobCount = Math.round(message.jobCount);
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateWorkerStatus>): UpdateWorkerStatus {
    return UpdateWorkerStatus.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateWorkerStatus>): UpdateWorkerStatus {
    const message = createBaseUpdateWorkerStatus();
    message.status = object.status ?? undefined;
    message.load = object.load ?? 0;
    message.jobCount = object.jobCount ?? 0;
    return message;
  },
};

function createBaseJobAssignment(): JobAssignment {
  return { job: undefined, url: undefined, token: "" };
}

export const JobAssignment: MessageFns<JobAssignment> = {
  encode(message: JobAssignment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.job !== undefined) {
      Job.encode(message.job, writer.uint32(10).fork()).join();
    }
    if (message.url !== undefined) {
      writer.uint32(18).string(message.url);
    }
    if (message.token !== "") {
      writer.uint32(26).string(message.token);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JobAssignment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJobAssignment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.job = Job.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.token = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JobAssignment {
    return {
      job: isSet(object.job) ? Job.fromJSON(object.job) : undefined,
      url: isSet(object.url) ? globalThis.String(object.url) : undefined,
      token: isSet(object.token) ? globalThis.String(object.token) : "",
    };
  },

  toJSON(message: JobAssignment): unknown {
    const obj: any = {};
    if (message.job !== undefined) {
      obj.job = Job.toJSON(message.job);
    }
    if (message.url !== undefined) {
      obj.url = message.url;
    }
    if (message.token !== "") {
      obj.token = message.token;
    }
    return obj;
  },

  create(base?: DeepPartial<JobAssignment>): JobAssignment {
    return JobAssignment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<JobAssignment>): JobAssignment {
    const message = createBaseJobAssignment();
    message.job = (object.job !== undefined && object.job !== null) ? Job.fromPartial(object.job) : undefined;
    message.url = object.url ?? undefined;
    message.token = object.token ?? "";
    return message;
  },
};

function createBaseJobTermination(): JobTermination {
  return { jobId: "" };
}

export const JobTermination: MessageFns<JobTermination> = {
  encode(message: JobTermination, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.jobId !== "") {
      writer.uint32(10).string(message.jobId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): JobTermination {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseJobTermination();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.jobId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): JobTermination {
    return { jobId: isSet(object.jobId) ? globalThis.String(object.jobId) : "" };
  },

  toJSON(message: JobTermination): unknown {
    const obj: any = {};
    if (message.jobId !== "") {
      obj.jobId = message.jobId;
    }
    return obj;
  },

  create(base?: DeepPartial<JobTermination>): JobTermination {
    return JobTermination.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<JobTermination>): JobTermination {
    const message = createBaseJobTermination();
    message.jobId = object.jobId ?? "";
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
