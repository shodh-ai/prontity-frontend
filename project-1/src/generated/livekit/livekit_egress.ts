// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.28.3
// source: livekit_egress.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  AudioCodec,
  audioCodecFromJSON,
  audioCodecToJSON,
  ImageCodec,
  imageCodecFromJSON,
  imageCodecToJSON,
  VideoCodec,
  videoCodecFromJSON,
  videoCodecToJSON,
  WebhookConfig,
} from "./livekit_models";

export const protobufPackage = "livekit";

export enum EncodedFileType {
  /** DEFAULT_FILETYPE - file type chosen based on codecs */
  DEFAULT_FILETYPE = 0,
  MP4 = 1,
  OGG = 2,
  UNRECOGNIZED = -1,
}

export function encodedFileTypeFromJSON(object: any): EncodedFileType {
  switch (object) {
    case 0:
    case "DEFAULT_FILETYPE":
      return EncodedFileType.DEFAULT_FILETYPE;
    case 1:
    case "MP4":
      return EncodedFileType.MP4;
    case 2:
    case "OGG":
      return EncodedFileType.OGG;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EncodedFileType.UNRECOGNIZED;
  }
}

export function encodedFileTypeToJSON(object: EncodedFileType): string {
  switch (object) {
    case EncodedFileType.DEFAULT_FILETYPE:
      return "DEFAULT_FILETYPE";
    case EncodedFileType.MP4:
      return "MP4";
    case EncodedFileType.OGG:
      return "OGG";
    case EncodedFileType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum SegmentedFileProtocol {
  DEFAULT_SEGMENTED_FILE_PROTOCOL = 0,
  HLS_PROTOCOL = 1,
  UNRECOGNIZED = -1,
}

export function segmentedFileProtocolFromJSON(object: any): SegmentedFileProtocol {
  switch (object) {
    case 0:
    case "DEFAULT_SEGMENTED_FILE_PROTOCOL":
      return SegmentedFileProtocol.DEFAULT_SEGMENTED_FILE_PROTOCOL;
    case 1:
    case "HLS_PROTOCOL":
      return SegmentedFileProtocol.HLS_PROTOCOL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SegmentedFileProtocol.UNRECOGNIZED;
  }
}

export function segmentedFileProtocolToJSON(object: SegmentedFileProtocol): string {
  switch (object) {
    case SegmentedFileProtocol.DEFAULT_SEGMENTED_FILE_PROTOCOL:
      return "DEFAULT_SEGMENTED_FILE_PROTOCOL";
    case SegmentedFileProtocol.HLS_PROTOCOL:
      return "HLS_PROTOCOL";
    case SegmentedFileProtocol.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum SegmentedFileSuffix {
  INDEX = 0,
  TIMESTAMP = 1,
  UNRECOGNIZED = -1,
}

export function segmentedFileSuffixFromJSON(object: any): SegmentedFileSuffix {
  switch (object) {
    case 0:
    case "INDEX":
      return SegmentedFileSuffix.INDEX;
    case 1:
    case "TIMESTAMP":
      return SegmentedFileSuffix.TIMESTAMP;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SegmentedFileSuffix.UNRECOGNIZED;
  }
}

export function segmentedFileSuffixToJSON(object: SegmentedFileSuffix): string {
  switch (object) {
    case SegmentedFileSuffix.INDEX:
      return "INDEX";
    case SegmentedFileSuffix.TIMESTAMP:
      return "TIMESTAMP";
    case SegmentedFileSuffix.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ImageFileSuffix {
  IMAGE_SUFFIX_INDEX = 0,
  IMAGE_SUFFIX_TIMESTAMP = 1,
  /** IMAGE_SUFFIX_NONE_OVERWRITE - Do not append any suffix and overwrite the existing image with the latest */
  IMAGE_SUFFIX_NONE_OVERWRITE = 2,
  UNRECOGNIZED = -1,
}

export function imageFileSuffixFromJSON(object: any): ImageFileSuffix {
  switch (object) {
    case 0:
    case "IMAGE_SUFFIX_INDEX":
      return ImageFileSuffix.IMAGE_SUFFIX_INDEX;
    case 1:
    case "IMAGE_SUFFIX_TIMESTAMP":
      return ImageFileSuffix.IMAGE_SUFFIX_TIMESTAMP;
    case 2:
    case "IMAGE_SUFFIX_NONE_OVERWRITE":
      return ImageFileSuffix.IMAGE_SUFFIX_NONE_OVERWRITE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ImageFileSuffix.UNRECOGNIZED;
  }
}

export function imageFileSuffixToJSON(object: ImageFileSuffix): string {
  switch (object) {
    case ImageFileSuffix.IMAGE_SUFFIX_INDEX:
      return "IMAGE_SUFFIX_INDEX";
    case ImageFileSuffix.IMAGE_SUFFIX_TIMESTAMP:
      return "IMAGE_SUFFIX_TIMESTAMP";
    case ImageFileSuffix.IMAGE_SUFFIX_NONE_OVERWRITE:
      return "IMAGE_SUFFIX_NONE_OVERWRITE";
    case ImageFileSuffix.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum StreamProtocol {
  /** DEFAULT_PROTOCOL - protocol chosen based on urls */
  DEFAULT_PROTOCOL = 0,
  RTMP = 1,
  SRT = 2,
  UNRECOGNIZED = -1,
}

export function streamProtocolFromJSON(object: any): StreamProtocol {
  switch (object) {
    case 0:
    case "DEFAULT_PROTOCOL":
      return StreamProtocol.DEFAULT_PROTOCOL;
    case 1:
    case "RTMP":
      return StreamProtocol.RTMP;
    case 2:
    case "SRT":
      return StreamProtocol.SRT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return StreamProtocol.UNRECOGNIZED;
  }
}

export function streamProtocolToJSON(object: StreamProtocol): string {
  switch (object) {
    case StreamProtocol.DEFAULT_PROTOCOL:
      return "DEFAULT_PROTOCOL";
    case StreamProtocol.RTMP:
      return "RTMP";
    case StreamProtocol.SRT:
      return "SRT";
    case StreamProtocol.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum AudioMixing {
  /** DEFAULT_MIXING - all users are mixed together */
  DEFAULT_MIXING = 0,
  /** DUAL_CHANNEL_AGENT - agent audio in the left channel, all other audio in the right channel */
  DUAL_CHANNEL_AGENT = 1,
  /** DUAL_CHANNEL_ALTERNATE - each new audio track alternates between left and right channels */
  DUAL_CHANNEL_ALTERNATE = 2,
  UNRECOGNIZED = -1,
}

export function audioMixingFromJSON(object: any): AudioMixing {
  switch (object) {
    case 0:
    case "DEFAULT_MIXING":
      return AudioMixing.DEFAULT_MIXING;
    case 1:
    case "DUAL_CHANNEL_AGENT":
      return AudioMixing.DUAL_CHANNEL_AGENT;
    case 2:
    case "DUAL_CHANNEL_ALTERNATE":
      return AudioMixing.DUAL_CHANNEL_ALTERNATE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AudioMixing.UNRECOGNIZED;
  }
}

export function audioMixingToJSON(object: AudioMixing): string {
  switch (object) {
    case AudioMixing.DEFAULT_MIXING:
      return "DEFAULT_MIXING";
    case AudioMixing.DUAL_CHANNEL_AGENT:
      return "DUAL_CHANNEL_AGENT";
    case AudioMixing.DUAL_CHANNEL_ALTERNATE:
      return "DUAL_CHANNEL_ALTERNATE";
    case AudioMixing.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum EncodingOptionsPreset {
  /** H264_720P_30 - 1280x720, 30fps, 3000kpbs, H.264_MAIN / OPUS */
  H264_720P_30 = 0,
  /** H264_720P_60 - 1280x720, 60fps, 4500kbps, H.264_MAIN / OPUS */
  H264_720P_60 = 1,
  /** H264_1080P_30 - 1920x1080, 30fps, 4500kbps, H.264_MAIN / OPUS */
  H264_1080P_30 = 2,
  /** H264_1080P_60 - 1920x1080, 60fps, 6000kbps, H.264_MAIN / OPUS */
  H264_1080P_60 = 3,
  /** PORTRAIT_H264_720P_30 - 720x1280, 30fps, 3000kpbs, H.264_MAIN / OPUS */
  PORTRAIT_H264_720P_30 = 4,
  /** PORTRAIT_H264_720P_60 - 720x1280, 60fps, 4500kbps, H.264_MAIN / OPUS */
  PORTRAIT_H264_720P_60 = 5,
  /** PORTRAIT_H264_1080P_30 - 1080x1920, 30fps, 4500kbps, H.264_MAIN / OPUS */
  PORTRAIT_H264_1080P_30 = 6,
  /** PORTRAIT_H264_1080P_60 - 1080x1920, 60fps, 6000kbps, H.264_MAIN / OPUS */
  PORTRAIT_H264_1080P_60 = 7,
  UNRECOGNIZED = -1,
}

export function encodingOptionsPresetFromJSON(object: any): EncodingOptionsPreset {
  switch (object) {
    case 0:
    case "H264_720P_30":
      return EncodingOptionsPreset.H264_720P_30;
    case 1:
    case "H264_720P_60":
      return EncodingOptionsPreset.H264_720P_60;
    case 2:
    case "H264_1080P_30":
      return EncodingOptionsPreset.H264_1080P_30;
    case 3:
    case "H264_1080P_60":
      return EncodingOptionsPreset.H264_1080P_60;
    case 4:
    case "PORTRAIT_H264_720P_30":
      return EncodingOptionsPreset.PORTRAIT_H264_720P_30;
    case 5:
    case "PORTRAIT_H264_720P_60":
      return EncodingOptionsPreset.PORTRAIT_H264_720P_60;
    case 6:
    case "PORTRAIT_H264_1080P_30":
      return EncodingOptionsPreset.PORTRAIT_H264_1080P_30;
    case 7:
    case "PORTRAIT_H264_1080P_60":
      return EncodingOptionsPreset.PORTRAIT_H264_1080P_60;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EncodingOptionsPreset.UNRECOGNIZED;
  }
}

export function encodingOptionsPresetToJSON(object: EncodingOptionsPreset): string {
  switch (object) {
    case EncodingOptionsPreset.H264_720P_30:
      return "H264_720P_30";
    case EncodingOptionsPreset.H264_720P_60:
      return "H264_720P_60";
    case EncodingOptionsPreset.H264_1080P_30:
      return "H264_1080P_30";
    case EncodingOptionsPreset.H264_1080P_60:
      return "H264_1080P_60";
    case EncodingOptionsPreset.PORTRAIT_H264_720P_30:
      return "PORTRAIT_H264_720P_30";
    case EncodingOptionsPreset.PORTRAIT_H264_720P_60:
      return "PORTRAIT_H264_720P_60";
    case EncodingOptionsPreset.PORTRAIT_H264_1080P_30:
      return "PORTRAIT_H264_1080P_30";
    case EncodingOptionsPreset.PORTRAIT_H264_1080P_60:
      return "PORTRAIT_H264_1080P_60";
    case EncodingOptionsPreset.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum EgressStatus {
  EGRESS_STARTING = 0,
  EGRESS_ACTIVE = 1,
  EGRESS_ENDING = 2,
  EGRESS_COMPLETE = 3,
  EGRESS_FAILED = 4,
  EGRESS_ABORTED = 5,
  EGRESS_LIMIT_REACHED = 6,
  UNRECOGNIZED = -1,
}

export function egressStatusFromJSON(object: any): EgressStatus {
  switch (object) {
    case 0:
    case "EGRESS_STARTING":
      return EgressStatus.EGRESS_STARTING;
    case 1:
    case "EGRESS_ACTIVE":
      return EgressStatus.EGRESS_ACTIVE;
    case 2:
    case "EGRESS_ENDING":
      return EgressStatus.EGRESS_ENDING;
    case 3:
    case "EGRESS_COMPLETE":
      return EgressStatus.EGRESS_COMPLETE;
    case 4:
    case "EGRESS_FAILED":
      return EgressStatus.EGRESS_FAILED;
    case 5:
    case "EGRESS_ABORTED":
      return EgressStatus.EGRESS_ABORTED;
    case 6:
    case "EGRESS_LIMIT_REACHED":
      return EgressStatus.EGRESS_LIMIT_REACHED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EgressStatus.UNRECOGNIZED;
  }
}

export function egressStatusToJSON(object: EgressStatus): string {
  switch (object) {
    case EgressStatus.EGRESS_STARTING:
      return "EGRESS_STARTING";
    case EgressStatus.EGRESS_ACTIVE:
      return "EGRESS_ACTIVE";
    case EgressStatus.EGRESS_ENDING:
      return "EGRESS_ENDING";
    case EgressStatus.EGRESS_COMPLETE:
      return "EGRESS_COMPLETE";
    case EgressStatus.EGRESS_FAILED:
      return "EGRESS_FAILED";
    case EgressStatus.EGRESS_ABORTED:
      return "EGRESS_ABORTED";
    case EgressStatus.EGRESS_LIMIT_REACHED:
      return "EGRESS_LIMIT_REACHED";
    case EgressStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum EgressSourceType {
  EGRESS_SOURCE_TYPE_WEB = 0,
  EGRESS_SOURCE_TYPE_SDK = 1,
  UNRECOGNIZED = -1,
}

export function egressSourceTypeFromJSON(object: any): EgressSourceType {
  switch (object) {
    case 0:
    case "EGRESS_SOURCE_TYPE_WEB":
      return EgressSourceType.EGRESS_SOURCE_TYPE_WEB;
    case 1:
    case "EGRESS_SOURCE_TYPE_SDK":
      return EgressSourceType.EGRESS_SOURCE_TYPE_SDK;
    case -1:
    case "UNRECOGNIZED":
    default:
      return EgressSourceType.UNRECOGNIZED;
  }
}

export function egressSourceTypeToJSON(object: EgressSourceType): string {
  switch (object) {
    case EgressSourceType.EGRESS_SOURCE_TYPE_WEB:
      return "EGRESS_SOURCE_TYPE_WEB";
    case EgressSourceType.EGRESS_SOURCE_TYPE_SDK:
      return "EGRESS_SOURCE_TYPE_SDK";
    case EgressSourceType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** composite using a web browser */
export interface RoomCompositeEgressRequest {
  /** required */
  roomName: string;
  /** (optional) */
  layout: string;
  /** (default false) */
  audioOnly: boolean;
  /** only applies to audio_only egress (default DEFAULT_MIXING) */
  audioMixing: AudioMixing;
  /** (default false) */
  videoOnly: boolean;
  /** template base url (default https://recorder.livekit.io) */
  customBaseUrl: string;
  /** deprecated (use _output fields) */
  output?: { $case: "file"; file: EncodedFileOutput } | { $case: "stream"; stream: StreamOutput } | {
    $case: "segments";
    segments: SegmentedFileOutput;
  } | undefined;
  options?:
    | //
    /** (default H264_720P_30) */
    { $case: "preset"; preset: EncodingOptionsPreset }
    | //
    /** (optional) */
    { $case: "advanced"; advanced: EncodingOptions }
    | undefined;
  fileOutputs: EncodedFileOutput[];
  streamOutputs: StreamOutput[];
  segmentOutputs: SegmentedFileOutput[];
  imageOutputs: ImageOutput[];
  /** extra webhooks to call for this request */
  webhooks: WebhookConfig[];
}

/** record any website */
export interface WebEgressRequest {
  url: string;
  audioOnly: boolean;
  videoOnly: boolean;
  awaitStartSignal: boolean;
  /** deprecated (use _output fields) */
  output?: { $case: "file"; file: EncodedFileOutput } | { $case: "stream"; stream: StreamOutput } | {
    $case: "segments";
    segments: SegmentedFileOutput;
  } | undefined;
  options?:
    | { $case: "preset"; preset: EncodingOptionsPreset }
    | { $case: "advanced"; advanced: EncodingOptions }
    | undefined;
  fileOutputs: EncodedFileOutput[];
  streamOutputs: StreamOutput[];
  segmentOutputs: SegmentedFileOutput[];
  imageOutputs: ImageOutput[];
  /** extra webhooks to call for this request */
  webhooks: WebhookConfig[];
}

/** record audio and video from a single participant */
export interface ParticipantEgressRequest {
  /** required */
  roomName: string;
  /** required */
  identity: string;
  /** (default false) */
  screenShare: boolean;
  options?:
    | //
    /** (default H264_720P_30) */
    { $case: "preset"; preset: EncodingOptionsPreset }
    | //
    /** (optional) */
    { $case: "advanced"; advanced: EncodingOptions }
    | undefined;
  fileOutputs: EncodedFileOutput[];
  streamOutputs: StreamOutput[];
  segmentOutputs: SegmentedFileOutput[];
  imageOutputs: ImageOutput[];
  /** extra webhooks to call for this request */
  webhooks: WebhookConfig[];
}

/** containerize up to one audio and one video track */
export interface TrackCompositeEgressRequest {
  /** required */
  roomName: string;
  /** (optional) */
  audioTrackId: string;
  /** (optional) */
  videoTrackId: string;
  /** deprecated (use _output fields) */
  output?: { $case: "file"; file: EncodedFileOutput } | { $case: "stream"; stream: StreamOutput } | {
    $case: "segments";
    segments: SegmentedFileOutput;
  } | undefined;
  options?:
    | //
    /** (default H264_720P_30) */
    { $case: "preset"; preset: EncodingOptionsPreset }
    | //
    /** (optional) */
    { $case: "advanced"; advanced: EncodingOptions }
    | undefined;
  fileOutputs: EncodedFileOutput[];
  streamOutputs: StreamOutput[];
  segmentOutputs: SegmentedFileOutput[];
  imageOutputs: ImageOutput[];
  /** extra webhooks to call for this request */
  webhooks: WebhookConfig[];
}

/** record tracks individually, without transcoding */
export interface TrackEgressRequest {
  /** required */
  roomName: string;
  /** required */
  trackId: string;
  /** required */
  output?:
    | { $case: "file"; file: DirectFileOutput }
    | { $case: "websocketUrl"; websocketUrl: string }
    | undefined;
  /** extra webhooks to call for this request */
  webhooks: WebhookConfig[];
}

export interface EncodedFileOutput {
  /** (optional) */
  fileType: EncodedFileType;
  /** see egress docs for templating (default {room_name}-{time}) */
  filepath: string;
  /** disable upload of manifest file (default false) */
  disableManifest: boolean;
  output?:
    | { $case: "s3"; s3: S3Upload }
    | { $case: "gcp"; gcp: GCPUpload }
    | { $case: "azure"; azure: AzureBlobUpload }
    | { $case: "aliOSS"; aliOSS: AliOSSUpload }
    | undefined;
}

/** Used to generate HLS segments or other kind of segmented output */
export interface SegmentedFileOutput {
  /** (optional) */
  protocol: SegmentedFileProtocol;
  /** (optional) */
  filenamePrefix: string;
  /** (optional) */
  playlistName: string;
  /** (optional, disabled if not provided). Path of a live playlist */
  livePlaylistName: string;
  /** in seconds (optional) */
  segmentDuration: number;
  /** (optional, default INDEX) */
  filenameSuffix: SegmentedFileSuffix;
  /** disable upload of manifest file (default false) */
  disableManifest: boolean;
  /** required */
  output?:
    | { $case: "s3"; s3: S3Upload }
    | { $case: "gcp"; gcp: GCPUpload }
    | { $case: "azure"; azure: AzureBlobUpload }
    | { $case: "aliOSS"; aliOSS: AliOSSUpload }
    | undefined;
}

export interface DirectFileOutput {
  /** see egress docs for templating (default {track_id}-{time}) */
  filepath: string;
  /** disable upload of manifest file (default false) */
  disableManifest: boolean;
  output?:
    | { $case: "s3"; s3: S3Upload }
    | { $case: "gcp"; gcp: GCPUpload }
    | { $case: "azure"; azure: AzureBlobUpload }
    | { $case: "aliOSS"; aliOSS: AliOSSUpload }
    | undefined;
}

export interface ImageOutput {
  /** in seconds (required) */
  captureInterval: number;
  /** (optional, defaults to track width) */
  width: number;
  /** (optional, defaults to track height) */
  height: number;
  /** (optional) */
  filenamePrefix: string;
  /** (optional, default INDEX) */
  filenameSuffix: ImageFileSuffix;
  /** (optional) */
  imageCodec: ImageCodec;
  /** disable upload of manifest file (default false) */
  disableManifest: boolean;
  /** required */
  output?:
    | { $case: "s3"; s3: S3Upload }
    | { $case: "gcp"; gcp: GCPUpload }
    | { $case: "azure"; azure: AzureBlobUpload }
    | { $case: "aliOSS"; aliOSS: AliOSSUpload }
    | undefined;
}

export interface S3Upload {
  accessKey: string;
  secret: string;
  sessionToken: string;
  region: string;
  endpoint: string;
  bucket: string;
  forcePathStyle: boolean;
  metadata: { [key: string]: string };
  tagging: string;
  /** Content-Disposition header */
  contentDisposition: string;
  proxy: ProxyConfig | undefined;
}

export interface S3Upload_MetadataEntry {
  key: string;
  value: string;
}

export interface GCPUpload {
  /** service account credentials serialized in JSON "credentials.json" */
  credentials: string;
  bucket: string;
  proxy: ProxyConfig | undefined;
}

export interface AzureBlobUpload {
  accountName: string;
  accountKey: string;
  containerName: string;
}

export interface AliOSSUpload {
  accessKey: string;
  secret: string;
  region: string;
  endpoint: string;
  bucket: string;
}

export interface ProxyConfig {
  url: string;
  username: string;
  password: string;
}

export interface StreamOutput {
  /** required */
  protocol: StreamProtocol;
  /** required */
  urls: string[];
}

export interface EncodingOptions {
  /** (default 1920) */
  width: number;
  /** (default 1080) */
  height: number;
  /** (default 24) */
  depth: number;
  /** (default 30) */
  framerate: number;
  /** (default OPUS) */
  audioCodec: AudioCodec;
  /** (default 128) */
  audioBitrate: number;
  /** quality setting on audio encoder */
  audioQuality: number;
  /** (default 44100) */
  audioFrequency: number;
  /** (default H264_MAIN) */
  videoCodec: VideoCodec;
  /** (default 4500) */
  videoBitrate: number;
  /** quality setting on video encoder */
  videoQuality: number;
  /** in seconds (default 4s for streaming, segment duration for segmented output, encoder default for files) */
  keyFrameInterval: number;
}

export interface UpdateLayoutRequest {
  egressId: string;
  layout: string;
}

export interface UpdateStreamRequest {
  egressId: string;
  addOutputUrls: string[];
  removeOutputUrls: string[];
}

export interface ListEgressRequest {
  /** (optional, filter by room name) */
  roomName: string;
  /** (optional, filter by egress ID) */
  egressId: string;
  /** (optional, list active egress only) */
  active: boolean;
}

export interface ListEgressResponse {
  items: EgressInfo[];
}

export interface StopEgressRequest {
  egressId: string;
}

export interface EgressInfo {
  egressId: string;
  roomId: string;
  roomName: string;
  sourceType: EgressSourceType;
  status: EgressStatus;
  startedAt: string;
  endedAt: string;
  updatedAt: string;
  details: string;
  error: string;
  errorCode: number;
  request?:
    | { $case: "roomComposite"; roomComposite: RoomCompositeEgressRequest }
    | { $case: "web"; web: WebEgressRequest }
    | { $case: "participant"; participant: ParticipantEgressRequest }
    | { $case: "trackComposite"; trackComposite: TrackCompositeEgressRequest }
    | { $case: "track"; track: TrackEgressRequest }
    | undefined;
  /** deprecated (use _result fields) */
  result?: { $case: "stream"; stream: StreamInfoList } | { $case: "file"; file: FileInfo } | {
    $case: "segments";
    segments: SegmentsInfo;
  } | undefined;
  streamResults: StreamInfo[];
  fileResults: FileInfo[];
  segmentResults: SegmentsInfo[];
  imageResults: ImagesInfo[];
  manifestLocation: string;
  /** next ID: 27 */
  backupStorageUsed: boolean;
}

/** @deprecated */
export interface StreamInfoList {
  info: StreamInfo[];
}

export interface StreamInfo {
  url: string;
  startedAt: string;
  endedAt: string;
  duration: string;
  status: StreamInfo_Status;
  error: string;
}

export enum StreamInfo_Status {
  ACTIVE = 0,
  FINISHED = 1,
  FAILED = 2,
  UNRECOGNIZED = -1,
}

export function streamInfo_StatusFromJSON(object: any): StreamInfo_Status {
  switch (object) {
    case 0:
    case "ACTIVE":
      return StreamInfo_Status.ACTIVE;
    case 1:
    case "FINISHED":
      return StreamInfo_Status.FINISHED;
    case 2:
    case "FAILED":
      return StreamInfo_Status.FAILED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return StreamInfo_Status.UNRECOGNIZED;
  }
}

export function streamInfo_StatusToJSON(object: StreamInfo_Status): string {
  switch (object) {
    case StreamInfo_Status.ACTIVE:
      return "ACTIVE";
    case StreamInfo_Status.FINISHED:
      return "FINISHED";
    case StreamInfo_Status.FAILED:
      return "FAILED";
    case StreamInfo_Status.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface FileInfo {
  filename: string;
  startedAt: string;
  endedAt: string;
  duration: string;
  size: string;
  location: string;
}

export interface SegmentsInfo {
  playlistName: string;
  livePlaylistName: string;
  duration: string;
  size: string;
  playlistLocation: string;
  livePlaylistLocation: string;
  segmentCount: string;
  startedAt: string;
  endedAt: string;
}

export interface ImagesInfo {
  filenamePrefix: string;
  imageCount: string;
  startedAt: string;
  endedAt: string;
}

export interface AutoParticipantEgress {
  options?:
    | //
    /** (default H264_720P_30) */
    { $case: "preset"; preset: EncodingOptionsPreset }
    | //
    /** (optional) */
    { $case: "advanced"; advanced: EncodingOptions }
    | undefined;
  fileOutputs: EncodedFileOutput[];
  segmentOutputs: SegmentedFileOutput[];
}

export interface AutoTrackEgress {
  /** see docs for templating (default {track_id}-{time}) */
  filepath: string;
  /** disables upload of json manifest file (default false) */
  disableManifest: boolean;
  output?:
    | { $case: "s3"; s3: S3Upload }
    | { $case: "gcp"; gcp: GCPUpload }
    | { $case: "azure"; azure: AzureBlobUpload }
    | { $case: "aliOSS"; aliOSS: AliOSSUpload }
    | undefined;
}

function createBaseRoomCompositeEgressRequest(): RoomCompositeEgressRequest {
  return {
    roomName: "",
    layout: "",
    audioOnly: false,
    audioMixing: 0,
    videoOnly: false,
    customBaseUrl: "",
    output: undefined,
    options: undefined,
    fileOutputs: [],
    streamOutputs: [],
    segmentOutputs: [],
    imageOutputs: [],
    webhooks: [],
  };
}

export const RoomCompositeEgressRequest: MessageFns<RoomCompositeEgressRequest> = {
  encode(message: RoomCompositeEgressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roomName !== "") {
      writer.uint32(10).string(message.roomName);
    }
    if (message.layout !== "") {
      writer.uint32(18).string(message.layout);
    }
    if (message.audioOnly !== false) {
      writer.uint32(24).bool(message.audioOnly);
    }
    if (message.audioMixing !== 0) {
      writer.uint32(120).int32(message.audioMixing);
    }
    if (message.videoOnly !== false) {
      writer.uint32(32).bool(message.videoOnly);
    }
    if (message.customBaseUrl !== "") {
      writer.uint32(42).string(message.customBaseUrl);
    }
    switch (message.output?.$case) {
      case "file":
        EncodedFileOutput.encode(message.output.file, writer.uint32(50).fork()).join();
        break;
      case "stream":
        StreamOutput.encode(message.output.stream, writer.uint32(58).fork()).join();
        break;
      case "segments":
        SegmentedFileOutput.encode(message.output.segments, writer.uint32(82).fork()).join();
        break;
    }
    switch (message.options?.$case) {
      case "preset":
        writer.uint32(64).int32(message.options.preset);
        break;
      case "advanced":
        EncodingOptions.encode(message.options.advanced, writer.uint32(74).fork()).join();
        break;
    }
    for (const v of message.fileOutputs) {
      EncodedFileOutput.encode(v!, writer.uint32(90).fork()).join();
    }
    for (const v of message.streamOutputs) {
      StreamOutput.encode(v!, writer.uint32(98).fork()).join();
    }
    for (const v of message.segmentOutputs) {
      SegmentedFileOutput.encode(v!, writer.uint32(106).fork()).join();
    }
    for (const v of message.imageOutputs) {
      ImageOutput.encode(v!, writer.uint32(114).fork()).join();
    }
    for (const v of message.webhooks) {
      WebhookConfig.encode(v!, writer.uint32(130).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RoomCompositeEgressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoomCompositeEgressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roomName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.layout = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.audioOnly = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.audioMixing = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.videoOnly = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.customBaseUrl = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.output = { $case: "file", file: EncodedFileOutput.decode(reader, reader.uint32()) };
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.output = { $case: "stream", stream: StreamOutput.decode(reader, reader.uint32()) };
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.output = { $case: "segments", segments: SegmentedFileOutput.decode(reader, reader.uint32()) };
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.options = { $case: "preset", preset: reader.int32() as any };
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.options = { $case: "advanced", advanced: EncodingOptions.decode(reader, reader.uint32()) };
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.fileOutputs.push(EncodedFileOutput.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.streamOutputs.push(StreamOutput.decode(reader, reader.uint32()));
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.segmentOutputs.push(SegmentedFileOutput.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.imageOutputs.push(ImageOutput.decode(reader, reader.uint32()));
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.webhooks.push(WebhookConfig.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RoomCompositeEgressRequest {
    return {
      roomName: isSet(object.roomName) ? globalThis.String(object.roomName) : "",
      layout: isSet(object.layout) ? globalThis.String(object.layout) : "",
      audioOnly: isSet(object.audioOnly) ? globalThis.Boolean(object.audioOnly) : false,
      audioMixing: isSet(object.audioMixing) ? audioMixingFromJSON(object.audioMixing) : 0,
      videoOnly: isSet(object.videoOnly) ? globalThis.Boolean(object.videoOnly) : false,
      customBaseUrl: isSet(object.customBaseUrl) ? globalThis.String(object.customBaseUrl) : "",
      output: isSet(object.file)
        ? { $case: "file", file: EncodedFileOutput.fromJSON(object.file) }
        : isSet(object.stream)
        ? { $case: "stream", stream: StreamOutput.fromJSON(object.stream) }
        : isSet(object.segments)
        ? { $case: "segments", segments: SegmentedFileOutput.fromJSON(object.segments) }
        : undefined,
      options: isSet(object.preset)
        ? { $case: "preset", preset: encodingOptionsPresetFromJSON(object.preset) }
        : isSet(object.advanced)
        ? { $case: "advanced", advanced: EncodingOptions.fromJSON(object.advanced) }
        : undefined,
      fileOutputs: globalThis.Array.isArray(object?.fileOutputs)
        ? object.fileOutputs.map((e: any) => EncodedFileOutput.fromJSON(e))
        : [],
      streamOutputs: globalThis.Array.isArray(object?.streamOutputs)
        ? object.streamOutputs.map((e: any) => StreamOutput.fromJSON(e))
        : [],
      segmentOutputs: globalThis.Array.isArray(object?.segmentOutputs)
        ? object.segmentOutputs.map((e: any) => SegmentedFileOutput.fromJSON(e))
        : [],
      imageOutputs: globalThis.Array.isArray(object?.imageOutputs)
        ? object.imageOutputs.map((e: any) => ImageOutput.fromJSON(e))
        : [],
      webhooks: globalThis.Array.isArray(object?.webhooks)
        ? object.webhooks.map((e: any) => WebhookConfig.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RoomCompositeEgressRequest): unknown {
    const obj: any = {};
    if (message.roomName !== "") {
      obj.roomName = message.roomName;
    }
    if (message.layout !== "") {
      obj.layout = message.layout;
    }
    if (message.audioOnly !== false) {
      obj.audioOnly = message.audioOnly;
    }
    if (message.audioMixing !== 0) {
      obj.audioMixing = audioMixingToJSON(message.audioMixing);
    }
    if (message.videoOnly !== false) {
      obj.videoOnly = message.videoOnly;
    }
    if (message.customBaseUrl !== "") {
      obj.customBaseUrl = message.customBaseUrl;
    }
    if (message.output?.$case === "file") {
      obj.file = EncodedFileOutput.toJSON(message.output.file);
    } else if (message.output?.$case === "stream") {
      obj.stream = StreamOutput.toJSON(message.output.stream);
    } else if (message.output?.$case === "segments") {
      obj.segments = SegmentedFileOutput.toJSON(message.output.segments);
    }
    if (message.options?.$case === "preset") {
      obj.preset = encodingOptionsPresetToJSON(message.options.preset);
    } else if (message.options?.$case === "advanced") {
      obj.advanced = EncodingOptions.toJSON(message.options.advanced);
    }
    if (message.fileOutputs?.length) {
      obj.fileOutputs = message.fileOutputs.map((e) => EncodedFileOutput.toJSON(e));
    }
    if (message.streamOutputs?.length) {
      obj.streamOutputs = message.streamOutputs.map((e) => StreamOutput.toJSON(e));
    }
    if (message.segmentOutputs?.length) {
      obj.segmentOutputs = message.segmentOutputs.map((e) => SegmentedFileOutput.toJSON(e));
    }
    if (message.imageOutputs?.length) {
      obj.imageOutputs = message.imageOutputs.map((e) => ImageOutput.toJSON(e));
    }
    if (message.webhooks?.length) {
      obj.webhooks = message.webhooks.map((e) => WebhookConfig.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RoomCompositeEgressRequest>): RoomCompositeEgressRequest {
    return RoomCompositeEgressRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RoomCompositeEgressRequest>): RoomCompositeEgressRequest {
    const message = createBaseRoomCompositeEgressRequest();
    message.roomName = object.roomName ?? "";
    message.layout = object.layout ?? "";
    message.audioOnly = object.audioOnly ?? false;
    message.audioMixing = object.audioMixing ?? 0;
    message.videoOnly = object.videoOnly ?? false;
    message.customBaseUrl = object.customBaseUrl ?? "";
    switch (object.output?.$case) {
      case "file": {
        if (object.output?.file !== undefined && object.output?.file !== null) {
          message.output = { $case: "file", file: EncodedFileOutput.fromPartial(object.output.file) };
        }
        break;
      }
      case "stream": {
        if (object.output?.stream !== undefined && object.output?.stream !== null) {
          message.output = { $case: "stream", stream: StreamOutput.fromPartial(object.output.stream) };
        }
        break;
      }
      case "segments": {
        if (object.output?.segments !== undefined && object.output?.segments !== null) {
          message.output = { $case: "segments", segments: SegmentedFileOutput.fromPartial(object.output.segments) };
        }
        break;
      }
    }
    switch (object.options?.$case) {
      case "preset": {
        if (object.options?.preset !== undefined && object.options?.preset !== null) {
          message.options = { $case: "preset", preset: object.options.preset };
        }
        break;
      }
      case "advanced": {
        if (object.options?.advanced !== undefined && object.options?.advanced !== null) {
          message.options = { $case: "advanced", advanced: EncodingOptions.fromPartial(object.options.advanced) };
        }
        break;
      }
    }
    message.fileOutputs = object.fileOutputs?.map((e) => EncodedFileOutput.fromPartial(e)) || [];
    message.streamOutputs = object.streamOutputs?.map((e) => StreamOutput.fromPartial(e)) || [];
    message.segmentOutputs = object.segmentOutputs?.map((e) => SegmentedFileOutput.fromPartial(e)) || [];
    message.imageOutputs = object.imageOutputs?.map((e) => ImageOutput.fromPartial(e)) || [];
    message.webhooks = object.webhooks?.map((e) => WebhookConfig.fromPartial(e)) || [];
    return message;
  },
};

function createBaseWebEgressRequest(): WebEgressRequest {
  return {
    url: "",
    audioOnly: false,
    videoOnly: false,
    awaitStartSignal: false,
    output: undefined,
    options: undefined,
    fileOutputs: [],
    streamOutputs: [],
    segmentOutputs: [],
    imageOutputs: [],
    webhooks: [],
  };
}

export const WebEgressRequest: MessageFns<WebEgressRequest> = {
  encode(message: WebEgressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    if (message.audioOnly !== false) {
      writer.uint32(16).bool(message.audioOnly);
    }
    if (message.videoOnly !== false) {
      writer.uint32(24).bool(message.videoOnly);
    }
    if (message.awaitStartSignal !== false) {
      writer.uint32(96).bool(message.awaitStartSignal);
    }
    switch (message.output?.$case) {
      case "file":
        EncodedFileOutput.encode(message.output.file, writer.uint32(34).fork()).join();
        break;
      case "stream":
        StreamOutput.encode(message.output.stream, writer.uint32(42).fork()).join();
        break;
      case "segments":
        SegmentedFileOutput.encode(message.output.segments, writer.uint32(50).fork()).join();
        break;
    }
    switch (message.options?.$case) {
      case "preset":
        writer.uint32(56).int32(message.options.preset);
        break;
      case "advanced":
        EncodingOptions.encode(message.options.advanced, writer.uint32(66).fork()).join();
        break;
    }
    for (const v of message.fileOutputs) {
      EncodedFileOutput.encode(v!, writer.uint32(74).fork()).join();
    }
    for (const v of message.streamOutputs) {
      StreamOutput.encode(v!, writer.uint32(82).fork()).join();
    }
    for (const v of message.segmentOutputs) {
      SegmentedFileOutput.encode(v!, writer.uint32(90).fork()).join();
    }
    for (const v of message.imageOutputs) {
      ImageOutput.encode(v!, writer.uint32(106).fork()).join();
    }
    for (const v of message.webhooks) {
      WebhookConfig.encode(v!, writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebEgressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebEgressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.audioOnly = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.videoOnly = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.awaitStartSignal = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.output = { $case: "file", file: EncodedFileOutput.decode(reader, reader.uint32()) };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.output = { $case: "stream", stream: StreamOutput.decode(reader, reader.uint32()) };
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.output = { $case: "segments", segments: SegmentedFileOutput.decode(reader, reader.uint32()) };
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.options = { $case: "preset", preset: reader.int32() as any };
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.options = { $case: "advanced", advanced: EncodingOptions.decode(reader, reader.uint32()) };
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.fileOutputs.push(EncodedFileOutput.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.streamOutputs.push(StreamOutput.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.segmentOutputs.push(SegmentedFileOutput.decode(reader, reader.uint32()));
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.imageOutputs.push(ImageOutput.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.webhooks.push(WebhookConfig.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebEgressRequest {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      audioOnly: isSet(object.audioOnly) ? globalThis.Boolean(object.audioOnly) : false,
      videoOnly: isSet(object.videoOnly) ? globalThis.Boolean(object.videoOnly) : false,
      awaitStartSignal: isSet(object.awaitStartSignal) ? globalThis.Boolean(object.awaitStartSignal) : false,
      output: isSet(object.file)
        ? { $case: "file", file: EncodedFileOutput.fromJSON(object.file) }
        : isSet(object.stream)
        ? { $case: "stream", stream: StreamOutput.fromJSON(object.stream) }
        : isSet(object.segments)
        ? { $case: "segments", segments: SegmentedFileOutput.fromJSON(object.segments) }
        : undefined,
      options: isSet(object.preset)
        ? { $case: "preset", preset: encodingOptionsPresetFromJSON(object.preset) }
        : isSet(object.advanced)
        ? { $case: "advanced", advanced: EncodingOptions.fromJSON(object.advanced) }
        : undefined,
      fileOutputs: globalThis.Array.isArray(object?.fileOutputs)
        ? object.fileOutputs.map((e: any) => EncodedFileOutput.fromJSON(e))
        : [],
      streamOutputs: globalThis.Array.isArray(object?.streamOutputs)
        ? object.streamOutputs.map((e: any) => StreamOutput.fromJSON(e))
        : [],
      segmentOutputs: globalThis.Array.isArray(object?.segmentOutputs)
        ? object.segmentOutputs.map((e: any) => SegmentedFileOutput.fromJSON(e))
        : [],
      imageOutputs: globalThis.Array.isArray(object?.imageOutputs)
        ? object.imageOutputs.map((e: any) => ImageOutput.fromJSON(e))
        : [],
      webhooks: globalThis.Array.isArray(object?.webhooks)
        ? object.webhooks.map((e: any) => WebhookConfig.fromJSON(e))
        : [],
    };
  },

  toJSON(message: WebEgressRequest): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.audioOnly !== false) {
      obj.audioOnly = message.audioOnly;
    }
    if (message.videoOnly !== false) {
      obj.videoOnly = message.videoOnly;
    }
    if (message.awaitStartSignal !== false) {
      obj.awaitStartSignal = message.awaitStartSignal;
    }
    if (message.output?.$case === "file") {
      obj.file = EncodedFileOutput.toJSON(message.output.file);
    } else if (message.output?.$case === "stream") {
      obj.stream = StreamOutput.toJSON(message.output.stream);
    } else if (message.output?.$case === "segments") {
      obj.segments = SegmentedFileOutput.toJSON(message.output.segments);
    }
    if (message.options?.$case === "preset") {
      obj.preset = encodingOptionsPresetToJSON(message.options.preset);
    } else if (message.options?.$case === "advanced") {
      obj.advanced = EncodingOptions.toJSON(message.options.advanced);
    }
    if (message.fileOutputs?.length) {
      obj.fileOutputs = message.fileOutputs.map((e) => EncodedFileOutput.toJSON(e));
    }
    if (message.streamOutputs?.length) {
      obj.streamOutputs = message.streamOutputs.map((e) => StreamOutput.toJSON(e));
    }
    if (message.segmentOutputs?.length) {
      obj.segmentOutputs = message.segmentOutputs.map((e) => SegmentedFileOutput.toJSON(e));
    }
    if (message.imageOutputs?.length) {
      obj.imageOutputs = message.imageOutputs.map((e) => ImageOutput.toJSON(e));
    }
    if (message.webhooks?.length) {
      obj.webhooks = message.webhooks.map((e) => WebhookConfig.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<WebEgressRequest>): WebEgressRequest {
    return WebEgressRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WebEgressRequest>): WebEgressRequest {
    const message = createBaseWebEgressRequest();
    message.url = object.url ?? "";
    message.audioOnly = object.audioOnly ?? false;
    message.videoOnly = object.videoOnly ?? false;
    message.awaitStartSignal = object.awaitStartSignal ?? false;
    switch (object.output?.$case) {
      case "file": {
        if (object.output?.file !== undefined && object.output?.file !== null) {
          message.output = { $case: "file", file: EncodedFileOutput.fromPartial(object.output.file) };
        }
        break;
      }
      case "stream": {
        if (object.output?.stream !== undefined && object.output?.stream !== null) {
          message.output = { $case: "stream", stream: StreamOutput.fromPartial(object.output.stream) };
        }
        break;
      }
      case "segments": {
        if (object.output?.segments !== undefined && object.output?.segments !== null) {
          message.output = { $case: "segments", segments: SegmentedFileOutput.fromPartial(object.output.segments) };
        }
        break;
      }
    }
    switch (object.options?.$case) {
      case "preset": {
        if (object.options?.preset !== undefined && object.options?.preset !== null) {
          message.options = { $case: "preset", preset: object.options.preset };
        }
        break;
      }
      case "advanced": {
        if (object.options?.advanced !== undefined && object.options?.advanced !== null) {
          message.options = { $case: "advanced", advanced: EncodingOptions.fromPartial(object.options.advanced) };
        }
        break;
      }
    }
    message.fileOutputs = object.fileOutputs?.map((e) => EncodedFileOutput.fromPartial(e)) || [];
    message.streamOutputs = object.streamOutputs?.map((e) => StreamOutput.fromPartial(e)) || [];
    message.segmentOutputs = object.segmentOutputs?.map((e) => SegmentedFileOutput.fromPartial(e)) || [];
    message.imageOutputs = object.imageOutputs?.map((e) => ImageOutput.fromPartial(e)) || [];
    message.webhooks = object.webhooks?.map((e) => WebhookConfig.fromPartial(e)) || [];
    return message;
  },
};

function createBaseParticipantEgressRequest(): ParticipantEgressRequest {
  return {
    roomName: "",
    identity: "",
    screenShare: false,
    options: undefined,
    fileOutputs: [],
    streamOutputs: [],
    segmentOutputs: [],
    imageOutputs: [],
    webhooks: [],
  };
}

export const ParticipantEgressRequest: MessageFns<ParticipantEgressRequest> = {
  encode(message: ParticipantEgressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roomName !== "") {
      writer.uint32(10).string(message.roomName);
    }
    if (message.identity !== "") {
      writer.uint32(18).string(message.identity);
    }
    if (message.screenShare !== false) {
      writer.uint32(24).bool(message.screenShare);
    }
    switch (message.options?.$case) {
      case "preset":
        writer.uint32(32).int32(message.options.preset);
        break;
      case "advanced":
        EncodingOptions.encode(message.options.advanced, writer.uint32(42).fork()).join();
        break;
    }
    for (const v of message.fileOutputs) {
      EncodedFileOutput.encode(v!, writer.uint32(50).fork()).join();
    }
    for (const v of message.streamOutputs) {
      StreamOutput.encode(v!, writer.uint32(58).fork()).join();
    }
    for (const v of message.segmentOutputs) {
      SegmentedFileOutput.encode(v!, writer.uint32(66).fork()).join();
    }
    for (const v of message.imageOutputs) {
      ImageOutput.encode(v!, writer.uint32(74).fork()).join();
    }
    for (const v of message.webhooks) {
      WebhookConfig.encode(v!, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParticipantEgressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParticipantEgressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roomName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.identity = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.screenShare = reader.bool();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.options = { $case: "preset", preset: reader.int32() as any };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.options = { $case: "advanced", advanced: EncodingOptions.decode(reader, reader.uint32()) };
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.fileOutputs.push(EncodedFileOutput.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.streamOutputs.push(StreamOutput.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.segmentOutputs.push(SegmentedFileOutput.decode(reader, reader.uint32()));
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.imageOutputs.push(ImageOutput.decode(reader, reader.uint32()));
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.webhooks.push(WebhookConfig.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParticipantEgressRequest {
    return {
      roomName: isSet(object.roomName) ? globalThis.String(object.roomName) : "",
      identity: isSet(object.identity) ? globalThis.String(object.identity) : "",
      screenShare: isSet(object.screenShare) ? globalThis.Boolean(object.screenShare) : false,
      options: isSet(object.preset)
        ? { $case: "preset", preset: encodingOptionsPresetFromJSON(object.preset) }
        : isSet(object.advanced)
        ? { $case: "advanced", advanced: EncodingOptions.fromJSON(object.advanced) }
        : undefined,
      fileOutputs: globalThis.Array.isArray(object?.fileOutputs)
        ? object.fileOutputs.map((e: any) => EncodedFileOutput.fromJSON(e))
        : [],
      streamOutputs: globalThis.Array.isArray(object?.streamOutputs)
        ? object.streamOutputs.map((e: any) => StreamOutput.fromJSON(e))
        : [],
      segmentOutputs: globalThis.Array.isArray(object?.segmentOutputs)
        ? object.segmentOutputs.map((e: any) => SegmentedFileOutput.fromJSON(e))
        : [],
      imageOutputs: globalThis.Array.isArray(object?.imageOutputs)
        ? object.imageOutputs.map((e: any) => ImageOutput.fromJSON(e))
        : [],
      webhooks: globalThis.Array.isArray(object?.webhooks)
        ? object.webhooks.map((e: any) => WebhookConfig.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ParticipantEgressRequest): unknown {
    const obj: any = {};
    if (message.roomName !== "") {
      obj.roomName = message.roomName;
    }
    if (message.identity !== "") {
      obj.identity = message.identity;
    }
    if (message.screenShare !== false) {
      obj.screenShare = message.screenShare;
    }
    if (message.options?.$case === "preset") {
      obj.preset = encodingOptionsPresetToJSON(message.options.preset);
    } else if (message.options?.$case === "advanced") {
      obj.advanced = EncodingOptions.toJSON(message.options.advanced);
    }
    if (message.fileOutputs?.length) {
      obj.fileOutputs = message.fileOutputs.map((e) => EncodedFileOutput.toJSON(e));
    }
    if (message.streamOutputs?.length) {
      obj.streamOutputs = message.streamOutputs.map((e) => StreamOutput.toJSON(e));
    }
    if (message.segmentOutputs?.length) {
      obj.segmentOutputs = message.segmentOutputs.map((e) => SegmentedFileOutput.toJSON(e));
    }
    if (message.imageOutputs?.length) {
      obj.imageOutputs = message.imageOutputs.map((e) => ImageOutput.toJSON(e));
    }
    if (message.webhooks?.length) {
      obj.webhooks = message.webhooks.map((e) => WebhookConfig.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ParticipantEgressRequest>): ParticipantEgressRequest {
    return ParticipantEgressRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ParticipantEgressRequest>): ParticipantEgressRequest {
    const message = createBaseParticipantEgressRequest();
    message.roomName = object.roomName ?? "";
    message.identity = object.identity ?? "";
    message.screenShare = object.screenShare ?? false;
    switch (object.options?.$case) {
      case "preset": {
        if (object.options?.preset !== undefined && object.options?.preset !== null) {
          message.options = { $case: "preset", preset: object.options.preset };
        }
        break;
      }
      case "advanced": {
        if (object.options?.advanced !== undefined && object.options?.advanced !== null) {
          message.options = { $case: "advanced", advanced: EncodingOptions.fromPartial(object.options.advanced) };
        }
        break;
      }
    }
    message.fileOutputs = object.fileOutputs?.map((e) => EncodedFileOutput.fromPartial(e)) || [];
    message.streamOutputs = object.streamOutputs?.map((e) => StreamOutput.fromPartial(e)) || [];
    message.segmentOutputs = object.segmentOutputs?.map((e) => SegmentedFileOutput.fromPartial(e)) || [];
    message.imageOutputs = object.imageOutputs?.map((e) => ImageOutput.fromPartial(e)) || [];
    message.webhooks = object.webhooks?.map((e) => WebhookConfig.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTrackCompositeEgressRequest(): TrackCompositeEgressRequest {
  return {
    roomName: "",
    audioTrackId: "",
    videoTrackId: "",
    output: undefined,
    options: undefined,
    fileOutputs: [],
    streamOutputs: [],
    segmentOutputs: [],
    imageOutputs: [],
    webhooks: [],
  };
}

export const TrackCompositeEgressRequest: MessageFns<TrackCompositeEgressRequest> = {
  encode(message: TrackCompositeEgressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roomName !== "") {
      writer.uint32(10).string(message.roomName);
    }
    if (message.audioTrackId !== "") {
      writer.uint32(18).string(message.audioTrackId);
    }
    if (message.videoTrackId !== "") {
      writer.uint32(26).string(message.videoTrackId);
    }
    switch (message.output?.$case) {
      case "file":
        EncodedFileOutput.encode(message.output.file, writer.uint32(34).fork()).join();
        break;
      case "stream":
        StreamOutput.encode(message.output.stream, writer.uint32(42).fork()).join();
        break;
      case "segments":
        SegmentedFileOutput.encode(message.output.segments, writer.uint32(66).fork()).join();
        break;
    }
    switch (message.options?.$case) {
      case "preset":
        writer.uint32(48).int32(message.options.preset);
        break;
      case "advanced":
        EncodingOptions.encode(message.options.advanced, writer.uint32(58).fork()).join();
        break;
    }
    for (const v of message.fileOutputs) {
      EncodedFileOutput.encode(v!, writer.uint32(90).fork()).join();
    }
    for (const v of message.streamOutputs) {
      StreamOutput.encode(v!, writer.uint32(98).fork()).join();
    }
    for (const v of message.segmentOutputs) {
      SegmentedFileOutput.encode(v!, writer.uint32(106).fork()).join();
    }
    for (const v of message.imageOutputs) {
      ImageOutput.encode(v!, writer.uint32(114).fork()).join();
    }
    for (const v of message.webhooks) {
      WebhookConfig.encode(v!, writer.uint32(122).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrackCompositeEgressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrackCompositeEgressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roomName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.audioTrackId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.videoTrackId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.output = { $case: "file", file: EncodedFileOutput.decode(reader, reader.uint32()) };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.output = { $case: "stream", stream: StreamOutput.decode(reader, reader.uint32()) };
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.output = { $case: "segments", segments: SegmentedFileOutput.decode(reader, reader.uint32()) };
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.options = { $case: "preset", preset: reader.int32() as any };
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.options = { $case: "advanced", advanced: EncodingOptions.decode(reader, reader.uint32()) };
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.fileOutputs.push(EncodedFileOutput.decode(reader, reader.uint32()));
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.streamOutputs.push(StreamOutput.decode(reader, reader.uint32()));
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.segmentOutputs.push(SegmentedFileOutput.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.imageOutputs.push(ImageOutput.decode(reader, reader.uint32()));
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.webhooks.push(WebhookConfig.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrackCompositeEgressRequest {
    return {
      roomName: isSet(object.roomName) ? globalThis.String(object.roomName) : "",
      audioTrackId: isSet(object.audioTrackId) ? globalThis.String(object.audioTrackId) : "",
      videoTrackId: isSet(object.videoTrackId) ? globalThis.String(object.videoTrackId) : "",
      output: isSet(object.file)
        ? { $case: "file", file: EncodedFileOutput.fromJSON(object.file) }
        : isSet(object.stream)
        ? { $case: "stream", stream: StreamOutput.fromJSON(object.stream) }
        : isSet(object.segments)
        ? { $case: "segments", segments: SegmentedFileOutput.fromJSON(object.segments) }
        : undefined,
      options: isSet(object.preset)
        ? { $case: "preset", preset: encodingOptionsPresetFromJSON(object.preset) }
        : isSet(object.advanced)
        ? { $case: "advanced", advanced: EncodingOptions.fromJSON(object.advanced) }
        : undefined,
      fileOutputs: globalThis.Array.isArray(object?.fileOutputs)
        ? object.fileOutputs.map((e: any) => EncodedFileOutput.fromJSON(e))
        : [],
      streamOutputs: globalThis.Array.isArray(object?.streamOutputs)
        ? object.streamOutputs.map((e: any) => StreamOutput.fromJSON(e))
        : [],
      segmentOutputs: globalThis.Array.isArray(object?.segmentOutputs)
        ? object.segmentOutputs.map((e: any) => SegmentedFileOutput.fromJSON(e))
        : [],
      imageOutputs: globalThis.Array.isArray(object?.imageOutputs)
        ? object.imageOutputs.map((e: any) => ImageOutput.fromJSON(e))
        : [],
      webhooks: globalThis.Array.isArray(object?.webhooks)
        ? object.webhooks.map((e: any) => WebhookConfig.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TrackCompositeEgressRequest): unknown {
    const obj: any = {};
    if (message.roomName !== "") {
      obj.roomName = message.roomName;
    }
    if (message.audioTrackId !== "") {
      obj.audioTrackId = message.audioTrackId;
    }
    if (message.videoTrackId !== "") {
      obj.videoTrackId = message.videoTrackId;
    }
    if (message.output?.$case === "file") {
      obj.file = EncodedFileOutput.toJSON(message.output.file);
    } else if (message.output?.$case === "stream") {
      obj.stream = StreamOutput.toJSON(message.output.stream);
    } else if (message.output?.$case === "segments") {
      obj.segments = SegmentedFileOutput.toJSON(message.output.segments);
    }
    if (message.options?.$case === "preset") {
      obj.preset = encodingOptionsPresetToJSON(message.options.preset);
    } else if (message.options?.$case === "advanced") {
      obj.advanced = EncodingOptions.toJSON(message.options.advanced);
    }
    if (message.fileOutputs?.length) {
      obj.fileOutputs = message.fileOutputs.map((e) => EncodedFileOutput.toJSON(e));
    }
    if (message.streamOutputs?.length) {
      obj.streamOutputs = message.streamOutputs.map((e) => StreamOutput.toJSON(e));
    }
    if (message.segmentOutputs?.length) {
      obj.segmentOutputs = message.segmentOutputs.map((e) => SegmentedFileOutput.toJSON(e));
    }
    if (message.imageOutputs?.length) {
      obj.imageOutputs = message.imageOutputs.map((e) => ImageOutput.toJSON(e));
    }
    if (message.webhooks?.length) {
      obj.webhooks = message.webhooks.map((e) => WebhookConfig.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TrackCompositeEgressRequest>): TrackCompositeEgressRequest {
    return TrackCompositeEgressRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TrackCompositeEgressRequest>): TrackCompositeEgressRequest {
    const message = createBaseTrackCompositeEgressRequest();
    message.roomName = object.roomName ?? "";
    message.audioTrackId = object.audioTrackId ?? "";
    message.videoTrackId = object.videoTrackId ?? "";
    switch (object.output?.$case) {
      case "file": {
        if (object.output?.file !== undefined && object.output?.file !== null) {
          message.output = { $case: "file", file: EncodedFileOutput.fromPartial(object.output.file) };
        }
        break;
      }
      case "stream": {
        if (object.output?.stream !== undefined && object.output?.stream !== null) {
          message.output = { $case: "stream", stream: StreamOutput.fromPartial(object.output.stream) };
        }
        break;
      }
      case "segments": {
        if (object.output?.segments !== undefined && object.output?.segments !== null) {
          message.output = { $case: "segments", segments: SegmentedFileOutput.fromPartial(object.output.segments) };
        }
        break;
      }
    }
    switch (object.options?.$case) {
      case "preset": {
        if (object.options?.preset !== undefined && object.options?.preset !== null) {
          message.options = { $case: "preset", preset: object.options.preset };
        }
        break;
      }
      case "advanced": {
        if (object.options?.advanced !== undefined && object.options?.advanced !== null) {
          message.options = { $case: "advanced", advanced: EncodingOptions.fromPartial(object.options.advanced) };
        }
        break;
      }
    }
    message.fileOutputs = object.fileOutputs?.map((e) => EncodedFileOutput.fromPartial(e)) || [];
    message.streamOutputs = object.streamOutputs?.map((e) => StreamOutput.fromPartial(e)) || [];
    message.segmentOutputs = object.segmentOutputs?.map((e) => SegmentedFileOutput.fromPartial(e)) || [];
    message.imageOutputs = object.imageOutputs?.map((e) => ImageOutput.fromPartial(e)) || [];
    message.webhooks = object.webhooks?.map((e) => WebhookConfig.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTrackEgressRequest(): TrackEgressRequest {
  return { roomName: "", trackId: "", output: undefined, webhooks: [] };
}

export const TrackEgressRequest: MessageFns<TrackEgressRequest> = {
  encode(message: TrackEgressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roomName !== "") {
      writer.uint32(10).string(message.roomName);
    }
    if (message.trackId !== "") {
      writer.uint32(18).string(message.trackId);
    }
    switch (message.output?.$case) {
      case "file":
        DirectFileOutput.encode(message.output.file, writer.uint32(26).fork()).join();
        break;
      case "websocketUrl":
        writer.uint32(34).string(message.output.websocketUrl);
        break;
    }
    for (const v of message.webhooks) {
      WebhookConfig.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrackEgressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrackEgressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roomName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.trackId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.output = { $case: "file", file: DirectFileOutput.decode(reader, reader.uint32()) };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.output = { $case: "websocketUrl", websocketUrl: reader.string() };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.webhooks.push(WebhookConfig.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrackEgressRequest {
    return {
      roomName: isSet(object.roomName) ? globalThis.String(object.roomName) : "",
      trackId: isSet(object.trackId) ? globalThis.String(object.trackId) : "",
      output: isSet(object.file)
        ? { $case: "file", file: DirectFileOutput.fromJSON(object.file) }
        : isSet(object.websocketUrl)
        ? { $case: "websocketUrl", websocketUrl: globalThis.String(object.websocketUrl) }
        : undefined,
      webhooks: globalThis.Array.isArray(object?.webhooks)
        ? object.webhooks.map((e: any) => WebhookConfig.fromJSON(e))
        : [],
    };
  },

  toJSON(message: TrackEgressRequest): unknown {
    const obj: any = {};
    if (message.roomName !== "") {
      obj.roomName = message.roomName;
    }
    if (message.trackId !== "") {
      obj.trackId = message.trackId;
    }
    if (message.output?.$case === "file") {
      obj.file = DirectFileOutput.toJSON(message.output.file);
    } else if (message.output?.$case === "websocketUrl") {
      obj.websocketUrl = message.output.websocketUrl;
    }
    if (message.webhooks?.length) {
      obj.webhooks = message.webhooks.map((e) => WebhookConfig.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<TrackEgressRequest>): TrackEgressRequest {
    return TrackEgressRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TrackEgressRequest>): TrackEgressRequest {
    const message = createBaseTrackEgressRequest();
    message.roomName = object.roomName ?? "";
    message.trackId = object.trackId ?? "";
    switch (object.output?.$case) {
      case "file": {
        if (object.output?.file !== undefined && object.output?.file !== null) {
          message.output = { $case: "file", file: DirectFileOutput.fromPartial(object.output.file) };
        }
        break;
      }
      case "websocketUrl": {
        if (object.output?.websocketUrl !== undefined && object.output?.websocketUrl !== null) {
          message.output = { $case: "websocketUrl", websocketUrl: object.output.websocketUrl };
        }
        break;
      }
    }
    message.webhooks = object.webhooks?.map((e) => WebhookConfig.fromPartial(e)) || [];
    return message;
  },
};

function createBaseEncodedFileOutput(): EncodedFileOutput {
  return { fileType: 0, filepath: "", disableManifest: false, output: undefined };
}

export const EncodedFileOutput: MessageFns<EncodedFileOutput> = {
  encode(message: EncodedFileOutput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.fileType !== 0) {
      writer.uint32(8).int32(message.fileType);
    }
    if (message.filepath !== "") {
      writer.uint32(18).string(message.filepath);
    }
    if (message.disableManifest !== false) {
      writer.uint32(48).bool(message.disableManifest);
    }
    switch (message.output?.$case) {
      case "s3":
        S3Upload.encode(message.output.s3, writer.uint32(26).fork()).join();
        break;
      case "gcp":
        GCPUpload.encode(message.output.gcp, writer.uint32(34).fork()).join();
        break;
      case "azure":
        AzureBlobUpload.encode(message.output.azure, writer.uint32(42).fork()).join();
        break;
      case "aliOSS":
        AliOSSUpload.encode(message.output.aliOSS, writer.uint32(58).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EncodedFileOutput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEncodedFileOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.fileType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.filepath = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.disableManifest = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.output = { $case: "s3", s3: S3Upload.decode(reader, reader.uint32()) };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.output = { $case: "gcp", gcp: GCPUpload.decode(reader, reader.uint32()) };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.output = { $case: "azure", azure: AzureBlobUpload.decode(reader, reader.uint32()) };
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.output = { $case: "aliOSS", aliOSS: AliOSSUpload.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EncodedFileOutput {
    return {
      fileType: isSet(object.fileType) ? encodedFileTypeFromJSON(object.fileType) : 0,
      filepath: isSet(object.filepath) ? globalThis.String(object.filepath) : "",
      disableManifest: isSet(object.disableManifest) ? globalThis.Boolean(object.disableManifest) : false,
      output: isSet(object.s3)
        ? { $case: "s3", s3: S3Upload.fromJSON(object.s3) }
        : isSet(object.gcp)
        ? { $case: "gcp", gcp: GCPUpload.fromJSON(object.gcp) }
        : isSet(object.azure)
        ? { $case: "azure", azure: AzureBlobUpload.fromJSON(object.azure) }
        : isSet(object.aliOSS)
        ? { $case: "aliOSS", aliOSS: AliOSSUpload.fromJSON(object.aliOSS) }
        : undefined,
    };
  },

  toJSON(message: EncodedFileOutput): unknown {
    const obj: any = {};
    if (message.fileType !== 0) {
      obj.fileType = encodedFileTypeToJSON(message.fileType);
    }
    if (message.filepath !== "") {
      obj.filepath = message.filepath;
    }
    if (message.disableManifest !== false) {
      obj.disableManifest = message.disableManifest;
    }
    if (message.output?.$case === "s3") {
      obj.s3 = S3Upload.toJSON(message.output.s3);
    } else if (message.output?.$case === "gcp") {
      obj.gcp = GCPUpload.toJSON(message.output.gcp);
    } else if (message.output?.$case === "azure") {
      obj.azure = AzureBlobUpload.toJSON(message.output.azure);
    } else if (message.output?.$case === "aliOSS") {
      obj.aliOSS = AliOSSUpload.toJSON(message.output.aliOSS);
    }
    return obj;
  },

  create(base?: DeepPartial<EncodedFileOutput>): EncodedFileOutput {
    return EncodedFileOutput.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EncodedFileOutput>): EncodedFileOutput {
    const message = createBaseEncodedFileOutput();
    message.fileType = object.fileType ?? 0;
    message.filepath = object.filepath ?? "";
    message.disableManifest = object.disableManifest ?? false;
    switch (object.output?.$case) {
      case "s3": {
        if (object.output?.s3 !== undefined && object.output?.s3 !== null) {
          message.output = { $case: "s3", s3: S3Upload.fromPartial(object.output.s3) };
        }
        break;
      }
      case "gcp": {
        if (object.output?.gcp !== undefined && object.output?.gcp !== null) {
          message.output = { $case: "gcp", gcp: GCPUpload.fromPartial(object.output.gcp) };
        }
        break;
      }
      case "azure": {
        if (object.output?.azure !== undefined && object.output?.azure !== null) {
          message.output = { $case: "azure", azure: AzureBlobUpload.fromPartial(object.output.azure) };
        }
        break;
      }
      case "aliOSS": {
        if (object.output?.aliOSS !== undefined && object.output?.aliOSS !== null) {
          message.output = { $case: "aliOSS", aliOSS: AliOSSUpload.fromPartial(object.output.aliOSS) };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseSegmentedFileOutput(): SegmentedFileOutput {
  return {
    protocol: 0,
    filenamePrefix: "",
    playlistName: "",
    livePlaylistName: "",
    segmentDuration: 0,
    filenameSuffix: 0,
    disableManifest: false,
    output: undefined,
  };
}

export const SegmentedFileOutput: MessageFns<SegmentedFileOutput> = {
  encode(message: SegmentedFileOutput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.protocol !== 0) {
      writer.uint32(8).int32(message.protocol);
    }
    if (message.filenamePrefix !== "") {
      writer.uint32(18).string(message.filenamePrefix);
    }
    if (message.playlistName !== "") {
      writer.uint32(26).string(message.playlistName);
    }
    if (message.livePlaylistName !== "") {
      writer.uint32(90).string(message.livePlaylistName);
    }
    if (message.segmentDuration !== 0) {
      writer.uint32(32).uint32(message.segmentDuration);
    }
    if (message.filenameSuffix !== 0) {
      writer.uint32(80).int32(message.filenameSuffix);
    }
    if (message.disableManifest !== false) {
      writer.uint32(64).bool(message.disableManifest);
    }
    switch (message.output?.$case) {
      case "s3":
        S3Upload.encode(message.output.s3, writer.uint32(42).fork()).join();
        break;
      case "gcp":
        GCPUpload.encode(message.output.gcp, writer.uint32(50).fork()).join();
        break;
      case "azure":
        AzureBlobUpload.encode(message.output.azure, writer.uint32(58).fork()).join();
        break;
      case "aliOSS":
        AliOSSUpload.encode(message.output.aliOSS, writer.uint32(74).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SegmentedFileOutput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSegmentedFileOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.protocol = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.filenamePrefix = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.playlistName = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.livePlaylistName = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.segmentDuration = reader.uint32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.filenameSuffix = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.disableManifest = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.output = { $case: "s3", s3: S3Upload.decode(reader, reader.uint32()) };
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.output = { $case: "gcp", gcp: GCPUpload.decode(reader, reader.uint32()) };
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.output = { $case: "azure", azure: AzureBlobUpload.decode(reader, reader.uint32()) };
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.output = { $case: "aliOSS", aliOSS: AliOSSUpload.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SegmentedFileOutput {
    return {
      protocol: isSet(object.protocol) ? segmentedFileProtocolFromJSON(object.protocol) : 0,
      filenamePrefix: isSet(object.filenamePrefix) ? globalThis.String(object.filenamePrefix) : "",
      playlistName: isSet(object.playlistName) ? globalThis.String(object.playlistName) : "",
      livePlaylistName: isSet(object.livePlaylistName) ? globalThis.String(object.livePlaylistName) : "",
      segmentDuration: isSet(object.segmentDuration) ? globalThis.Number(object.segmentDuration) : 0,
      filenameSuffix: isSet(object.filenameSuffix) ? segmentedFileSuffixFromJSON(object.filenameSuffix) : 0,
      disableManifest: isSet(object.disableManifest) ? globalThis.Boolean(object.disableManifest) : false,
      output: isSet(object.s3)
        ? { $case: "s3", s3: S3Upload.fromJSON(object.s3) }
        : isSet(object.gcp)
        ? { $case: "gcp", gcp: GCPUpload.fromJSON(object.gcp) }
        : isSet(object.azure)
        ? { $case: "azure", azure: AzureBlobUpload.fromJSON(object.azure) }
        : isSet(object.aliOSS)
        ? { $case: "aliOSS", aliOSS: AliOSSUpload.fromJSON(object.aliOSS) }
        : undefined,
    };
  },

  toJSON(message: SegmentedFileOutput): unknown {
    const obj: any = {};
    if (message.protocol !== 0) {
      obj.protocol = segmentedFileProtocolToJSON(message.protocol);
    }
    if (message.filenamePrefix !== "") {
      obj.filenamePrefix = message.filenamePrefix;
    }
    if (message.playlistName !== "") {
      obj.playlistName = message.playlistName;
    }
    if (message.livePlaylistName !== "") {
      obj.livePlaylistName = message.livePlaylistName;
    }
    if (message.segmentDuration !== 0) {
      obj.segmentDuration = Math.round(message.segmentDuration);
    }
    if (message.filenameSuffix !== 0) {
      obj.filenameSuffix = segmentedFileSuffixToJSON(message.filenameSuffix);
    }
    if (message.disableManifest !== false) {
      obj.disableManifest = message.disableManifest;
    }
    if (message.output?.$case === "s3") {
      obj.s3 = S3Upload.toJSON(message.output.s3);
    } else if (message.output?.$case === "gcp") {
      obj.gcp = GCPUpload.toJSON(message.output.gcp);
    } else if (message.output?.$case === "azure") {
      obj.azure = AzureBlobUpload.toJSON(message.output.azure);
    } else if (message.output?.$case === "aliOSS") {
      obj.aliOSS = AliOSSUpload.toJSON(message.output.aliOSS);
    }
    return obj;
  },

  create(base?: DeepPartial<SegmentedFileOutput>): SegmentedFileOutput {
    return SegmentedFileOutput.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SegmentedFileOutput>): SegmentedFileOutput {
    const message = createBaseSegmentedFileOutput();
    message.protocol = object.protocol ?? 0;
    message.filenamePrefix = object.filenamePrefix ?? "";
    message.playlistName = object.playlistName ?? "";
    message.livePlaylistName = object.livePlaylistName ?? "";
    message.segmentDuration = object.segmentDuration ?? 0;
    message.filenameSuffix = object.filenameSuffix ?? 0;
    message.disableManifest = object.disableManifest ?? false;
    switch (object.output?.$case) {
      case "s3": {
        if (object.output?.s3 !== undefined && object.output?.s3 !== null) {
          message.output = { $case: "s3", s3: S3Upload.fromPartial(object.output.s3) };
        }
        break;
      }
      case "gcp": {
        if (object.output?.gcp !== undefined && object.output?.gcp !== null) {
          message.output = { $case: "gcp", gcp: GCPUpload.fromPartial(object.output.gcp) };
        }
        break;
      }
      case "azure": {
        if (object.output?.azure !== undefined && object.output?.azure !== null) {
          message.output = { $case: "azure", azure: AzureBlobUpload.fromPartial(object.output.azure) };
        }
        break;
      }
      case "aliOSS": {
        if (object.output?.aliOSS !== undefined && object.output?.aliOSS !== null) {
          message.output = { $case: "aliOSS", aliOSS: AliOSSUpload.fromPartial(object.output.aliOSS) };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseDirectFileOutput(): DirectFileOutput {
  return { filepath: "", disableManifest: false, output: undefined };
}

export const DirectFileOutput: MessageFns<DirectFileOutput> = {
  encode(message: DirectFileOutput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filepath !== "") {
      writer.uint32(10).string(message.filepath);
    }
    if (message.disableManifest !== false) {
      writer.uint32(40).bool(message.disableManifest);
    }
    switch (message.output?.$case) {
      case "s3":
        S3Upload.encode(message.output.s3, writer.uint32(18).fork()).join();
        break;
      case "gcp":
        GCPUpload.encode(message.output.gcp, writer.uint32(26).fork()).join();
        break;
      case "azure":
        AzureBlobUpload.encode(message.output.azure, writer.uint32(34).fork()).join();
        break;
      case "aliOSS":
        AliOSSUpload.encode(message.output.aliOSS, writer.uint32(50).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DirectFileOutput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDirectFileOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filepath = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.disableManifest = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.output = { $case: "s3", s3: S3Upload.decode(reader, reader.uint32()) };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.output = { $case: "gcp", gcp: GCPUpload.decode(reader, reader.uint32()) };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.output = { $case: "azure", azure: AzureBlobUpload.decode(reader, reader.uint32()) };
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.output = { $case: "aliOSS", aliOSS: AliOSSUpload.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DirectFileOutput {
    return {
      filepath: isSet(object.filepath) ? globalThis.String(object.filepath) : "",
      disableManifest: isSet(object.disableManifest) ? globalThis.Boolean(object.disableManifest) : false,
      output: isSet(object.s3)
        ? { $case: "s3", s3: S3Upload.fromJSON(object.s3) }
        : isSet(object.gcp)
        ? { $case: "gcp", gcp: GCPUpload.fromJSON(object.gcp) }
        : isSet(object.azure)
        ? { $case: "azure", azure: AzureBlobUpload.fromJSON(object.azure) }
        : isSet(object.aliOSS)
        ? { $case: "aliOSS", aliOSS: AliOSSUpload.fromJSON(object.aliOSS) }
        : undefined,
    };
  },

  toJSON(message: DirectFileOutput): unknown {
    const obj: any = {};
    if (message.filepath !== "") {
      obj.filepath = message.filepath;
    }
    if (message.disableManifest !== false) {
      obj.disableManifest = message.disableManifest;
    }
    if (message.output?.$case === "s3") {
      obj.s3 = S3Upload.toJSON(message.output.s3);
    } else if (message.output?.$case === "gcp") {
      obj.gcp = GCPUpload.toJSON(message.output.gcp);
    } else if (message.output?.$case === "azure") {
      obj.azure = AzureBlobUpload.toJSON(message.output.azure);
    } else if (message.output?.$case === "aliOSS") {
      obj.aliOSS = AliOSSUpload.toJSON(message.output.aliOSS);
    }
    return obj;
  },

  create(base?: DeepPartial<DirectFileOutput>): DirectFileOutput {
    return DirectFileOutput.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DirectFileOutput>): DirectFileOutput {
    const message = createBaseDirectFileOutput();
    message.filepath = object.filepath ?? "";
    message.disableManifest = object.disableManifest ?? false;
    switch (object.output?.$case) {
      case "s3": {
        if (object.output?.s3 !== undefined && object.output?.s3 !== null) {
          message.output = { $case: "s3", s3: S3Upload.fromPartial(object.output.s3) };
        }
        break;
      }
      case "gcp": {
        if (object.output?.gcp !== undefined && object.output?.gcp !== null) {
          message.output = { $case: "gcp", gcp: GCPUpload.fromPartial(object.output.gcp) };
        }
        break;
      }
      case "azure": {
        if (object.output?.azure !== undefined && object.output?.azure !== null) {
          message.output = { $case: "azure", azure: AzureBlobUpload.fromPartial(object.output.azure) };
        }
        break;
      }
      case "aliOSS": {
        if (object.output?.aliOSS !== undefined && object.output?.aliOSS !== null) {
          message.output = { $case: "aliOSS", aliOSS: AliOSSUpload.fromPartial(object.output.aliOSS) };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseImageOutput(): ImageOutput {
  return {
    captureInterval: 0,
    width: 0,
    height: 0,
    filenamePrefix: "",
    filenameSuffix: 0,
    imageCodec: 0,
    disableManifest: false,
    output: undefined,
  };
}

export const ImageOutput: MessageFns<ImageOutput> = {
  encode(message: ImageOutput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.captureInterval !== 0) {
      writer.uint32(8).uint32(message.captureInterval);
    }
    if (message.width !== 0) {
      writer.uint32(16).int32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(24).int32(message.height);
    }
    if (message.filenamePrefix !== "") {
      writer.uint32(34).string(message.filenamePrefix);
    }
    if (message.filenameSuffix !== 0) {
      writer.uint32(40).int32(message.filenameSuffix);
    }
    if (message.imageCodec !== 0) {
      writer.uint32(48).int32(message.imageCodec);
    }
    if (message.disableManifest !== false) {
      writer.uint32(56).bool(message.disableManifest);
    }
    switch (message.output?.$case) {
      case "s3":
        S3Upload.encode(message.output.s3, writer.uint32(66).fork()).join();
        break;
      case "gcp":
        GCPUpload.encode(message.output.gcp, writer.uint32(74).fork()).join();
        break;
      case "azure":
        AzureBlobUpload.encode(message.output.azure, writer.uint32(82).fork()).join();
        break;
      case "aliOSS":
        AliOSSUpload.encode(message.output.aliOSS, writer.uint32(90).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImageOutput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImageOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.captureInterval = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.width = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.height = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.filenamePrefix = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.filenameSuffix = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.imageCodec = reader.int32() as any;
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.disableManifest = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.output = { $case: "s3", s3: S3Upload.decode(reader, reader.uint32()) };
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.output = { $case: "gcp", gcp: GCPUpload.decode(reader, reader.uint32()) };
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.output = { $case: "azure", azure: AzureBlobUpload.decode(reader, reader.uint32()) };
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.output = { $case: "aliOSS", aliOSS: AliOSSUpload.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImageOutput {
    return {
      captureInterval: isSet(object.captureInterval) ? globalThis.Number(object.captureInterval) : 0,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      filenamePrefix: isSet(object.filenamePrefix) ? globalThis.String(object.filenamePrefix) : "",
      filenameSuffix: isSet(object.filenameSuffix) ? imageFileSuffixFromJSON(object.filenameSuffix) : 0,
      imageCodec: isSet(object.imageCodec) ? imageCodecFromJSON(object.imageCodec) : 0,
      disableManifest: isSet(object.disableManifest) ? globalThis.Boolean(object.disableManifest) : false,
      output: isSet(object.s3)
        ? { $case: "s3", s3: S3Upload.fromJSON(object.s3) }
        : isSet(object.gcp)
        ? { $case: "gcp", gcp: GCPUpload.fromJSON(object.gcp) }
        : isSet(object.azure)
        ? { $case: "azure", azure: AzureBlobUpload.fromJSON(object.azure) }
        : isSet(object.aliOSS)
        ? { $case: "aliOSS", aliOSS: AliOSSUpload.fromJSON(object.aliOSS) }
        : undefined,
    };
  },

  toJSON(message: ImageOutput): unknown {
    const obj: any = {};
    if (message.captureInterval !== 0) {
      obj.captureInterval = Math.round(message.captureInterval);
    }
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.filenamePrefix !== "") {
      obj.filenamePrefix = message.filenamePrefix;
    }
    if (message.filenameSuffix !== 0) {
      obj.filenameSuffix = imageFileSuffixToJSON(message.filenameSuffix);
    }
    if (message.imageCodec !== 0) {
      obj.imageCodec = imageCodecToJSON(message.imageCodec);
    }
    if (message.disableManifest !== false) {
      obj.disableManifest = message.disableManifest;
    }
    if (message.output?.$case === "s3") {
      obj.s3 = S3Upload.toJSON(message.output.s3);
    } else if (message.output?.$case === "gcp") {
      obj.gcp = GCPUpload.toJSON(message.output.gcp);
    } else if (message.output?.$case === "azure") {
      obj.azure = AzureBlobUpload.toJSON(message.output.azure);
    } else if (message.output?.$case === "aliOSS") {
      obj.aliOSS = AliOSSUpload.toJSON(message.output.aliOSS);
    }
    return obj;
  },

  create(base?: DeepPartial<ImageOutput>): ImageOutput {
    return ImageOutput.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImageOutput>): ImageOutput {
    const message = createBaseImageOutput();
    message.captureInterval = object.captureInterval ?? 0;
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    message.filenamePrefix = object.filenamePrefix ?? "";
    message.filenameSuffix = object.filenameSuffix ?? 0;
    message.imageCodec = object.imageCodec ?? 0;
    message.disableManifest = object.disableManifest ?? false;
    switch (object.output?.$case) {
      case "s3": {
        if (object.output?.s3 !== undefined && object.output?.s3 !== null) {
          message.output = { $case: "s3", s3: S3Upload.fromPartial(object.output.s3) };
        }
        break;
      }
      case "gcp": {
        if (object.output?.gcp !== undefined && object.output?.gcp !== null) {
          message.output = { $case: "gcp", gcp: GCPUpload.fromPartial(object.output.gcp) };
        }
        break;
      }
      case "azure": {
        if (object.output?.azure !== undefined && object.output?.azure !== null) {
          message.output = { $case: "azure", azure: AzureBlobUpload.fromPartial(object.output.azure) };
        }
        break;
      }
      case "aliOSS": {
        if (object.output?.aliOSS !== undefined && object.output?.aliOSS !== null) {
          message.output = { $case: "aliOSS", aliOSS: AliOSSUpload.fromPartial(object.output.aliOSS) };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseS3Upload(): S3Upload {
  return {
    accessKey: "",
    secret: "",
    sessionToken: "",
    region: "",
    endpoint: "",
    bucket: "",
    forcePathStyle: false,
    metadata: {},
    tagging: "",
    contentDisposition: "",
    proxy: undefined,
  };
}

export const S3Upload: MessageFns<S3Upload> = {
  encode(message: S3Upload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessKey !== "") {
      writer.uint32(10).string(message.accessKey);
    }
    if (message.secret !== "") {
      writer.uint32(18).string(message.secret);
    }
    if (message.sessionToken !== "") {
      writer.uint32(90).string(message.sessionToken);
    }
    if (message.region !== "") {
      writer.uint32(26).string(message.region);
    }
    if (message.endpoint !== "") {
      writer.uint32(34).string(message.endpoint);
    }
    if (message.bucket !== "") {
      writer.uint32(42).string(message.bucket);
    }
    if (message.forcePathStyle !== false) {
      writer.uint32(48).bool(message.forcePathStyle);
    }
    Object.entries(message.metadata).forEach(([key, value]) => {
      S3Upload_MetadataEntry.encode({ key: key as any, value }, writer.uint32(58).fork()).join();
    });
    if (message.tagging !== "") {
      writer.uint32(66).string(message.tagging);
    }
    if (message.contentDisposition !== "") {
      writer.uint32(74).string(message.contentDisposition);
    }
    if (message.proxy !== undefined) {
      ProxyConfig.encode(message.proxy, writer.uint32(82).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): S3Upload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseS3Upload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accessKey = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.secret = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.sessionToken = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.region = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.bucket = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.forcePathStyle = reader.bool();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          const entry7 = S3Upload_MetadataEntry.decode(reader, reader.uint32());
          if (entry7.value !== undefined) {
            message.metadata[entry7.key] = entry7.value;
          }
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.tagging = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.contentDisposition = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.proxy = ProxyConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): S3Upload {
    return {
      accessKey: isSet(object.accessKey) ? globalThis.String(object.accessKey) : "",
      secret: isSet(object.secret) ? globalThis.String(object.secret) : "",
      sessionToken: isSet(object.sessionToken) ? globalThis.String(object.sessionToken) : "",
      region: isSet(object.region) ? globalThis.String(object.region) : "",
      endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      forcePathStyle: isSet(object.forcePathStyle) ? globalThis.Boolean(object.forcePathStyle) : false,
      metadata: isObject(object.metadata)
        ? Object.entries(object.metadata).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      tagging: isSet(object.tagging) ? globalThis.String(object.tagging) : "",
      contentDisposition: isSet(object.contentDisposition) ? globalThis.String(object.contentDisposition) : "",
      proxy: isSet(object.proxy) ? ProxyConfig.fromJSON(object.proxy) : undefined,
    };
  },

  toJSON(message: S3Upload): unknown {
    const obj: any = {};
    if (message.accessKey !== "") {
      obj.accessKey = message.accessKey;
    }
    if (message.secret !== "") {
      obj.secret = message.secret;
    }
    if (message.sessionToken !== "") {
      obj.sessionToken = message.sessionToken;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.forcePathStyle !== false) {
      obj.forcePathStyle = message.forcePathStyle;
    }
    if (message.metadata) {
      const entries = Object.entries(message.metadata);
      if (entries.length > 0) {
        obj.metadata = {};
        entries.forEach(([k, v]) => {
          obj.metadata[k] = v;
        });
      }
    }
    if (message.tagging !== "") {
      obj.tagging = message.tagging;
    }
    if (message.contentDisposition !== "") {
      obj.contentDisposition = message.contentDisposition;
    }
    if (message.proxy !== undefined) {
      obj.proxy = ProxyConfig.toJSON(message.proxy);
    }
    return obj;
  },

  create(base?: DeepPartial<S3Upload>): S3Upload {
    return S3Upload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<S3Upload>): S3Upload {
    const message = createBaseS3Upload();
    message.accessKey = object.accessKey ?? "";
    message.secret = object.secret ?? "";
    message.sessionToken = object.sessionToken ?? "";
    message.region = object.region ?? "";
    message.endpoint = object.endpoint ?? "";
    message.bucket = object.bucket ?? "";
    message.forcePathStyle = object.forcePathStyle ?? false;
    message.metadata = Object.entries(object.metadata ?? {}).reduce<{ [key: string]: string }>((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = globalThis.String(value);
      }
      return acc;
    }, {});
    message.tagging = object.tagging ?? "";
    message.contentDisposition = object.contentDisposition ?? "";
    message.proxy = (object.proxy !== undefined && object.proxy !== null)
      ? ProxyConfig.fromPartial(object.proxy)
      : undefined;
    return message;
  },
};

function createBaseS3Upload_MetadataEntry(): S3Upload_MetadataEntry {
  return { key: "", value: "" };
}

export const S3Upload_MetadataEntry: MessageFns<S3Upload_MetadataEntry> = {
  encode(message: S3Upload_MetadataEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): S3Upload_MetadataEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseS3Upload_MetadataEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): S3Upload_MetadataEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: S3Upload_MetadataEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<S3Upload_MetadataEntry>): S3Upload_MetadataEntry {
    return S3Upload_MetadataEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<S3Upload_MetadataEntry>): S3Upload_MetadataEntry {
    const message = createBaseS3Upload_MetadataEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseGCPUpload(): GCPUpload {
  return { credentials: "", bucket: "", proxy: undefined };
}

export const GCPUpload: MessageFns<GCPUpload> = {
  encode(message: GCPUpload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.credentials !== "") {
      writer.uint32(10).string(message.credentials);
    }
    if (message.bucket !== "") {
      writer.uint32(18).string(message.bucket);
    }
    if (message.proxy !== undefined) {
      ProxyConfig.encode(message.proxy, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GCPUpload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGCPUpload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.credentials = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.bucket = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.proxy = ProxyConfig.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GCPUpload {
    return {
      credentials: isSet(object.credentials) ? globalThis.String(object.credentials) : "",
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
      proxy: isSet(object.proxy) ? ProxyConfig.fromJSON(object.proxy) : undefined,
    };
  },

  toJSON(message: GCPUpload): unknown {
    const obj: any = {};
    if (message.credentials !== "") {
      obj.credentials = message.credentials;
    }
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    if (message.proxy !== undefined) {
      obj.proxy = ProxyConfig.toJSON(message.proxy);
    }
    return obj;
  },

  create(base?: DeepPartial<GCPUpload>): GCPUpload {
    return GCPUpload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GCPUpload>): GCPUpload {
    const message = createBaseGCPUpload();
    message.credentials = object.credentials ?? "";
    message.bucket = object.bucket ?? "";
    message.proxy = (object.proxy !== undefined && object.proxy !== null)
      ? ProxyConfig.fromPartial(object.proxy)
      : undefined;
    return message;
  },
};

function createBaseAzureBlobUpload(): AzureBlobUpload {
  return { accountName: "", accountKey: "", containerName: "" };
}

export const AzureBlobUpload: MessageFns<AzureBlobUpload> = {
  encode(message: AzureBlobUpload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accountName !== "") {
      writer.uint32(10).string(message.accountName);
    }
    if (message.accountKey !== "") {
      writer.uint32(18).string(message.accountKey);
    }
    if (message.containerName !== "") {
      writer.uint32(26).string(message.containerName);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AzureBlobUpload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAzureBlobUpload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accountName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.accountKey = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.containerName = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AzureBlobUpload {
    return {
      accountName: isSet(object.accountName) ? globalThis.String(object.accountName) : "",
      accountKey: isSet(object.accountKey) ? globalThis.String(object.accountKey) : "",
      containerName: isSet(object.containerName) ? globalThis.String(object.containerName) : "",
    };
  },

  toJSON(message: AzureBlobUpload): unknown {
    const obj: any = {};
    if (message.accountName !== "") {
      obj.accountName = message.accountName;
    }
    if (message.accountKey !== "") {
      obj.accountKey = message.accountKey;
    }
    if (message.containerName !== "") {
      obj.containerName = message.containerName;
    }
    return obj;
  },

  create(base?: DeepPartial<AzureBlobUpload>): AzureBlobUpload {
    return AzureBlobUpload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AzureBlobUpload>): AzureBlobUpload {
    const message = createBaseAzureBlobUpload();
    message.accountName = object.accountName ?? "";
    message.accountKey = object.accountKey ?? "";
    message.containerName = object.containerName ?? "";
    return message;
  },
};

function createBaseAliOSSUpload(): AliOSSUpload {
  return { accessKey: "", secret: "", region: "", endpoint: "", bucket: "" };
}

export const AliOSSUpload: MessageFns<AliOSSUpload> = {
  encode(message: AliOSSUpload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.accessKey !== "") {
      writer.uint32(10).string(message.accessKey);
    }
    if (message.secret !== "") {
      writer.uint32(18).string(message.secret);
    }
    if (message.region !== "") {
      writer.uint32(26).string(message.region);
    }
    if (message.endpoint !== "") {
      writer.uint32(34).string(message.endpoint);
    }
    if (message.bucket !== "") {
      writer.uint32(42).string(message.bucket);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AliOSSUpload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAliOSSUpload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.accessKey = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.secret = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.region = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.endpoint = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.bucket = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AliOSSUpload {
    return {
      accessKey: isSet(object.accessKey) ? globalThis.String(object.accessKey) : "",
      secret: isSet(object.secret) ? globalThis.String(object.secret) : "",
      region: isSet(object.region) ? globalThis.String(object.region) : "",
      endpoint: isSet(object.endpoint) ? globalThis.String(object.endpoint) : "",
      bucket: isSet(object.bucket) ? globalThis.String(object.bucket) : "",
    };
  },

  toJSON(message: AliOSSUpload): unknown {
    const obj: any = {};
    if (message.accessKey !== "") {
      obj.accessKey = message.accessKey;
    }
    if (message.secret !== "") {
      obj.secret = message.secret;
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    if (message.endpoint !== "") {
      obj.endpoint = message.endpoint;
    }
    if (message.bucket !== "") {
      obj.bucket = message.bucket;
    }
    return obj;
  },

  create(base?: DeepPartial<AliOSSUpload>): AliOSSUpload {
    return AliOSSUpload.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AliOSSUpload>): AliOSSUpload {
    const message = createBaseAliOSSUpload();
    message.accessKey = object.accessKey ?? "";
    message.secret = object.secret ?? "";
    message.region = object.region ?? "";
    message.endpoint = object.endpoint ?? "";
    message.bucket = object.bucket ?? "";
    return message;
  },
};

function createBaseProxyConfig(): ProxyConfig {
  return { url: "", username: "", password: "" };
}

export const ProxyConfig: MessageFns<ProxyConfig> = {
  encode(message: ProxyConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    if (message.username !== "") {
      writer.uint32(18).string(message.username);
    }
    if (message.password !== "") {
      writer.uint32(26).string(message.password);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ProxyConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseProxyConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.username = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.password = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ProxyConfig {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      username: isSet(object.username) ? globalThis.String(object.username) : "",
      password: isSet(object.password) ? globalThis.String(object.password) : "",
    };
  },

  toJSON(message: ProxyConfig): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.username !== "") {
      obj.username = message.username;
    }
    if (message.password !== "") {
      obj.password = message.password;
    }
    return obj;
  },

  create(base?: DeepPartial<ProxyConfig>): ProxyConfig {
    return ProxyConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ProxyConfig>): ProxyConfig {
    const message = createBaseProxyConfig();
    message.url = object.url ?? "";
    message.username = object.username ?? "";
    message.password = object.password ?? "";
    return message;
  },
};

function createBaseStreamOutput(): StreamOutput {
  return { protocol: 0, urls: [] };
}

export const StreamOutput: MessageFns<StreamOutput> = {
  encode(message: StreamOutput, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.protocol !== 0) {
      writer.uint32(8).int32(message.protocol);
    }
    for (const v of message.urls) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamOutput {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamOutput();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.protocol = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.urls.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamOutput {
    return {
      protocol: isSet(object.protocol) ? streamProtocolFromJSON(object.protocol) : 0,
      urls: globalThis.Array.isArray(object?.urls) ? object.urls.map((e: any) => globalThis.String(e)) : [],
    };
  },

  toJSON(message: StreamOutput): unknown {
    const obj: any = {};
    if (message.protocol !== 0) {
      obj.protocol = streamProtocolToJSON(message.protocol);
    }
    if (message.urls?.length) {
      obj.urls = message.urls;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamOutput>): StreamOutput {
    return StreamOutput.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamOutput>): StreamOutput {
    const message = createBaseStreamOutput();
    message.protocol = object.protocol ?? 0;
    message.urls = object.urls?.map((e) => e) || [];
    return message;
  },
};

function createBaseEncodingOptions(): EncodingOptions {
  return {
    width: 0,
    height: 0,
    depth: 0,
    framerate: 0,
    audioCodec: 0,
    audioBitrate: 0,
    audioQuality: 0,
    audioFrequency: 0,
    videoCodec: 0,
    videoBitrate: 0,
    videoQuality: 0,
    keyFrameInterval: 0,
  };
}

export const EncodingOptions: MessageFns<EncodingOptions> = {
  encode(message: EncodingOptions, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.width !== 0) {
      writer.uint32(8).int32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(16).int32(message.height);
    }
    if (message.depth !== 0) {
      writer.uint32(24).int32(message.depth);
    }
    if (message.framerate !== 0) {
      writer.uint32(32).int32(message.framerate);
    }
    if (message.audioCodec !== 0) {
      writer.uint32(40).int32(message.audioCodec);
    }
    if (message.audioBitrate !== 0) {
      writer.uint32(48).int32(message.audioBitrate);
    }
    if (message.audioQuality !== 0) {
      writer.uint32(88).int32(message.audioQuality);
    }
    if (message.audioFrequency !== 0) {
      writer.uint32(56).int32(message.audioFrequency);
    }
    if (message.videoCodec !== 0) {
      writer.uint32(64).int32(message.videoCodec);
    }
    if (message.videoBitrate !== 0) {
      writer.uint32(72).int32(message.videoBitrate);
    }
    if (message.videoQuality !== 0) {
      writer.uint32(96).int32(message.videoQuality);
    }
    if (message.keyFrameInterval !== 0) {
      writer.uint32(81).double(message.keyFrameInterval);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EncodingOptions {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEncodingOptions();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.width = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.height = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.depth = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.framerate = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.audioCodec = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.audioBitrate = reader.int32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.audioQuality = reader.int32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.audioFrequency = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.videoCodec = reader.int32() as any;
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.videoBitrate = reader.int32();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.videoQuality = reader.int32();
          continue;
        }
        case 10: {
          if (tag !== 81) {
            break;
          }

          message.keyFrameInterval = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EncodingOptions {
    return {
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      depth: isSet(object.depth) ? globalThis.Number(object.depth) : 0,
      framerate: isSet(object.framerate) ? globalThis.Number(object.framerate) : 0,
      audioCodec: isSet(object.audioCodec) ? audioCodecFromJSON(object.audioCodec) : 0,
      audioBitrate: isSet(object.audioBitrate) ? globalThis.Number(object.audioBitrate) : 0,
      audioQuality: isSet(object.audioQuality) ? globalThis.Number(object.audioQuality) : 0,
      audioFrequency: isSet(object.audioFrequency) ? globalThis.Number(object.audioFrequency) : 0,
      videoCodec: isSet(object.videoCodec) ? videoCodecFromJSON(object.videoCodec) : 0,
      videoBitrate: isSet(object.videoBitrate) ? globalThis.Number(object.videoBitrate) : 0,
      videoQuality: isSet(object.videoQuality) ? globalThis.Number(object.videoQuality) : 0,
      keyFrameInterval: isSet(object.keyFrameInterval) ? globalThis.Number(object.keyFrameInterval) : 0,
    };
  },

  toJSON(message: EncodingOptions): unknown {
    const obj: any = {};
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.depth !== 0) {
      obj.depth = Math.round(message.depth);
    }
    if (message.framerate !== 0) {
      obj.framerate = Math.round(message.framerate);
    }
    if (message.audioCodec !== 0) {
      obj.audioCodec = audioCodecToJSON(message.audioCodec);
    }
    if (message.audioBitrate !== 0) {
      obj.audioBitrate = Math.round(message.audioBitrate);
    }
    if (message.audioQuality !== 0) {
      obj.audioQuality = Math.round(message.audioQuality);
    }
    if (message.audioFrequency !== 0) {
      obj.audioFrequency = Math.round(message.audioFrequency);
    }
    if (message.videoCodec !== 0) {
      obj.videoCodec = videoCodecToJSON(message.videoCodec);
    }
    if (message.videoBitrate !== 0) {
      obj.videoBitrate = Math.round(message.videoBitrate);
    }
    if (message.videoQuality !== 0) {
      obj.videoQuality = Math.round(message.videoQuality);
    }
    if (message.keyFrameInterval !== 0) {
      obj.keyFrameInterval = message.keyFrameInterval;
    }
    return obj;
  },

  create(base?: DeepPartial<EncodingOptions>): EncodingOptions {
    return EncodingOptions.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EncodingOptions>): EncodingOptions {
    const message = createBaseEncodingOptions();
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    message.depth = object.depth ?? 0;
    message.framerate = object.framerate ?? 0;
    message.audioCodec = object.audioCodec ?? 0;
    message.audioBitrate = object.audioBitrate ?? 0;
    message.audioQuality = object.audioQuality ?? 0;
    message.audioFrequency = object.audioFrequency ?? 0;
    message.videoCodec = object.videoCodec ?? 0;
    message.videoBitrate = object.videoBitrate ?? 0;
    message.videoQuality = object.videoQuality ?? 0;
    message.keyFrameInterval = object.keyFrameInterval ?? 0;
    return message;
  },
};

function createBaseUpdateLayoutRequest(): UpdateLayoutRequest {
  return { egressId: "", layout: "" };
}

export const UpdateLayoutRequest: MessageFns<UpdateLayoutRequest> = {
  encode(message: UpdateLayoutRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.egressId !== "") {
      writer.uint32(10).string(message.egressId);
    }
    if (message.layout !== "") {
      writer.uint32(18).string(message.layout);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateLayoutRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateLayoutRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.egressId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.layout = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateLayoutRequest {
    return {
      egressId: isSet(object.egressId) ? globalThis.String(object.egressId) : "",
      layout: isSet(object.layout) ? globalThis.String(object.layout) : "",
    };
  },

  toJSON(message: UpdateLayoutRequest): unknown {
    const obj: any = {};
    if (message.egressId !== "") {
      obj.egressId = message.egressId;
    }
    if (message.layout !== "") {
      obj.layout = message.layout;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateLayoutRequest>): UpdateLayoutRequest {
    return UpdateLayoutRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateLayoutRequest>): UpdateLayoutRequest {
    const message = createBaseUpdateLayoutRequest();
    message.egressId = object.egressId ?? "";
    message.layout = object.layout ?? "";
    return message;
  },
};

function createBaseUpdateStreamRequest(): UpdateStreamRequest {
  return { egressId: "", addOutputUrls: [], removeOutputUrls: [] };
}

export const UpdateStreamRequest: MessageFns<UpdateStreamRequest> = {
  encode(message: UpdateStreamRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.egressId !== "") {
      writer.uint32(10).string(message.egressId);
    }
    for (const v of message.addOutputUrls) {
      writer.uint32(18).string(v!);
    }
    for (const v of message.removeOutputUrls) {
      writer.uint32(26).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateStreamRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateStreamRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.egressId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.addOutputUrls.push(reader.string());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.removeOutputUrls.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateStreamRequest {
    return {
      egressId: isSet(object.egressId) ? globalThis.String(object.egressId) : "",
      addOutputUrls: globalThis.Array.isArray(object?.addOutputUrls)
        ? object.addOutputUrls.map((e: any) => globalThis.String(e))
        : [],
      removeOutputUrls: globalThis.Array.isArray(object?.removeOutputUrls)
        ? object.removeOutputUrls.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: UpdateStreamRequest): unknown {
    const obj: any = {};
    if (message.egressId !== "") {
      obj.egressId = message.egressId;
    }
    if (message.addOutputUrls?.length) {
      obj.addOutputUrls = message.addOutputUrls;
    }
    if (message.removeOutputUrls?.length) {
      obj.removeOutputUrls = message.removeOutputUrls;
    }
    return obj;
  },

  create(base?: DeepPartial<UpdateStreamRequest>): UpdateStreamRequest {
    return UpdateStreamRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UpdateStreamRequest>): UpdateStreamRequest {
    const message = createBaseUpdateStreamRequest();
    message.egressId = object.egressId ?? "";
    message.addOutputUrls = object.addOutputUrls?.map((e) => e) || [];
    message.removeOutputUrls = object.removeOutputUrls?.map((e) => e) || [];
    return message;
  },
};

function createBaseListEgressRequest(): ListEgressRequest {
  return { roomName: "", egressId: "", active: false };
}

export const ListEgressRequest: MessageFns<ListEgressRequest> = {
  encode(message: ListEgressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.roomName !== "") {
      writer.uint32(10).string(message.roomName);
    }
    if (message.egressId !== "") {
      writer.uint32(18).string(message.egressId);
    }
    if (message.active !== false) {
      writer.uint32(24).bool(message.active);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEgressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEgressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.roomName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.egressId = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.active = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEgressRequest {
    return {
      roomName: isSet(object.roomName) ? globalThis.String(object.roomName) : "",
      egressId: isSet(object.egressId) ? globalThis.String(object.egressId) : "",
      active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
    };
  },

  toJSON(message: ListEgressRequest): unknown {
    const obj: any = {};
    if (message.roomName !== "") {
      obj.roomName = message.roomName;
    }
    if (message.egressId !== "") {
      obj.egressId = message.egressId;
    }
    if (message.active !== false) {
      obj.active = message.active;
    }
    return obj;
  },

  create(base?: DeepPartial<ListEgressRequest>): ListEgressRequest {
    return ListEgressRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEgressRequest>): ListEgressRequest {
    const message = createBaseListEgressRequest();
    message.roomName = object.roomName ?? "";
    message.egressId = object.egressId ?? "";
    message.active = object.active ?? false;
    return message;
  },
};

function createBaseListEgressResponse(): ListEgressResponse {
  return { items: [] };
}

export const ListEgressResponse: MessageFns<ListEgressResponse> = {
  encode(message: ListEgressResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.items) {
      EgressInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListEgressResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListEgressResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.items.push(EgressInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListEgressResponse {
    return {
      items: globalThis.Array.isArray(object?.items) ? object.items.map((e: any) => EgressInfo.fromJSON(e)) : [],
    };
  },

  toJSON(message: ListEgressResponse): unknown {
    const obj: any = {};
    if (message.items?.length) {
      obj.items = message.items.map((e) => EgressInfo.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ListEgressResponse>): ListEgressResponse {
    return ListEgressResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListEgressResponse>): ListEgressResponse {
    const message = createBaseListEgressResponse();
    message.items = object.items?.map((e) => EgressInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStopEgressRequest(): StopEgressRequest {
  return { egressId: "" };
}

export const StopEgressRequest: MessageFns<StopEgressRequest> = {
  encode(message: StopEgressRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.egressId !== "") {
      writer.uint32(10).string(message.egressId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StopEgressRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStopEgressRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.egressId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StopEgressRequest {
    return { egressId: isSet(object.egressId) ? globalThis.String(object.egressId) : "" };
  },

  toJSON(message: StopEgressRequest): unknown {
    const obj: any = {};
    if (message.egressId !== "") {
      obj.egressId = message.egressId;
    }
    return obj;
  },

  create(base?: DeepPartial<StopEgressRequest>): StopEgressRequest {
    return StopEgressRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StopEgressRequest>): StopEgressRequest {
    const message = createBaseStopEgressRequest();
    message.egressId = object.egressId ?? "";
    return message;
  },
};

function createBaseEgressInfo(): EgressInfo {
  return {
    egressId: "",
    roomId: "",
    roomName: "",
    sourceType: 0,
    status: 0,
    startedAt: "0",
    endedAt: "0",
    updatedAt: "0",
    details: "",
    error: "",
    errorCode: 0,
    request: undefined,
    result: undefined,
    streamResults: [],
    fileResults: [],
    segmentResults: [],
    imageResults: [],
    manifestLocation: "",
    backupStorageUsed: false,
  };
}

export const EgressInfo: MessageFns<EgressInfo> = {
  encode(message: EgressInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.egressId !== "") {
      writer.uint32(10).string(message.egressId);
    }
    if (message.roomId !== "") {
      writer.uint32(18).string(message.roomId);
    }
    if (message.roomName !== "") {
      writer.uint32(106).string(message.roomName);
    }
    if (message.sourceType !== 0) {
      writer.uint32(208).int32(message.sourceType);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    if (message.startedAt !== "0") {
      writer.uint32(80).int64(message.startedAt);
    }
    if (message.endedAt !== "0") {
      writer.uint32(88).int64(message.endedAt);
    }
    if (message.updatedAt !== "0") {
      writer.uint32(144).int64(message.updatedAt);
    }
    if (message.details !== "") {
      writer.uint32(170).string(message.details);
    }
    if (message.error !== "") {
      writer.uint32(74).string(message.error);
    }
    if (message.errorCode !== 0) {
      writer.uint32(176).int32(message.errorCode);
    }
    switch (message.request?.$case) {
      case "roomComposite":
        RoomCompositeEgressRequest.encode(message.request.roomComposite, writer.uint32(34).fork()).join();
        break;
      case "web":
        WebEgressRequest.encode(message.request.web, writer.uint32(114).fork()).join();
        break;
      case "participant":
        ParticipantEgressRequest.encode(message.request.participant, writer.uint32(154).fork()).join();
        break;
      case "trackComposite":
        TrackCompositeEgressRequest.encode(message.request.trackComposite, writer.uint32(42).fork()).join();
        break;
      case "track":
        TrackEgressRequest.encode(message.request.track, writer.uint32(50).fork()).join();
        break;
    }
    switch (message.result?.$case) {
      case "stream":
        StreamInfoList.encode(message.result.stream, writer.uint32(58).fork()).join();
        break;
      case "file":
        FileInfo.encode(message.result.file, writer.uint32(66).fork()).join();
        break;
      case "segments":
        SegmentsInfo.encode(message.result.segments, writer.uint32(98).fork()).join();
        break;
    }
    for (const v of message.streamResults) {
      StreamInfo.encode(v!, writer.uint32(122).fork()).join();
    }
    for (const v of message.fileResults) {
      FileInfo.encode(v!, writer.uint32(130).fork()).join();
    }
    for (const v of message.segmentResults) {
      SegmentsInfo.encode(v!, writer.uint32(138).fork()).join();
    }
    for (const v of message.imageResults) {
      ImagesInfo.encode(v!, writer.uint32(162).fork()).join();
    }
    if (message.manifestLocation !== "") {
      writer.uint32(186).string(message.manifestLocation);
    }
    if (message.backupStorageUsed !== false) {
      writer.uint32(200).bool(message.backupStorageUsed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EgressInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEgressInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.egressId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.roomId = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.roomName = reader.string();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.sourceType = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.startedAt = reader.int64().toString();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.endedAt = reader.int64().toString();
          continue;
        }
        case 18: {
          if (tag !== 144) {
            break;
          }

          message.updatedAt = reader.int64().toString();
          continue;
        }
        case 21: {
          if (tag !== 170) {
            break;
          }

          message.details = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.error = reader.string();
          continue;
        }
        case 22: {
          if (tag !== 176) {
            break;
          }

          message.errorCode = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.request = {
            $case: "roomComposite",
            roomComposite: RoomCompositeEgressRequest.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.request = { $case: "web", web: WebEgressRequest.decode(reader, reader.uint32()) };
          continue;
        }
        case 19: {
          if (tag !== 154) {
            break;
          }

          message.request = {
            $case: "participant",
            participant: ParticipantEgressRequest.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.request = {
            $case: "trackComposite",
            trackComposite: TrackCompositeEgressRequest.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.request = { $case: "track", track: TrackEgressRequest.decode(reader, reader.uint32()) };
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.result = { $case: "stream", stream: StreamInfoList.decode(reader, reader.uint32()) };
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.result = { $case: "file", file: FileInfo.decode(reader, reader.uint32()) };
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.result = { $case: "segments", segments: SegmentsInfo.decode(reader, reader.uint32()) };
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.streamResults.push(StreamInfo.decode(reader, reader.uint32()));
          continue;
        }
        case 16: {
          if (tag !== 130) {
            break;
          }

          message.fileResults.push(FileInfo.decode(reader, reader.uint32()));
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.segmentResults.push(SegmentsInfo.decode(reader, reader.uint32()));
          continue;
        }
        case 20: {
          if (tag !== 162) {
            break;
          }

          message.imageResults.push(ImagesInfo.decode(reader, reader.uint32()));
          continue;
        }
        case 23: {
          if (tag !== 186) {
            break;
          }

          message.manifestLocation = reader.string();
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.backupStorageUsed = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EgressInfo {
    return {
      egressId: isSet(object.egressId) ? globalThis.String(object.egressId) : "",
      roomId: isSet(object.roomId) ? globalThis.String(object.roomId) : "",
      roomName: isSet(object.roomName) ? globalThis.String(object.roomName) : "",
      sourceType: isSet(object.sourceType) ? egressSourceTypeFromJSON(object.sourceType) : 0,
      status: isSet(object.status) ? egressStatusFromJSON(object.status) : 0,
      startedAt: isSet(object.startedAt) ? globalThis.String(object.startedAt) : "0",
      endedAt: isSet(object.endedAt) ? globalThis.String(object.endedAt) : "0",
      updatedAt: isSet(object.updatedAt) ? globalThis.String(object.updatedAt) : "0",
      details: isSet(object.details) ? globalThis.String(object.details) : "",
      error: isSet(object.error) ? globalThis.String(object.error) : "",
      errorCode: isSet(object.errorCode) ? globalThis.Number(object.errorCode) : 0,
      request: isSet(object.roomComposite)
        ? { $case: "roomComposite", roomComposite: RoomCompositeEgressRequest.fromJSON(object.roomComposite) }
        : isSet(object.web)
        ? { $case: "web", web: WebEgressRequest.fromJSON(object.web) }
        : isSet(object.participant)
        ? { $case: "participant", participant: ParticipantEgressRequest.fromJSON(object.participant) }
        : isSet(object.trackComposite)
        ? { $case: "trackComposite", trackComposite: TrackCompositeEgressRequest.fromJSON(object.trackComposite) }
        : isSet(object.track)
        ? { $case: "track", track: TrackEgressRequest.fromJSON(object.track) }
        : undefined,
      result: isSet(object.stream)
        ? { $case: "stream", stream: StreamInfoList.fromJSON(object.stream) }
        : isSet(object.file)
        ? { $case: "file", file: FileInfo.fromJSON(object.file) }
        : isSet(object.segments)
        ? { $case: "segments", segments: SegmentsInfo.fromJSON(object.segments) }
        : undefined,
      streamResults: globalThis.Array.isArray(object?.streamResults)
        ? object.streamResults.map((e: any) => StreamInfo.fromJSON(e))
        : [],
      fileResults: globalThis.Array.isArray(object?.fileResults)
        ? object.fileResults.map((e: any) => FileInfo.fromJSON(e))
        : [],
      segmentResults: globalThis.Array.isArray(object?.segmentResults)
        ? object.segmentResults.map((e: any) => SegmentsInfo.fromJSON(e))
        : [],
      imageResults: globalThis.Array.isArray(object?.imageResults)
        ? object.imageResults.map((e: any) => ImagesInfo.fromJSON(e))
        : [],
      manifestLocation: isSet(object.manifestLocation) ? globalThis.String(object.manifestLocation) : "",
      backupStorageUsed: isSet(object.backupStorageUsed) ? globalThis.Boolean(object.backupStorageUsed) : false,
    };
  },

  toJSON(message: EgressInfo): unknown {
    const obj: any = {};
    if (message.egressId !== "") {
      obj.egressId = message.egressId;
    }
    if (message.roomId !== "") {
      obj.roomId = message.roomId;
    }
    if (message.roomName !== "") {
      obj.roomName = message.roomName;
    }
    if (message.sourceType !== 0) {
      obj.sourceType = egressSourceTypeToJSON(message.sourceType);
    }
    if (message.status !== 0) {
      obj.status = egressStatusToJSON(message.status);
    }
    if (message.startedAt !== "0") {
      obj.startedAt = message.startedAt;
    }
    if (message.endedAt !== "0") {
      obj.endedAt = message.endedAt;
    }
    if (message.updatedAt !== "0") {
      obj.updatedAt = message.updatedAt;
    }
    if (message.details !== "") {
      obj.details = message.details;
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    if (message.errorCode !== 0) {
      obj.errorCode = Math.round(message.errorCode);
    }
    if (message.request?.$case === "roomComposite") {
      obj.roomComposite = RoomCompositeEgressRequest.toJSON(message.request.roomComposite);
    } else if (message.request?.$case === "web") {
      obj.web = WebEgressRequest.toJSON(message.request.web);
    } else if (message.request?.$case === "participant") {
      obj.participant = ParticipantEgressRequest.toJSON(message.request.participant);
    } else if (message.request?.$case === "trackComposite") {
      obj.trackComposite = TrackCompositeEgressRequest.toJSON(message.request.trackComposite);
    } else if (message.request?.$case === "track") {
      obj.track = TrackEgressRequest.toJSON(message.request.track);
    }
    if (message.result?.$case === "stream") {
      obj.stream = StreamInfoList.toJSON(message.result.stream);
    } else if (message.result?.$case === "file") {
      obj.file = FileInfo.toJSON(message.result.file);
    } else if (message.result?.$case === "segments") {
      obj.segments = SegmentsInfo.toJSON(message.result.segments);
    }
    if (message.streamResults?.length) {
      obj.streamResults = message.streamResults.map((e) => StreamInfo.toJSON(e));
    }
    if (message.fileResults?.length) {
      obj.fileResults = message.fileResults.map((e) => FileInfo.toJSON(e));
    }
    if (message.segmentResults?.length) {
      obj.segmentResults = message.segmentResults.map((e) => SegmentsInfo.toJSON(e));
    }
    if (message.imageResults?.length) {
      obj.imageResults = message.imageResults.map((e) => ImagesInfo.toJSON(e));
    }
    if (message.manifestLocation !== "") {
      obj.manifestLocation = message.manifestLocation;
    }
    if (message.backupStorageUsed !== false) {
      obj.backupStorageUsed = message.backupStorageUsed;
    }
    return obj;
  },

  create(base?: DeepPartial<EgressInfo>): EgressInfo {
    return EgressInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<EgressInfo>): EgressInfo {
    const message = createBaseEgressInfo();
    message.egressId = object.egressId ?? "";
    message.roomId = object.roomId ?? "";
    message.roomName = object.roomName ?? "";
    message.sourceType = object.sourceType ?? 0;
    message.status = object.status ?? 0;
    message.startedAt = object.startedAt ?? "0";
    message.endedAt = object.endedAt ?? "0";
    message.updatedAt = object.updatedAt ?? "0";
    message.details = object.details ?? "";
    message.error = object.error ?? "";
    message.errorCode = object.errorCode ?? 0;
    switch (object.request?.$case) {
      case "roomComposite": {
        if (object.request?.roomComposite !== undefined && object.request?.roomComposite !== null) {
          message.request = {
            $case: "roomComposite",
            roomComposite: RoomCompositeEgressRequest.fromPartial(object.request.roomComposite),
          };
        }
        break;
      }
      case "web": {
        if (object.request?.web !== undefined && object.request?.web !== null) {
          message.request = { $case: "web", web: WebEgressRequest.fromPartial(object.request.web) };
        }
        break;
      }
      case "participant": {
        if (object.request?.participant !== undefined && object.request?.participant !== null) {
          message.request = {
            $case: "participant",
            participant: ParticipantEgressRequest.fromPartial(object.request.participant),
          };
        }
        break;
      }
      case "trackComposite": {
        if (object.request?.trackComposite !== undefined && object.request?.trackComposite !== null) {
          message.request = {
            $case: "trackComposite",
            trackComposite: TrackCompositeEgressRequest.fromPartial(object.request.trackComposite),
          };
        }
        break;
      }
      case "track": {
        if (object.request?.track !== undefined && object.request?.track !== null) {
          message.request = { $case: "track", track: TrackEgressRequest.fromPartial(object.request.track) };
        }
        break;
      }
    }
    switch (object.result?.$case) {
      case "stream": {
        if (object.result?.stream !== undefined && object.result?.stream !== null) {
          message.result = { $case: "stream", stream: StreamInfoList.fromPartial(object.result.stream) };
        }
        break;
      }
      case "file": {
        if (object.result?.file !== undefined && object.result?.file !== null) {
          message.result = { $case: "file", file: FileInfo.fromPartial(object.result.file) };
        }
        break;
      }
      case "segments": {
        if (object.result?.segments !== undefined && object.result?.segments !== null) {
          message.result = { $case: "segments", segments: SegmentsInfo.fromPartial(object.result.segments) };
        }
        break;
      }
    }
    message.streamResults = object.streamResults?.map((e) => StreamInfo.fromPartial(e)) || [];
    message.fileResults = object.fileResults?.map((e) => FileInfo.fromPartial(e)) || [];
    message.segmentResults = object.segmentResults?.map((e) => SegmentsInfo.fromPartial(e)) || [];
    message.imageResults = object.imageResults?.map((e) => ImagesInfo.fromPartial(e)) || [];
    message.manifestLocation = object.manifestLocation ?? "";
    message.backupStorageUsed = object.backupStorageUsed ?? false;
    return message;
  },
};

function createBaseStreamInfoList(): StreamInfoList {
  return { info: [] };
}

export const StreamInfoList: MessageFns<StreamInfoList> = {
  encode(message: StreamInfoList, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.info) {
      StreamInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamInfoList {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamInfoList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.info.push(StreamInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamInfoList {
    return { info: globalThis.Array.isArray(object?.info) ? object.info.map((e: any) => StreamInfo.fromJSON(e)) : [] };
  },

  toJSON(message: StreamInfoList): unknown {
    const obj: any = {};
    if (message.info?.length) {
      obj.info = message.info.map((e) => StreamInfo.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<StreamInfoList>): StreamInfoList {
    return StreamInfoList.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamInfoList>): StreamInfoList {
    const message = createBaseStreamInfoList();
    message.info = object.info?.map((e) => StreamInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseStreamInfo(): StreamInfo {
  return { url: "", startedAt: "0", endedAt: "0", duration: "0", status: 0, error: "" };
}

export const StreamInfo: MessageFns<StreamInfo> = {
  encode(message: StreamInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    if (message.startedAt !== "0") {
      writer.uint32(16).int64(message.startedAt);
    }
    if (message.endedAt !== "0") {
      writer.uint32(24).int64(message.endedAt);
    }
    if (message.duration !== "0") {
      writer.uint32(32).int64(message.duration);
    }
    if (message.status !== 0) {
      writer.uint32(40).int32(message.status);
    }
    if (message.error !== "") {
      writer.uint32(50).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): StreamInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseStreamInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.startedAt = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.endedAt = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.duration = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): StreamInfo {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      startedAt: isSet(object.startedAt) ? globalThis.String(object.startedAt) : "0",
      endedAt: isSet(object.endedAt) ? globalThis.String(object.endedAt) : "0",
      duration: isSet(object.duration) ? globalThis.String(object.duration) : "0",
      status: isSet(object.status) ? streamInfo_StatusFromJSON(object.status) : 0,
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: StreamInfo): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.startedAt !== "0") {
      obj.startedAt = message.startedAt;
    }
    if (message.endedAt !== "0") {
      obj.endedAt = message.endedAt;
    }
    if (message.duration !== "0") {
      obj.duration = message.duration;
    }
    if (message.status !== 0) {
      obj.status = streamInfo_StatusToJSON(message.status);
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create(base?: DeepPartial<StreamInfo>): StreamInfo {
    return StreamInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<StreamInfo>): StreamInfo {
    const message = createBaseStreamInfo();
    message.url = object.url ?? "";
    message.startedAt = object.startedAt ?? "0";
    message.endedAt = object.endedAt ?? "0";
    message.duration = object.duration ?? "0";
    message.status = object.status ?? 0;
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseFileInfo(): FileInfo {
  return { filename: "", startedAt: "0", endedAt: "0", duration: "0", size: "0", location: "" };
}

export const FileInfo: MessageFns<FileInfo> = {
  encode(message: FileInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filename !== "") {
      writer.uint32(10).string(message.filename);
    }
    if (message.startedAt !== "0") {
      writer.uint32(16).int64(message.startedAt);
    }
    if (message.endedAt !== "0") {
      writer.uint32(24).int64(message.endedAt);
    }
    if (message.duration !== "0") {
      writer.uint32(48).int64(message.duration);
    }
    if (message.size !== "0") {
      writer.uint32(32).int64(message.size);
    }
    if (message.location !== "") {
      writer.uint32(42).string(message.location);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): FileInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseFileInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filename = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.startedAt = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.endedAt = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.duration = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.size = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.location = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): FileInfo {
    return {
      filename: isSet(object.filename) ? globalThis.String(object.filename) : "",
      startedAt: isSet(object.startedAt) ? globalThis.String(object.startedAt) : "0",
      endedAt: isSet(object.endedAt) ? globalThis.String(object.endedAt) : "0",
      duration: isSet(object.duration) ? globalThis.String(object.duration) : "0",
      size: isSet(object.size) ? globalThis.String(object.size) : "0",
      location: isSet(object.location) ? globalThis.String(object.location) : "",
    };
  },

  toJSON(message: FileInfo): unknown {
    const obj: any = {};
    if (message.filename !== "") {
      obj.filename = message.filename;
    }
    if (message.startedAt !== "0") {
      obj.startedAt = message.startedAt;
    }
    if (message.endedAt !== "0") {
      obj.endedAt = message.endedAt;
    }
    if (message.duration !== "0") {
      obj.duration = message.duration;
    }
    if (message.size !== "0") {
      obj.size = message.size;
    }
    if (message.location !== "") {
      obj.location = message.location;
    }
    return obj;
  },

  create(base?: DeepPartial<FileInfo>): FileInfo {
    return FileInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<FileInfo>): FileInfo {
    const message = createBaseFileInfo();
    message.filename = object.filename ?? "";
    message.startedAt = object.startedAt ?? "0";
    message.endedAt = object.endedAt ?? "0";
    message.duration = object.duration ?? "0";
    message.size = object.size ?? "0";
    message.location = object.location ?? "";
    return message;
  },
};

function createBaseSegmentsInfo(): SegmentsInfo {
  return {
    playlistName: "",
    livePlaylistName: "",
    duration: "0",
    size: "0",
    playlistLocation: "",
    livePlaylistLocation: "",
    segmentCount: "0",
    startedAt: "0",
    endedAt: "0",
  };
}

export const SegmentsInfo: MessageFns<SegmentsInfo> = {
  encode(message: SegmentsInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.playlistName !== "") {
      writer.uint32(10).string(message.playlistName);
    }
    if (message.livePlaylistName !== "") {
      writer.uint32(66).string(message.livePlaylistName);
    }
    if (message.duration !== "0") {
      writer.uint32(16).int64(message.duration);
    }
    if (message.size !== "0") {
      writer.uint32(24).int64(message.size);
    }
    if (message.playlistLocation !== "") {
      writer.uint32(34).string(message.playlistLocation);
    }
    if (message.livePlaylistLocation !== "") {
      writer.uint32(74).string(message.livePlaylistLocation);
    }
    if (message.segmentCount !== "0") {
      writer.uint32(40).int64(message.segmentCount);
    }
    if (message.startedAt !== "0") {
      writer.uint32(48).int64(message.startedAt);
    }
    if (message.endedAt !== "0") {
      writer.uint32(56).int64(message.endedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SegmentsInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSegmentsInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.playlistName = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.livePlaylistName = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.duration = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.size = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.playlistLocation = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.livePlaylistLocation = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.segmentCount = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.startedAt = reader.int64().toString();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.endedAt = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SegmentsInfo {
    return {
      playlistName: isSet(object.playlistName) ? globalThis.String(object.playlistName) : "",
      livePlaylistName: isSet(object.livePlaylistName) ? globalThis.String(object.livePlaylistName) : "",
      duration: isSet(object.duration) ? globalThis.String(object.duration) : "0",
      size: isSet(object.size) ? globalThis.String(object.size) : "0",
      playlistLocation: isSet(object.playlistLocation) ? globalThis.String(object.playlistLocation) : "",
      livePlaylistLocation: isSet(object.livePlaylistLocation) ? globalThis.String(object.livePlaylistLocation) : "",
      segmentCount: isSet(object.segmentCount) ? globalThis.String(object.segmentCount) : "0",
      startedAt: isSet(object.startedAt) ? globalThis.String(object.startedAt) : "0",
      endedAt: isSet(object.endedAt) ? globalThis.String(object.endedAt) : "0",
    };
  },

  toJSON(message: SegmentsInfo): unknown {
    const obj: any = {};
    if (message.playlistName !== "") {
      obj.playlistName = message.playlistName;
    }
    if (message.livePlaylistName !== "") {
      obj.livePlaylistName = message.livePlaylistName;
    }
    if (message.duration !== "0") {
      obj.duration = message.duration;
    }
    if (message.size !== "0") {
      obj.size = message.size;
    }
    if (message.playlistLocation !== "") {
      obj.playlistLocation = message.playlistLocation;
    }
    if (message.livePlaylistLocation !== "") {
      obj.livePlaylistLocation = message.livePlaylistLocation;
    }
    if (message.segmentCount !== "0") {
      obj.segmentCount = message.segmentCount;
    }
    if (message.startedAt !== "0") {
      obj.startedAt = message.startedAt;
    }
    if (message.endedAt !== "0") {
      obj.endedAt = message.endedAt;
    }
    return obj;
  },

  create(base?: DeepPartial<SegmentsInfo>): SegmentsInfo {
    return SegmentsInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SegmentsInfo>): SegmentsInfo {
    const message = createBaseSegmentsInfo();
    message.playlistName = object.playlistName ?? "";
    message.livePlaylistName = object.livePlaylistName ?? "";
    message.duration = object.duration ?? "0";
    message.size = object.size ?? "0";
    message.playlistLocation = object.playlistLocation ?? "";
    message.livePlaylistLocation = object.livePlaylistLocation ?? "";
    message.segmentCount = object.segmentCount ?? "0";
    message.startedAt = object.startedAt ?? "0";
    message.endedAt = object.endedAt ?? "0";
    return message;
  },
};

function createBaseImagesInfo(): ImagesInfo {
  return { filenamePrefix: "", imageCount: "0", startedAt: "0", endedAt: "0" };
}

export const ImagesInfo: MessageFns<ImagesInfo> = {
  encode(message: ImagesInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filenamePrefix !== "") {
      writer.uint32(34).string(message.filenamePrefix);
    }
    if (message.imageCount !== "0") {
      writer.uint32(8).int64(message.imageCount);
    }
    if (message.startedAt !== "0") {
      writer.uint32(16).int64(message.startedAt);
    }
    if (message.endedAt !== "0") {
      writer.uint32(24).int64(message.endedAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ImagesInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseImagesInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.filenamePrefix = reader.string();
          continue;
        }
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.imageCount = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.startedAt = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.endedAt = reader.int64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ImagesInfo {
    return {
      filenamePrefix: isSet(object.filenamePrefix) ? globalThis.String(object.filenamePrefix) : "",
      imageCount: isSet(object.imageCount) ? globalThis.String(object.imageCount) : "0",
      startedAt: isSet(object.startedAt) ? globalThis.String(object.startedAt) : "0",
      endedAt: isSet(object.endedAt) ? globalThis.String(object.endedAt) : "0",
    };
  },

  toJSON(message: ImagesInfo): unknown {
    const obj: any = {};
    if (message.filenamePrefix !== "") {
      obj.filenamePrefix = message.filenamePrefix;
    }
    if (message.imageCount !== "0") {
      obj.imageCount = message.imageCount;
    }
    if (message.startedAt !== "0") {
      obj.startedAt = message.startedAt;
    }
    if (message.endedAt !== "0") {
      obj.endedAt = message.endedAt;
    }
    return obj;
  },

  create(base?: DeepPartial<ImagesInfo>): ImagesInfo {
    return ImagesInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ImagesInfo>): ImagesInfo {
    const message = createBaseImagesInfo();
    message.filenamePrefix = object.filenamePrefix ?? "";
    message.imageCount = object.imageCount ?? "0";
    message.startedAt = object.startedAt ?? "0";
    message.endedAt = object.endedAt ?? "0";
    return message;
  },
};

function createBaseAutoParticipantEgress(): AutoParticipantEgress {
  return { options: undefined, fileOutputs: [], segmentOutputs: [] };
}

export const AutoParticipantEgress: MessageFns<AutoParticipantEgress> = {
  encode(message: AutoParticipantEgress, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    switch (message.options?.$case) {
      case "preset":
        writer.uint32(8).int32(message.options.preset);
        break;
      case "advanced":
        EncodingOptions.encode(message.options.advanced, writer.uint32(18).fork()).join();
        break;
    }
    for (const v of message.fileOutputs) {
      EncodedFileOutput.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.segmentOutputs) {
      SegmentedFileOutput.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutoParticipantEgress {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutoParticipantEgress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.options = { $case: "preset", preset: reader.int32() as any };
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.options = { $case: "advanced", advanced: EncodingOptions.decode(reader, reader.uint32()) };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.fileOutputs.push(EncodedFileOutput.decode(reader, reader.uint32()));
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.segmentOutputs.push(SegmentedFileOutput.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutoParticipantEgress {
    return {
      options: isSet(object.preset)
        ? { $case: "preset", preset: encodingOptionsPresetFromJSON(object.preset) }
        : isSet(object.advanced)
        ? { $case: "advanced", advanced: EncodingOptions.fromJSON(object.advanced) }
        : undefined,
      fileOutputs: globalThis.Array.isArray(object?.fileOutputs)
        ? object.fileOutputs.map((e: any) => EncodedFileOutput.fromJSON(e))
        : [],
      segmentOutputs: globalThis.Array.isArray(object?.segmentOutputs)
        ? object.segmentOutputs.map((e: any) => SegmentedFileOutput.fromJSON(e))
        : [],
    };
  },

  toJSON(message: AutoParticipantEgress): unknown {
    const obj: any = {};
    if (message.options?.$case === "preset") {
      obj.preset = encodingOptionsPresetToJSON(message.options.preset);
    } else if (message.options?.$case === "advanced") {
      obj.advanced = EncodingOptions.toJSON(message.options.advanced);
    }
    if (message.fileOutputs?.length) {
      obj.fileOutputs = message.fileOutputs.map((e) => EncodedFileOutput.toJSON(e));
    }
    if (message.segmentOutputs?.length) {
      obj.segmentOutputs = message.segmentOutputs.map((e) => SegmentedFileOutput.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<AutoParticipantEgress>): AutoParticipantEgress {
    return AutoParticipantEgress.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AutoParticipantEgress>): AutoParticipantEgress {
    const message = createBaseAutoParticipantEgress();
    switch (object.options?.$case) {
      case "preset": {
        if (object.options?.preset !== undefined && object.options?.preset !== null) {
          message.options = { $case: "preset", preset: object.options.preset };
        }
        break;
      }
      case "advanced": {
        if (object.options?.advanced !== undefined && object.options?.advanced !== null) {
          message.options = { $case: "advanced", advanced: EncodingOptions.fromPartial(object.options.advanced) };
        }
        break;
      }
    }
    message.fileOutputs = object.fileOutputs?.map((e) => EncodedFileOutput.fromPartial(e)) || [];
    message.segmentOutputs = object.segmentOutputs?.map((e) => SegmentedFileOutput.fromPartial(e)) || [];
    return message;
  },
};

function createBaseAutoTrackEgress(): AutoTrackEgress {
  return { filepath: "", disableManifest: false, output: undefined };
}

export const AutoTrackEgress: MessageFns<AutoTrackEgress> = {
  encode(message: AutoTrackEgress, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.filepath !== "") {
      writer.uint32(10).string(message.filepath);
    }
    if (message.disableManifest !== false) {
      writer.uint32(40).bool(message.disableManifest);
    }
    switch (message.output?.$case) {
      case "s3":
        S3Upload.encode(message.output.s3, writer.uint32(18).fork()).join();
        break;
      case "gcp":
        GCPUpload.encode(message.output.gcp, writer.uint32(26).fork()).join();
        break;
      case "azure":
        AzureBlobUpload.encode(message.output.azure, writer.uint32(34).fork()).join();
        break;
      case "aliOSS":
        AliOSSUpload.encode(message.output.aliOSS, writer.uint32(50).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): AutoTrackEgress {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseAutoTrackEgress();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.filepath = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.disableManifest = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.output = { $case: "s3", s3: S3Upload.decode(reader, reader.uint32()) };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.output = { $case: "gcp", gcp: GCPUpload.decode(reader, reader.uint32()) };
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.output = { $case: "azure", azure: AzureBlobUpload.decode(reader, reader.uint32()) };
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.output = { $case: "aliOSS", aliOSS: AliOSSUpload.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): AutoTrackEgress {
    return {
      filepath: isSet(object.filepath) ? globalThis.String(object.filepath) : "",
      disableManifest: isSet(object.disableManifest) ? globalThis.Boolean(object.disableManifest) : false,
      output: isSet(object.s3)
        ? { $case: "s3", s3: S3Upload.fromJSON(object.s3) }
        : isSet(object.gcp)
        ? { $case: "gcp", gcp: GCPUpload.fromJSON(object.gcp) }
        : isSet(object.azure)
        ? { $case: "azure", azure: AzureBlobUpload.fromJSON(object.azure) }
        : isSet(object.aliOSS)
        ? { $case: "aliOSS", aliOSS: AliOSSUpload.fromJSON(object.aliOSS) }
        : undefined,
    };
  },

  toJSON(message: AutoTrackEgress): unknown {
    const obj: any = {};
    if (message.filepath !== "") {
      obj.filepath = message.filepath;
    }
    if (message.disableManifest !== false) {
      obj.disableManifest = message.disableManifest;
    }
    if (message.output?.$case === "s3") {
      obj.s3 = S3Upload.toJSON(message.output.s3);
    } else if (message.output?.$case === "gcp") {
      obj.gcp = GCPUpload.toJSON(message.output.gcp);
    } else if (message.output?.$case === "azure") {
      obj.azure = AzureBlobUpload.toJSON(message.output.azure);
    } else if (message.output?.$case === "aliOSS") {
      obj.aliOSS = AliOSSUpload.toJSON(message.output.aliOSS);
    }
    return obj;
  },

  create(base?: DeepPartial<AutoTrackEgress>): AutoTrackEgress {
    return AutoTrackEgress.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<AutoTrackEgress>): AutoTrackEgress {
    const message = createBaseAutoTrackEgress();
    message.filepath = object.filepath ?? "";
    message.disableManifest = object.disableManifest ?? false;
    switch (object.output?.$case) {
      case "s3": {
        if (object.output?.s3 !== undefined && object.output?.s3 !== null) {
          message.output = { $case: "s3", s3: S3Upload.fromPartial(object.output.s3) };
        }
        break;
      }
      case "gcp": {
        if (object.output?.gcp !== undefined && object.output?.gcp !== null) {
          message.output = { $case: "gcp", gcp: GCPUpload.fromPartial(object.output.gcp) };
        }
        break;
      }
      case "azure": {
        if (object.output?.azure !== undefined && object.output?.azure !== null) {
          message.output = { $case: "azure", azure: AzureBlobUpload.fromPartial(object.output.azure) };
        }
        break;
      }
      case "aliOSS": {
        if (object.output?.aliOSS !== undefined && object.output?.aliOSS !== null) {
          message.output = { $case: "aliOSS", aliOSS: AliOSSUpload.fromPartial(object.output.aliOSS) };
        }
        break;
      }
    }
    return message;
  },
};

export type EgressDefinition = typeof EgressDefinition;
export const EgressDefinition = {
  name: "Egress",
  fullName: "livekit.Egress",
  methods: {
    /** start recording or streaming a room, participant, or tracks */
    startRoomCompositeEgress: {
      name: "StartRoomCompositeEgress",
      requestType: RoomCompositeEgressRequest,
      requestStream: false,
      responseType: EgressInfo,
      responseStream: false,
      options: {},
    },
    startWebEgress: {
      name: "StartWebEgress",
      requestType: WebEgressRequest,
      requestStream: false,
      responseType: EgressInfo,
      responseStream: false,
      options: {},
    },
    startParticipantEgress: {
      name: "StartParticipantEgress",
      requestType: ParticipantEgressRequest,
      requestStream: false,
      responseType: EgressInfo,
      responseStream: false,
      options: {},
    },
    startTrackCompositeEgress: {
      name: "StartTrackCompositeEgress",
      requestType: TrackCompositeEgressRequest,
      requestStream: false,
      responseType: EgressInfo,
      responseStream: false,
      options: {},
    },
    startTrackEgress: {
      name: "StartTrackEgress",
      requestType: TrackEgressRequest,
      requestStream: false,
      responseType: EgressInfo,
      responseStream: false,
      options: {},
    },
    /** update web composite layout */
    updateLayout: {
      name: "UpdateLayout",
      requestType: UpdateLayoutRequest,
      requestStream: false,
      responseType: EgressInfo,
      responseStream: false,
      options: {},
    },
    /** add or remove stream endpoints */
    updateStream: {
      name: "UpdateStream",
      requestType: UpdateStreamRequest,
      requestStream: false,
      responseType: EgressInfo,
      responseStream: false,
      options: {},
    },
    /** list available egress */
    listEgress: {
      name: "ListEgress",
      requestType: ListEgressRequest,
      requestStream: false,
      responseType: ListEgressResponse,
      responseStream: false,
      options: {},
    },
    /** stop a recording or stream */
    stopEgress: {
      name: "StopEgress",
      requestType: StopEgressRequest,
      requestStream: false,
      responseType: EgressInfo,
      responseStream: false,
      options: {},
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
