// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.28.3
// source: livekit_models.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Timestamp } from "./google/protobuf/timestamp";
import { MetricsBatch } from "./livekit_metrics";

export const protobufPackage = "livekit";

export enum AudioCodec {
  DEFAULT_AC = 0,
  OPUS = 1,
  AAC = 2,
  UNRECOGNIZED = -1,
}

export function audioCodecFromJSON(object: any): AudioCodec {
  switch (object) {
    case 0:
    case "DEFAULT_AC":
      return AudioCodec.DEFAULT_AC;
    case 1:
    case "OPUS":
      return AudioCodec.OPUS;
    case 2:
    case "AAC":
      return AudioCodec.AAC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AudioCodec.UNRECOGNIZED;
  }
}

export function audioCodecToJSON(object: AudioCodec): string {
  switch (object) {
    case AudioCodec.DEFAULT_AC:
      return "DEFAULT_AC";
    case AudioCodec.OPUS:
      return "OPUS";
    case AudioCodec.AAC:
      return "AAC";
    case AudioCodec.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum VideoCodec {
  DEFAULT_VC = 0,
  H264_BASELINE = 1,
  H264_MAIN = 2,
  H264_HIGH = 3,
  VP8 = 4,
  UNRECOGNIZED = -1,
}

export function videoCodecFromJSON(object: any): VideoCodec {
  switch (object) {
    case 0:
    case "DEFAULT_VC":
      return VideoCodec.DEFAULT_VC;
    case 1:
    case "H264_BASELINE":
      return VideoCodec.H264_BASELINE;
    case 2:
    case "H264_MAIN":
      return VideoCodec.H264_MAIN;
    case 3:
    case "H264_HIGH":
      return VideoCodec.H264_HIGH;
    case 4:
    case "VP8":
      return VideoCodec.VP8;
    case -1:
    case "UNRECOGNIZED":
    default:
      return VideoCodec.UNRECOGNIZED;
  }
}

export function videoCodecToJSON(object: VideoCodec): string {
  switch (object) {
    case VideoCodec.DEFAULT_VC:
      return "DEFAULT_VC";
    case VideoCodec.H264_BASELINE:
      return "H264_BASELINE";
    case VideoCodec.H264_MAIN:
      return "H264_MAIN";
    case VideoCodec.H264_HIGH:
      return "H264_HIGH";
    case VideoCodec.VP8:
      return "VP8";
    case VideoCodec.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ImageCodec {
  IC_DEFAULT = 0,
  IC_JPEG = 1,
  UNRECOGNIZED = -1,
}

export function imageCodecFromJSON(object: any): ImageCodec {
  switch (object) {
    case 0:
    case "IC_DEFAULT":
      return ImageCodec.IC_DEFAULT;
    case 1:
    case "IC_JPEG":
      return ImageCodec.IC_JPEG;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ImageCodec.UNRECOGNIZED;
  }
}

export function imageCodecToJSON(object: ImageCodec): string {
  switch (object) {
    case ImageCodec.IC_DEFAULT:
      return "IC_DEFAULT";
    case ImageCodec.IC_JPEG:
      return "IC_JPEG";
    case ImageCodec.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Policy for publisher to handle subscribers that are unable to support the primary codec of a track */
export enum BackupCodecPolicy {
  /**
   * PREFER_REGRESSION - default behavior, the track prefer to regress to backup codec and all subscribers will receive the backup codec,
   * the sfu will try to regress codec if possible but not assured.
   */
  PREFER_REGRESSION = 0,
  /** SIMULCAST - encoding/send the primary and backup codec simultaneously */
  SIMULCAST = 1,
  /** REGRESSION - force the track to regress to backup codec, this option can be used in video conference or the publisher has limited bandwidth/encoding power */
  REGRESSION = 2,
  UNRECOGNIZED = -1,
}

export function backupCodecPolicyFromJSON(object: any): BackupCodecPolicy {
  switch (object) {
    case 0:
    case "PREFER_REGRESSION":
      return BackupCodecPolicy.PREFER_REGRESSION;
    case 1:
    case "SIMULCAST":
      return BackupCodecPolicy.SIMULCAST;
    case 2:
    case "REGRESSION":
      return BackupCodecPolicy.REGRESSION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BackupCodecPolicy.UNRECOGNIZED;
  }
}

export function backupCodecPolicyToJSON(object: BackupCodecPolicy): string {
  switch (object) {
    case BackupCodecPolicy.PREFER_REGRESSION:
      return "PREFER_REGRESSION";
    case BackupCodecPolicy.SIMULCAST:
      return "SIMULCAST";
    case BackupCodecPolicy.REGRESSION:
      return "REGRESSION";
    case BackupCodecPolicy.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum TrackType {
  AUDIO = 0,
  VIDEO = 1,
  DATA = 2,
  UNRECOGNIZED = -1,
}

export function trackTypeFromJSON(object: any): TrackType {
  switch (object) {
    case 0:
    case "AUDIO":
      return TrackType.AUDIO;
    case 1:
    case "VIDEO":
      return TrackType.VIDEO;
    case 2:
    case "DATA":
      return TrackType.DATA;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TrackType.UNRECOGNIZED;
  }
}

export function trackTypeToJSON(object: TrackType): string {
  switch (object) {
    case TrackType.AUDIO:
      return "AUDIO";
    case TrackType.VIDEO:
      return "VIDEO";
    case TrackType.DATA:
      return "DATA";
    case TrackType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum TrackSource {
  UNKNOWN = 0,
  CAMERA = 1,
  MICROPHONE = 2,
  SCREEN_SHARE = 3,
  SCREEN_SHARE_AUDIO = 4,
  UNRECOGNIZED = -1,
}

export function trackSourceFromJSON(object: any): TrackSource {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return TrackSource.UNKNOWN;
    case 1:
    case "CAMERA":
      return TrackSource.CAMERA;
    case 2:
    case "MICROPHONE":
      return TrackSource.MICROPHONE;
    case 3:
    case "SCREEN_SHARE":
      return TrackSource.SCREEN_SHARE;
    case 4:
    case "SCREEN_SHARE_AUDIO":
      return TrackSource.SCREEN_SHARE_AUDIO;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TrackSource.UNRECOGNIZED;
  }
}

export function trackSourceToJSON(object: TrackSource): string {
  switch (object) {
    case TrackSource.UNKNOWN:
      return "UNKNOWN";
    case TrackSource.CAMERA:
      return "CAMERA";
    case TrackSource.MICROPHONE:
      return "MICROPHONE";
    case TrackSource.SCREEN_SHARE:
      return "SCREEN_SHARE";
    case TrackSource.SCREEN_SHARE_AUDIO:
      return "SCREEN_SHARE_AUDIO";
    case TrackSource.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum VideoQuality {
  LOW = 0,
  MEDIUM = 1,
  HIGH = 2,
  OFF = 3,
  UNRECOGNIZED = -1,
}

export function videoQualityFromJSON(object: any): VideoQuality {
  switch (object) {
    case 0:
    case "LOW":
      return VideoQuality.LOW;
    case 1:
    case "MEDIUM":
      return VideoQuality.MEDIUM;
    case 2:
    case "HIGH":
      return VideoQuality.HIGH;
    case 3:
    case "OFF":
      return VideoQuality.OFF;
    case -1:
    case "UNRECOGNIZED":
    default:
      return VideoQuality.UNRECOGNIZED;
  }
}

export function videoQualityToJSON(object: VideoQuality): string {
  switch (object) {
    case VideoQuality.LOW:
      return "LOW";
    case VideoQuality.MEDIUM:
      return "MEDIUM";
    case VideoQuality.HIGH:
      return "HIGH";
    case VideoQuality.OFF:
      return "OFF";
    case VideoQuality.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ConnectionQuality {
  POOR = 0,
  GOOD = 1,
  EXCELLENT = 2,
  LOST = 3,
  UNRECOGNIZED = -1,
}

export function connectionQualityFromJSON(object: any): ConnectionQuality {
  switch (object) {
    case 0:
    case "POOR":
      return ConnectionQuality.POOR;
    case 1:
    case "GOOD":
      return ConnectionQuality.GOOD;
    case 2:
    case "EXCELLENT":
      return ConnectionQuality.EXCELLENT;
    case 3:
    case "LOST":
      return ConnectionQuality.LOST;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ConnectionQuality.UNRECOGNIZED;
  }
}

export function connectionQualityToJSON(object: ConnectionQuality): string {
  switch (object) {
    case ConnectionQuality.POOR:
      return "POOR";
    case ConnectionQuality.GOOD:
      return "GOOD";
    case ConnectionQuality.EXCELLENT:
      return "EXCELLENT";
    case ConnectionQuality.LOST:
      return "LOST";
    case ConnectionQuality.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ClientConfigSetting {
  UNSET = 0,
  DISABLED = 1,
  ENABLED = 2,
  UNRECOGNIZED = -1,
}

export function clientConfigSettingFromJSON(object: any): ClientConfigSetting {
  switch (object) {
    case 0:
    case "UNSET":
      return ClientConfigSetting.UNSET;
    case 1:
    case "DISABLED":
      return ClientConfigSetting.DISABLED;
    case 2:
    case "ENABLED":
      return ClientConfigSetting.ENABLED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ClientConfigSetting.UNRECOGNIZED;
  }
}

export function clientConfigSettingToJSON(object: ClientConfigSetting): string {
  switch (object) {
    case ClientConfigSetting.UNSET:
      return "UNSET";
    case ClientConfigSetting.DISABLED:
      return "DISABLED";
    case ClientConfigSetting.ENABLED:
      return "ENABLED";
    case ClientConfigSetting.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum DisconnectReason {
  UNKNOWN_REASON = 0,
  /** CLIENT_INITIATED - the client initiated the disconnect */
  CLIENT_INITIATED = 1,
  /** DUPLICATE_IDENTITY - another participant with the same identity has joined the room */
  DUPLICATE_IDENTITY = 2,
  /** SERVER_SHUTDOWN - the server instance is shutting down */
  SERVER_SHUTDOWN = 3,
  /** PARTICIPANT_REMOVED - RoomService.RemoveParticipant was called */
  PARTICIPANT_REMOVED = 4,
  /** ROOM_DELETED - RoomService.DeleteRoom was called */
  ROOM_DELETED = 5,
  /** STATE_MISMATCH - the client is attempting to resume a session, but server is not aware of it */
  STATE_MISMATCH = 6,
  /** JOIN_FAILURE - client was unable to connect fully */
  JOIN_FAILURE = 7,
  /** MIGRATION - Cloud-only, the server requested Participant to migrate the connection elsewhere */
  MIGRATION = 8,
  /** SIGNAL_CLOSE - the signal websocket was closed unexpectedly */
  SIGNAL_CLOSE = 9,
  /** ROOM_CLOSED - the room was closed, due to all Standard and Ingress participants having left */
  ROOM_CLOSED = 10,
  /** USER_UNAVAILABLE - SIP callee did not respond in time */
  USER_UNAVAILABLE = 11,
  /** USER_REJECTED - SIP callee rejected the call (busy) */
  USER_REJECTED = 12,
  /** SIP_TRUNK_FAILURE - SIP protocol failure or unexpected response */
  SIP_TRUNK_FAILURE = 13,
  /** CONNECTION_TIMEOUT - server timed out a participant session */
  CONNECTION_TIMEOUT = 14,
  /** MEDIA_FAILURE - media stream failure or media timeout */
  MEDIA_FAILURE = 15,
  UNRECOGNIZED = -1,
}

export function disconnectReasonFromJSON(object: any): DisconnectReason {
  switch (object) {
    case 0:
    case "UNKNOWN_REASON":
      return DisconnectReason.UNKNOWN_REASON;
    case 1:
    case "CLIENT_INITIATED":
      return DisconnectReason.CLIENT_INITIATED;
    case 2:
    case "DUPLICATE_IDENTITY":
      return DisconnectReason.DUPLICATE_IDENTITY;
    case 3:
    case "SERVER_SHUTDOWN":
      return DisconnectReason.SERVER_SHUTDOWN;
    case 4:
    case "PARTICIPANT_REMOVED":
      return DisconnectReason.PARTICIPANT_REMOVED;
    case 5:
    case "ROOM_DELETED":
      return DisconnectReason.ROOM_DELETED;
    case 6:
    case "STATE_MISMATCH":
      return DisconnectReason.STATE_MISMATCH;
    case 7:
    case "JOIN_FAILURE":
      return DisconnectReason.JOIN_FAILURE;
    case 8:
    case "MIGRATION":
      return DisconnectReason.MIGRATION;
    case 9:
    case "SIGNAL_CLOSE":
      return DisconnectReason.SIGNAL_CLOSE;
    case 10:
    case "ROOM_CLOSED":
      return DisconnectReason.ROOM_CLOSED;
    case 11:
    case "USER_UNAVAILABLE":
      return DisconnectReason.USER_UNAVAILABLE;
    case 12:
    case "USER_REJECTED":
      return DisconnectReason.USER_REJECTED;
    case 13:
    case "SIP_TRUNK_FAILURE":
      return DisconnectReason.SIP_TRUNK_FAILURE;
    case 14:
    case "CONNECTION_TIMEOUT":
      return DisconnectReason.CONNECTION_TIMEOUT;
    case 15:
    case "MEDIA_FAILURE":
      return DisconnectReason.MEDIA_FAILURE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DisconnectReason.UNRECOGNIZED;
  }
}

export function disconnectReasonToJSON(object: DisconnectReason): string {
  switch (object) {
    case DisconnectReason.UNKNOWN_REASON:
      return "UNKNOWN_REASON";
    case DisconnectReason.CLIENT_INITIATED:
      return "CLIENT_INITIATED";
    case DisconnectReason.DUPLICATE_IDENTITY:
      return "DUPLICATE_IDENTITY";
    case DisconnectReason.SERVER_SHUTDOWN:
      return "SERVER_SHUTDOWN";
    case DisconnectReason.PARTICIPANT_REMOVED:
      return "PARTICIPANT_REMOVED";
    case DisconnectReason.ROOM_DELETED:
      return "ROOM_DELETED";
    case DisconnectReason.STATE_MISMATCH:
      return "STATE_MISMATCH";
    case DisconnectReason.JOIN_FAILURE:
      return "JOIN_FAILURE";
    case DisconnectReason.MIGRATION:
      return "MIGRATION";
    case DisconnectReason.SIGNAL_CLOSE:
      return "SIGNAL_CLOSE";
    case DisconnectReason.ROOM_CLOSED:
      return "ROOM_CLOSED";
    case DisconnectReason.USER_UNAVAILABLE:
      return "USER_UNAVAILABLE";
    case DisconnectReason.USER_REJECTED:
      return "USER_REJECTED";
    case DisconnectReason.SIP_TRUNK_FAILURE:
      return "SIP_TRUNK_FAILURE";
    case DisconnectReason.CONNECTION_TIMEOUT:
      return "CONNECTION_TIMEOUT";
    case DisconnectReason.MEDIA_FAILURE:
      return "MEDIA_FAILURE";
    case DisconnectReason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ReconnectReason {
  RR_UNKNOWN = 0,
  RR_SIGNAL_DISCONNECTED = 1,
  RR_PUBLISHER_FAILED = 2,
  RR_SUBSCRIBER_FAILED = 3,
  RR_SWITCH_CANDIDATE = 4,
  UNRECOGNIZED = -1,
}

export function reconnectReasonFromJSON(object: any): ReconnectReason {
  switch (object) {
    case 0:
    case "RR_UNKNOWN":
      return ReconnectReason.RR_UNKNOWN;
    case 1:
    case "RR_SIGNAL_DISCONNECTED":
      return ReconnectReason.RR_SIGNAL_DISCONNECTED;
    case 2:
    case "RR_PUBLISHER_FAILED":
      return ReconnectReason.RR_PUBLISHER_FAILED;
    case 3:
    case "RR_SUBSCRIBER_FAILED":
      return ReconnectReason.RR_SUBSCRIBER_FAILED;
    case 4:
    case "RR_SWITCH_CANDIDATE":
      return ReconnectReason.RR_SWITCH_CANDIDATE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ReconnectReason.UNRECOGNIZED;
  }
}

export function reconnectReasonToJSON(object: ReconnectReason): string {
  switch (object) {
    case ReconnectReason.RR_UNKNOWN:
      return "RR_UNKNOWN";
    case ReconnectReason.RR_SIGNAL_DISCONNECTED:
      return "RR_SIGNAL_DISCONNECTED";
    case ReconnectReason.RR_PUBLISHER_FAILED:
      return "RR_PUBLISHER_FAILED";
    case ReconnectReason.RR_SUBSCRIBER_FAILED:
      return "RR_SUBSCRIBER_FAILED";
    case ReconnectReason.RR_SWITCH_CANDIDATE:
      return "RR_SWITCH_CANDIDATE";
    case ReconnectReason.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum SubscriptionError {
  SE_UNKNOWN = 0,
  SE_CODEC_UNSUPPORTED = 1,
  SE_TRACK_NOTFOUND = 2,
  UNRECOGNIZED = -1,
}

export function subscriptionErrorFromJSON(object: any): SubscriptionError {
  switch (object) {
    case 0:
    case "SE_UNKNOWN":
      return SubscriptionError.SE_UNKNOWN;
    case 1:
    case "SE_CODEC_UNSUPPORTED":
      return SubscriptionError.SE_CODEC_UNSUPPORTED;
    case 2:
    case "SE_TRACK_NOTFOUND":
      return SubscriptionError.SE_TRACK_NOTFOUND;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SubscriptionError.UNRECOGNIZED;
  }
}

export function subscriptionErrorToJSON(object: SubscriptionError): string {
  switch (object) {
    case SubscriptionError.SE_UNKNOWN:
      return "SE_UNKNOWN";
    case SubscriptionError.SE_CODEC_UNSUPPORTED:
      return "SE_CODEC_UNSUPPORTED";
    case SubscriptionError.SE_TRACK_NOTFOUND:
      return "SE_TRACK_NOTFOUND";
    case SubscriptionError.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum AudioTrackFeature {
  TF_STEREO = 0,
  TF_NO_DTX = 1,
  TF_AUTO_GAIN_CONTROL = 2,
  TF_ECHO_CANCELLATION = 3,
  TF_NOISE_SUPPRESSION = 4,
  TF_ENHANCED_NOISE_CANCELLATION = 5,
  /** TF_PRECONNECT_BUFFER - client will buffer audio once available and send it to the server via bytes stream once connected */
  TF_PRECONNECT_BUFFER = 6,
  UNRECOGNIZED = -1,
}

export function audioTrackFeatureFromJSON(object: any): AudioTrackFeature {
  switch (object) {
    case 0:
    case "TF_STEREO":
      return AudioTrackFeature.TF_STEREO;
    case 1:
    case "TF_NO_DTX":
      return AudioTrackFeature.TF_NO_DTX;
    case 2:
    case "TF_AUTO_GAIN_CONTROL":
      return AudioTrackFeature.TF_AUTO_GAIN_CONTROL;
    case 3:
    case "TF_ECHO_CANCELLATION":
      return AudioTrackFeature.TF_ECHO_CANCELLATION;
    case 4:
    case "TF_NOISE_SUPPRESSION":
      return AudioTrackFeature.TF_NOISE_SUPPRESSION;
    case 5:
    case "TF_ENHANCED_NOISE_CANCELLATION":
      return AudioTrackFeature.TF_ENHANCED_NOISE_CANCELLATION;
    case 6:
    case "TF_PRECONNECT_BUFFER":
      return AudioTrackFeature.TF_PRECONNECT_BUFFER;
    case -1:
    case "UNRECOGNIZED":
    default:
      return AudioTrackFeature.UNRECOGNIZED;
  }
}

export function audioTrackFeatureToJSON(object: AudioTrackFeature): string {
  switch (object) {
    case AudioTrackFeature.TF_STEREO:
      return "TF_STEREO";
    case AudioTrackFeature.TF_NO_DTX:
      return "TF_NO_DTX";
    case AudioTrackFeature.TF_AUTO_GAIN_CONTROL:
      return "TF_AUTO_GAIN_CONTROL";
    case AudioTrackFeature.TF_ECHO_CANCELLATION:
      return "TF_ECHO_CANCELLATION";
    case AudioTrackFeature.TF_NOISE_SUPPRESSION:
      return "TF_NOISE_SUPPRESSION";
    case AudioTrackFeature.TF_ENHANCED_NOISE_CANCELLATION:
      return "TF_ENHANCED_NOISE_CANCELLATION";
    case AudioTrackFeature.TF_PRECONNECT_BUFFER:
      return "TF_PRECONNECT_BUFFER";
    case AudioTrackFeature.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Pagination {
  /** list entities which IDs are greater */
  afterId: string;
  limit: number;
}

/** ListUpdate is used for updated APIs where 'repeated string' field is modified. */
export interface ListUpdate {
  /** set the field to a new list */
  set: string[];
}

export interface Room {
  sid: string;
  name: string;
  emptyTimeout: number;
  departureTimeout: number;
  maxParticipants: number;
  creationTime: string;
  creationTimeMs: string;
  turnPassword: string;
  enabledCodecs: Codec[];
  metadata: string;
  numParticipants: number;
  numPublishers: number;
  activeRecording: boolean;
  version: TimedVersion | undefined;
}

export interface Codec {
  mime: string;
  fmtpLine: string;
}

export interface PlayoutDelay {
  enabled: boolean;
  min: number;
  max: number;
}

export interface ParticipantPermission {
  /** allow participant to subscribe to other tracks in the room */
  canSubscribe: boolean;
  /** allow participant to publish new tracks to room */
  canPublish: boolean;
  /** allow participant to publish data */
  canPublishData: boolean;
  /** sources that are allowed to be published */
  canPublishSources: TrackSource[];
  /** indicates that it's hidden to others */
  hidden: boolean;
  /**
   * indicates it's a recorder instance
   * deprecated: use ParticipantInfo.kind instead
   *
   * @deprecated
   */
  recorder: boolean;
  /** indicates that participant can update own metadata and attributes */
  canUpdateMetadata: boolean;
  /**
   * indicates that participant is an agent
   * deprecated: use ParticipantInfo.kind instead
   *
   * @deprecated
   */
  agent: boolean;
  /** if a participant can subscribe to metrics */
  canSubscribeMetrics: boolean;
}

export interface ParticipantInfo {
  sid: string;
  identity: string;
  state: ParticipantInfo_State;
  tracks: TrackInfo[];
  metadata: string;
  /** timestamp when participant joined room, in seconds */
  joinedAt: string;
  /** timestamp when participant joined room, in milliseconds */
  joinedAtMs: string;
  name: string;
  version: number;
  permission: ParticipantPermission | undefined;
  region: string;
  /**
   * indicates the participant has an active publisher connection
   * and can publish to the server
   */
  isPublisher: boolean;
  kind: ParticipantInfo_Kind;
  attributes: { [key: string]: string };
  disconnectReason: DisconnectReason;
  kindDetails: ParticipantInfo_KindDetail[];
}

export enum ParticipantInfo_State {
  /** JOINING - websocket' connected, but not offered yet */
  JOINING = 0,
  /** JOINED - server received client offer */
  JOINED = 1,
  /** ACTIVE - ICE connectivity established */
  ACTIVE = 2,
  /** DISCONNECTED - WS disconnected */
  DISCONNECTED = 3,
  UNRECOGNIZED = -1,
}

export function participantInfo_StateFromJSON(object: any): ParticipantInfo_State {
  switch (object) {
    case 0:
    case "JOINING":
      return ParticipantInfo_State.JOINING;
    case 1:
    case "JOINED":
      return ParticipantInfo_State.JOINED;
    case 2:
    case "ACTIVE":
      return ParticipantInfo_State.ACTIVE;
    case 3:
    case "DISCONNECTED":
      return ParticipantInfo_State.DISCONNECTED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ParticipantInfo_State.UNRECOGNIZED;
  }
}

export function participantInfo_StateToJSON(object: ParticipantInfo_State): string {
  switch (object) {
    case ParticipantInfo_State.JOINING:
      return "JOINING";
    case ParticipantInfo_State.JOINED:
      return "JOINED";
    case ParticipantInfo_State.ACTIVE:
      return "ACTIVE";
    case ParticipantInfo_State.DISCONNECTED:
      return "DISCONNECTED";
    case ParticipantInfo_State.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ParticipantInfo_Kind {
  /** STANDARD - standard participants, e.g. web clients */
  STANDARD = 0,
  /** INGRESS - only ingests streams */
  INGRESS = 1,
  /** EGRESS - only consumes streams */
  EGRESS = 2,
  /** SIP - SIP participants */
  SIP = 3,
  /** AGENT - LiveKit agents */
  AGENT = 4,
  UNRECOGNIZED = -1,
}

export function participantInfo_KindFromJSON(object: any): ParticipantInfo_Kind {
  switch (object) {
    case 0:
    case "STANDARD":
      return ParticipantInfo_Kind.STANDARD;
    case 1:
    case "INGRESS":
      return ParticipantInfo_Kind.INGRESS;
    case 2:
    case "EGRESS":
      return ParticipantInfo_Kind.EGRESS;
    case 3:
    case "SIP":
      return ParticipantInfo_Kind.SIP;
    case 4:
    case "AGENT":
      return ParticipantInfo_Kind.AGENT;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ParticipantInfo_Kind.UNRECOGNIZED;
  }
}

export function participantInfo_KindToJSON(object: ParticipantInfo_Kind): string {
  switch (object) {
    case ParticipantInfo_Kind.STANDARD:
      return "STANDARD";
    case ParticipantInfo_Kind.INGRESS:
      return "INGRESS";
    case ParticipantInfo_Kind.EGRESS:
      return "EGRESS";
    case ParticipantInfo_Kind.SIP:
      return "SIP";
    case ParticipantInfo_Kind.AGENT:
      return "AGENT";
    case ParticipantInfo_Kind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum ParticipantInfo_KindDetail {
  CLOUD_AGENT = 0,
  FORWARDED = 1,
  UNRECOGNIZED = -1,
}

export function participantInfo_KindDetailFromJSON(object: any): ParticipantInfo_KindDetail {
  switch (object) {
    case 0:
    case "CLOUD_AGENT":
      return ParticipantInfo_KindDetail.CLOUD_AGENT;
    case 1:
    case "FORWARDED":
      return ParticipantInfo_KindDetail.FORWARDED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ParticipantInfo_KindDetail.UNRECOGNIZED;
  }
}

export function participantInfo_KindDetailToJSON(object: ParticipantInfo_KindDetail): string {
  switch (object) {
    case ParticipantInfo_KindDetail.CLOUD_AGENT:
      return "CLOUD_AGENT";
    case ParticipantInfo_KindDetail.FORWARDED:
      return "FORWARDED";
    case ParticipantInfo_KindDetail.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ParticipantInfo_AttributesEntry {
  key: string;
  value: string;
}

export interface Encryption {
}

export enum Encryption_Type {
  NONE = 0,
  GCM = 1,
  CUSTOM = 2,
  UNRECOGNIZED = -1,
}

export function encryption_TypeFromJSON(object: any): Encryption_Type {
  switch (object) {
    case 0:
    case "NONE":
      return Encryption_Type.NONE;
    case 1:
    case "GCM":
      return Encryption_Type.GCM;
    case 2:
    case "CUSTOM":
      return Encryption_Type.CUSTOM;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Encryption_Type.UNRECOGNIZED;
  }
}

export function encryption_TypeToJSON(object: Encryption_Type): string {
  switch (object) {
    case Encryption_Type.NONE:
      return "NONE";
    case Encryption_Type.GCM:
      return "GCM";
    case Encryption_Type.CUSTOM:
      return "CUSTOM";
    case Encryption_Type.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface SimulcastCodecInfo {
  mimeType: string;
  mid: string;
  cid: string;
  layers: VideoLayer[];
}

export interface TrackInfo {
  sid: string;
  type: TrackType;
  name: string;
  muted: boolean;
  /**
   * original width of video (unset for audio)
   * clients may receive a lower resolution version with simulcast
   */
  width: number;
  /** original height of video (unset for audio) */
  height: number;
  /** true if track is simulcasted */
  simulcast: boolean;
  /** true if DTX (Discontinuous Transmission) is disabled for audio */
  disableDtx: boolean;
  /** source of media */
  source: TrackSource;
  layers: VideoLayer[];
  /** mime type of codec */
  mimeType: string;
  mid: string;
  codecs: SimulcastCodecInfo[];
  stereo: boolean;
  /** true if RED (Redundant Encoding) is disabled for audio */
  disableRed: boolean;
  encryption: Encryption_Type;
  stream: string;
  version: TimedVersion | undefined;
  audioFeatures: AudioTrackFeature[];
  backupCodecPolicy: BackupCodecPolicy;
}

/** provide information about available spatial layers */
export interface VideoLayer {
  /** for tracks with a single layer, this should be HIGH */
  quality: VideoQuality;
  width: number;
  height: number;
  /** target bitrate in bit per second (bps), server will measure actual */
  bitrate: number;
  ssrc: number;
}

/** new DataPacket API */
export interface DataPacket {
  /** @deprecated */
  kind: DataPacket_Kind;
  /** participant identity of user that sent the message */
  participantIdentity: string;
  /** identities of participants who will receive the message (sent to all by default) */
  destinationIdentities: string[];
  value?:
    | { $case: "user"; user: UserPacket }
    | { $case: "speaker"; speaker: ActiveSpeakerUpdate }
    | { $case: "sipDtmf"; sipDtmf: SipDTMF }
    | { $case: "transcription"; transcription: Transcription }
    | { $case: "metrics"; metrics: MetricsBatch }
    | { $case: "chatMessage"; chatMessage: ChatMessage }
    | { $case: "rpcRequest"; rpcRequest: RpcRequest }
    | { $case: "rpcAck"; rpcAck: RpcAck }
    | { $case: "rpcResponse"; rpcResponse: RpcResponse }
    | { $case: "streamHeader"; streamHeader: DataStream_Header }
    | { $case: "streamChunk"; streamChunk: DataStream_Chunk }
    | { $case: "streamTrailer"; streamTrailer: DataStream_Trailer }
    | undefined;
}

export enum DataPacket_Kind {
  RELIABLE = 0,
  LOSSY = 1,
  UNRECOGNIZED = -1,
}

export function dataPacket_KindFromJSON(object: any): DataPacket_Kind {
  switch (object) {
    case 0:
    case "RELIABLE":
      return DataPacket_Kind.RELIABLE;
    case 1:
    case "LOSSY":
      return DataPacket_Kind.LOSSY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DataPacket_Kind.UNRECOGNIZED;
  }
}

export function dataPacket_KindToJSON(object: DataPacket_Kind): string {
  switch (object) {
    case DataPacket_Kind.RELIABLE:
      return "RELIABLE";
    case DataPacket_Kind.LOSSY:
      return "LOSSY";
    case DataPacket_Kind.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface ActiveSpeakerUpdate {
  speakers: SpeakerInfo[];
}

export interface SpeakerInfo {
  sid: string;
  /** audio level, 0-1.0, 1 is loudest */
  level: number;
  /** true if speaker is currently active */
  active: boolean;
}

export interface UserPacket {
  /**
   * participant ID of user that sent the message
   *
   * @deprecated
   */
  participantSid: string;
  /** @deprecated */
  participantIdentity: string;
  /** user defined payload */
  payload: Uint8Array;
  /**
   * the ID of the participants who will receive the message (sent to all by default)
   *
   * @deprecated
   */
  destinationSids: string[];
  /**
   * identities of participants who will receive the message (sent to all by default)
   *
   * @deprecated
   */
  destinationIdentities: string[];
  /** topic under which the message was published */
  topic?:
    | string
    | undefined;
  /** Unique ID to indentify the message */
  id?:
    | string
    | undefined;
  /** start and end time allow relating the message to specific media time */
  startTime?: string | undefined;
  endTime?:
    | string
    | undefined;
  /** added by SDK to enable de-duping of messages, for INTERNAL USE ONLY */
  nonce: Uint8Array;
}

export interface SipDTMF {
  code: number;
  digit: string;
}

export interface Transcription {
  /** Participant that got its speech transcribed */
  transcribedParticipantIdentity: string;
  trackId: string;
  segments: TranscriptionSegment[];
}

export interface TranscriptionSegment {
  id: string;
  text: string;
  startTime: string;
  endTime: string;
  final: boolean;
  language: string;
}

export interface ChatMessage {
  /** uuid */
  id: string;
  timestamp: string;
  /** populated only if the intent is to edit/update an existing message */
  editTimestamp?: string | undefined;
  message: string;
  /** true to remove message */
  deleted: boolean;
  /** true if the chat message has been generated by an agent from a participant's audio transcription */
  generated: boolean;
}

export interface RpcRequest {
  id: string;
  method: string;
  payload: string;
  responseTimeoutMs: number;
  version: number;
}

export interface RpcAck {
  requestId: string;
}

export interface RpcResponse {
  requestId: string;
  value?: { $case: "payload"; payload: string } | { $case: "error"; error: RpcError } | undefined;
}

export interface RpcError {
  code: number;
  message: string;
  data: string;
}

export interface ParticipantTracks {
  /** participant ID of participant to whom the tracks belong */
  participantSid: string;
  trackSids: string[];
}

/** details about the server */
export interface ServerInfo {
  edition: ServerInfo_Edition;
  version: string;
  protocol: number;
  region: string;
  nodeId: string;
  /** additional debugging information. sent only if server is in development mode */
  debugInfo: string;
  agentProtocol: number;
}

export enum ServerInfo_Edition {
  Standard = 0,
  Cloud = 1,
  UNRECOGNIZED = -1,
}

export function serverInfo_EditionFromJSON(object: any): ServerInfo_Edition {
  switch (object) {
    case 0:
    case "Standard":
      return ServerInfo_Edition.Standard;
    case 1:
    case "Cloud":
      return ServerInfo_Edition.Cloud;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ServerInfo_Edition.UNRECOGNIZED;
  }
}

export function serverInfo_EditionToJSON(object: ServerInfo_Edition): string {
  switch (object) {
    case ServerInfo_Edition.Standard:
      return "Standard";
    case ServerInfo_Edition.Cloud:
      return "Cloud";
    case ServerInfo_Edition.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** details about the client */
export interface ClientInfo {
  sdk: ClientInfo_SDK;
  version: string;
  protocol: number;
  os: string;
  osVersion: string;
  deviceModel: string;
  browser: string;
  browserVersion: string;
  address: string;
  /** wifi, wired, cellular, vpn, empty if not known */
  network: string;
  /**
   * comma separated list of additional LiveKit SDKs in use of this client, with versions
   * e.g. "components-js:1.2.3,track-processors-js:1.2.3"
   */
  otherSdks: string;
}

export enum ClientInfo_SDK {
  UNKNOWN = 0,
  JS = 1,
  SWIFT = 2,
  ANDROID = 3,
  FLUTTER = 4,
  GO = 5,
  UNITY = 6,
  REACT_NATIVE = 7,
  RUST = 8,
  PYTHON = 9,
  CPP = 10,
  UNITY_WEB = 11,
  NODE = 12,
  UNREAL = 13,
  UNRECOGNIZED = -1,
}

export function clientInfo_SDKFromJSON(object: any): ClientInfo_SDK {
  switch (object) {
    case 0:
    case "UNKNOWN":
      return ClientInfo_SDK.UNKNOWN;
    case 1:
    case "JS":
      return ClientInfo_SDK.JS;
    case 2:
    case "SWIFT":
      return ClientInfo_SDK.SWIFT;
    case 3:
    case "ANDROID":
      return ClientInfo_SDK.ANDROID;
    case 4:
    case "FLUTTER":
      return ClientInfo_SDK.FLUTTER;
    case 5:
    case "GO":
      return ClientInfo_SDK.GO;
    case 6:
    case "UNITY":
      return ClientInfo_SDK.UNITY;
    case 7:
    case "REACT_NATIVE":
      return ClientInfo_SDK.REACT_NATIVE;
    case 8:
    case "RUST":
      return ClientInfo_SDK.RUST;
    case 9:
    case "PYTHON":
      return ClientInfo_SDK.PYTHON;
    case 10:
    case "CPP":
      return ClientInfo_SDK.CPP;
    case 11:
    case "UNITY_WEB":
      return ClientInfo_SDK.UNITY_WEB;
    case 12:
    case "NODE":
      return ClientInfo_SDK.NODE;
    case 13:
    case "UNREAL":
      return ClientInfo_SDK.UNREAL;
    case -1:
    case "UNRECOGNIZED":
    default:
      return ClientInfo_SDK.UNRECOGNIZED;
  }
}

export function clientInfo_SDKToJSON(object: ClientInfo_SDK): string {
  switch (object) {
    case ClientInfo_SDK.UNKNOWN:
      return "UNKNOWN";
    case ClientInfo_SDK.JS:
      return "JS";
    case ClientInfo_SDK.SWIFT:
      return "SWIFT";
    case ClientInfo_SDK.ANDROID:
      return "ANDROID";
    case ClientInfo_SDK.FLUTTER:
      return "FLUTTER";
    case ClientInfo_SDK.GO:
      return "GO";
    case ClientInfo_SDK.UNITY:
      return "UNITY";
    case ClientInfo_SDK.REACT_NATIVE:
      return "REACT_NATIVE";
    case ClientInfo_SDK.RUST:
      return "RUST";
    case ClientInfo_SDK.PYTHON:
      return "PYTHON";
    case ClientInfo_SDK.CPP:
      return "CPP";
    case ClientInfo_SDK.UNITY_WEB:
      return "UNITY_WEB";
    case ClientInfo_SDK.NODE:
      return "NODE";
    case ClientInfo_SDK.UNREAL:
      return "UNREAL";
    case ClientInfo_SDK.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** server provided client configuration */
export interface ClientConfiguration {
  video: VideoConfiguration | undefined;
  screen: VideoConfiguration | undefined;
  resumeConnection: ClientConfigSetting;
  disabledCodecs: DisabledCodecs | undefined;
  forceRelay: ClientConfigSetting;
}

export interface VideoConfiguration {
  hardwareEncoder: ClientConfigSetting;
}

export interface DisabledCodecs {
  /** disabled for both publish and subscribe */
  codecs: Codec[];
  /** only disable for publish */
  publish: Codec[];
}

export interface RTPDrift {
  startTime: Date | undefined;
  endTime: Date | undefined;
  duration: number;
  startTimestamp: string;
  endTimestamp: string;
  rtpClockTicks: string;
  driftSamples: string;
  driftMs: number;
  clockRate: number;
}

export interface RTPStats {
  startTime: Date | undefined;
  endTime: Date | undefined;
  duration: number;
  packets: number;
  packetRate: number;
  bytes: string;
  headerBytes: string;
  bitrate: number;
  packetsLost: number;
  packetLossRate: number;
  packetLossPercentage: number;
  packetsDuplicate: number;
  packetDuplicateRate: number;
  bytesDuplicate: string;
  headerBytesDuplicate: string;
  bitrateDuplicate: number;
  packetsPadding: number;
  packetPaddingRate: number;
  bytesPadding: string;
  headerBytesPadding: string;
  bitratePadding: number;
  packetsOutOfOrder: number;
  frames: number;
  frameRate: number;
  jitterCurrent: number;
  jitterMax: number;
  gapHistogram: { [key: number]: number };
  nacks: number;
  nackAcks: number;
  nackMisses: number;
  nackRepeated: number;
  plis: number;
  lastPli: Date | undefined;
  firs: number;
  lastFir: Date | undefined;
  rttCurrent: number;
  rttMax: number;
  keyFrames: number;
  lastKeyFrame: Date | undefined;
  layerLockPlis: number;
  lastLayerLockPli: Date | undefined;
  packetDrift: RTPDrift | undefined;
  ntpReportDrift: RTPDrift | undefined;
  rebasedReportDrift:
    | RTPDrift
    | undefined;
  /** NEXT_ID: 48 */
  receivedReportDrift: RTPDrift | undefined;
}

export interface RTPStats_GapHistogramEntry {
  key: number;
  value: number;
}

export interface RTCPSenderReportState {
  rtpTimestamp: number;
  rtpTimestampExt: string;
  ntpTimestamp: string;
  /** time at which this happened */
  at: string;
  atAdjusted: string;
  packets: number;
  octets: string;
}

export interface RTPForwarderState {
  started: boolean;
  referenceLayerSpatial: number;
  preStartTime: string;
  extFirstTimestamp: string;
  dummyStartTimestampOffset: string;
  rtpMunger: RTPMungerState | undefined;
  codecMunger?: { $case: "vp8Munger"; vp8Munger: VP8MungerState } | undefined;
  senderReportState: RTCPSenderReportState[];
}

export interface RTPMungerState {
  extLastSequenceNumber: string;
  extSecondLastSequenceNumber: string;
  extLastTimestamp: string;
  extSecondLastTimestamp: string;
  lastMarker: boolean;
  secondLastMarker: boolean;
}

export interface VP8MungerState {
  extLastPictureId: number;
  pictureIdUsed: boolean;
  lastTl0PicIdx: number;
  tl0PicIdxUsed: boolean;
  tidUsed: boolean;
  lastKeyIdx: number;
  keyIdxUsed: boolean;
}

export interface TimedVersion {
  unixMicro: string;
  ticks: number;
}

export interface DataStream {
}

/** enum for operation types (specific to TextHeader) */
export enum DataStream_OperationType {
  CREATE = 0,
  UPDATE = 1,
  DELETE = 2,
  REACTION = 3,
  UNRECOGNIZED = -1,
}

export function dataStream_OperationTypeFromJSON(object: any): DataStream_OperationType {
  switch (object) {
    case 0:
    case "CREATE":
      return DataStream_OperationType.CREATE;
    case 1:
    case "UPDATE":
      return DataStream_OperationType.UPDATE;
    case 2:
    case "DELETE":
      return DataStream_OperationType.DELETE;
    case 3:
    case "REACTION":
      return DataStream_OperationType.REACTION;
    case -1:
    case "UNRECOGNIZED":
    default:
      return DataStream_OperationType.UNRECOGNIZED;
  }
}

export function dataStream_OperationTypeToJSON(object: DataStream_OperationType): string {
  switch (object) {
    case DataStream_OperationType.CREATE:
      return "CREATE";
    case DataStream_OperationType.UPDATE:
      return "UPDATE";
    case DataStream_OperationType.DELETE:
      return "DELETE";
    case DataStream_OperationType.REACTION:
      return "REACTION";
    case DataStream_OperationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** header properties specific to text streams */
export interface DataStream_TextHeader {
  operationType: DataStream_OperationType;
  /** Optional: Version for updates/edits */
  version: number;
  /** Optional: Reply to specific message */
  replyToStreamId: string;
  /** file attachments for text streams */
  attachedStreamIds: string[];
  /** true if the text has been generated by an agent from a participant's audio transcription */
  generated: boolean;
}

/** header properties specific to byte or file streams */
export interface DataStream_ByteHeader {
  name: string;
}

/** main DataStream.Header that contains a oneof for specific headers */
export interface DataStream_Header {
  /** unique identifier for this data stream */
  streamId: string;
  /** using int64 for Unix timestamp */
  timestamp: string;
  topic: string;
  mimeType: string;
  /** only populated for finite streams, if it's a stream of unknown size this stays empty */
  totalLength?:
    | string
    | undefined;
  /** defaults to NONE */
  encryptionType: Encryption_Type;
  /** user defined attributes map that can carry additional info */
  attributes: { [key: string]: string };
  /** oneof to choose between specific header types */
  contentHeader?: { $case: "textHeader"; textHeader: DataStream_TextHeader } | {
    $case: "byteHeader";
    byteHeader: DataStream_ByteHeader;
  } | undefined;
}

export interface DataStream_Header_AttributesEntry {
  key: string;
  value: string;
}

export interface DataStream_Chunk {
  /** unique identifier for this data stream to map it to the correct header */
  streamId: string;
  chunkIndex: string;
  /** content as binary (bytes) */
  content: Uint8Array;
  /** a version indicating that this chunk_index has been retroactively modified and the original one needs to be replaced */
  version: number;
  /** optional, initialization vector for AES-GCM encryption */
  iv?: Uint8Array | undefined;
}

export interface DataStream_Trailer {
  /** unique identifier for this data stream */
  streamId: string;
  /** reason why the stream was closed (could contain "error" / "interrupted" / empty for expected end) */
  reason: string;
  /** finalizing updates for the stream, can also include additional insights for errors or endTime for transcription */
  attributes: { [key: string]: string };
}

export interface DataStream_Trailer_AttributesEntry {
  key: string;
  value: string;
}

export interface WebhookConfig {
  url: string;
  signingKey: string;
}

function createBasePagination(): Pagination {
  return { afterId: "", limit: 0 };
}

export const Pagination: MessageFns<Pagination> = {
  encode(message: Pagination, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.afterId !== "") {
      writer.uint32(10).string(message.afterId);
    }
    if (message.limit !== 0) {
      writer.uint32(16).int32(message.limit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Pagination {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePagination();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.afterId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.limit = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Pagination {
    return {
      afterId: isSet(object.afterId) ? globalThis.String(object.afterId) : "",
      limit: isSet(object.limit) ? globalThis.Number(object.limit) : 0,
    };
  },

  toJSON(message: Pagination): unknown {
    const obj: any = {};
    if (message.afterId !== "") {
      obj.afterId = message.afterId;
    }
    if (message.limit !== 0) {
      obj.limit = Math.round(message.limit);
    }
    return obj;
  },

  create(base?: DeepPartial<Pagination>): Pagination {
    return Pagination.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Pagination>): Pagination {
    const message = createBasePagination();
    message.afterId = object.afterId ?? "";
    message.limit = object.limit ?? 0;
    return message;
  },
};

function createBaseListUpdate(): ListUpdate {
  return { set: [] };
}

export const ListUpdate: MessageFns<ListUpdate> = {
  encode(message: ListUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.set) {
      writer.uint32(10).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.set.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListUpdate {
    return { set: globalThis.Array.isArray(object?.set) ? object.set.map((e: any) => globalThis.String(e)) : [] };
  },

  toJSON(message: ListUpdate): unknown {
    const obj: any = {};
    if (message.set?.length) {
      obj.set = message.set;
    }
    return obj;
  },

  create(base?: DeepPartial<ListUpdate>): ListUpdate {
    return ListUpdate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListUpdate>): ListUpdate {
    const message = createBaseListUpdate();
    message.set = object.set?.map((e) => e) || [];
    return message;
  },
};

function createBaseRoom(): Room {
  return {
    sid: "",
    name: "",
    emptyTimeout: 0,
    departureTimeout: 0,
    maxParticipants: 0,
    creationTime: "0",
    creationTimeMs: "0",
    turnPassword: "",
    enabledCodecs: [],
    metadata: "",
    numParticipants: 0,
    numPublishers: 0,
    activeRecording: false,
    version: undefined,
  };
}

export const Room: MessageFns<Room> = {
  encode(message: Room, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sid !== "") {
      writer.uint32(10).string(message.sid);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.emptyTimeout !== 0) {
      writer.uint32(24).uint32(message.emptyTimeout);
    }
    if (message.departureTimeout !== 0) {
      writer.uint32(112).uint32(message.departureTimeout);
    }
    if (message.maxParticipants !== 0) {
      writer.uint32(32).uint32(message.maxParticipants);
    }
    if (message.creationTime !== "0") {
      writer.uint32(40).int64(message.creationTime);
    }
    if (message.creationTimeMs !== "0") {
      writer.uint32(120).int64(message.creationTimeMs);
    }
    if (message.turnPassword !== "") {
      writer.uint32(50).string(message.turnPassword);
    }
    for (const v of message.enabledCodecs) {
      Codec.encode(v!, writer.uint32(58).fork()).join();
    }
    if (message.metadata !== "") {
      writer.uint32(66).string(message.metadata);
    }
    if (message.numParticipants !== 0) {
      writer.uint32(72).uint32(message.numParticipants);
    }
    if (message.numPublishers !== 0) {
      writer.uint32(88).uint32(message.numPublishers);
    }
    if (message.activeRecording !== false) {
      writer.uint32(80).bool(message.activeRecording);
    }
    if (message.version !== undefined) {
      TimedVersion.encode(message.version, writer.uint32(106).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Room {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRoom();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.emptyTimeout = reader.uint32();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.departureTimeout = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.maxParticipants = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.creationTime = reader.int64().toString();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.creationTimeMs = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.turnPassword = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.enabledCodecs.push(Codec.decode(reader, reader.uint32()));
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.metadata = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.numParticipants = reader.uint32();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.numPublishers = reader.uint32();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.activeRecording = reader.bool();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.version = TimedVersion.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Room {
    return {
      sid: isSet(object.sid) ? globalThis.String(object.sid) : "",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      emptyTimeout: isSet(object.emptyTimeout) ? globalThis.Number(object.emptyTimeout) : 0,
      departureTimeout: isSet(object.departureTimeout) ? globalThis.Number(object.departureTimeout) : 0,
      maxParticipants: isSet(object.maxParticipants) ? globalThis.Number(object.maxParticipants) : 0,
      creationTime: isSet(object.creationTime) ? globalThis.String(object.creationTime) : "0",
      creationTimeMs: isSet(object.creationTimeMs) ? globalThis.String(object.creationTimeMs) : "0",
      turnPassword: isSet(object.turnPassword) ? globalThis.String(object.turnPassword) : "",
      enabledCodecs: globalThis.Array.isArray(object?.enabledCodecs)
        ? object.enabledCodecs.map((e: any) => Codec.fromJSON(e))
        : [],
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
      numParticipants: isSet(object.numParticipants) ? globalThis.Number(object.numParticipants) : 0,
      numPublishers: isSet(object.numPublishers) ? globalThis.Number(object.numPublishers) : 0,
      activeRecording: isSet(object.activeRecording) ? globalThis.Boolean(object.activeRecording) : false,
      version: isSet(object.version) ? TimedVersion.fromJSON(object.version) : undefined,
    };
  },

  toJSON(message: Room): unknown {
    const obj: any = {};
    if (message.sid !== "") {
      obj.sid = message.sid;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.emptyTimeout !== 0) {
      obj.emptyTimeout = Math.round(message.emptyTimeout);
    }
    if (message.departureTimeout !== 0) {
      obj.departureTimeout = Math.round(message.departureTimeout);
    }
    if (message.maxParticipants !== 0) {
      obj.maxParticipants = Math.round(message.maxParticipants);
    }
    if (message.creationTime !== "0") {
      obj.creationTime = message.creationTime;
    }
    if (message.creationTimeMs !== "0") {
      obj.creationTimeMs = message.creationTimeMs;
    }
    if (message.turnPassword !== "") {
      obj.turnPassword = message.turnPassword;
    }
    if (message.enabledCodecs?.length) {
      obj.enabledCodecs = message.enabledCodecs.map((e) => Codec.toJSON(e));
    }
    if (message.metadata !== "") {
      obj.metadata = message.metadata;
    }
    if (message.numParticipants !== 0) {
      obj.numParticipants = Math.round(message.numParticipants);
    }
    if (message.numPublishers !== 0) {
      obj.numPublishers = Math.round(message.numPublishers);
    }
    if (message.activeRecording !== false) {
      obj.activeRecording = message.activeRecording;
    }
    if (message.version !== undefined) {
      obj.version = TimedVersion.toJSON(message.version);
    }
    return obj;
  },

  create(base?: DeepPartial<Room>): Room {
    return Room.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Room>): Room {
    const message = createBaseRoom();
    message.sid = object.sid ?? "";
    message.name = object.name ?? "";
    message.emptyTimeout = object.emptyTimeout ?? 0;
    message.departureTimeout = object.departureTimeout ?? 0;
    message.maxParticipants = object.maxParticipants ?? 0;
    message.creationTime = object.creationTime ?? "0";
    message.creationTimeMs = object.creationTimeMs ?? "0";
    message.turnPassword = object.turnPassword ?? "";
    message.enabledCodecs = object.enabledCodecs?.map((e) => Codec.fromPartial(e)) || [];
    message.metadata = object.metadata ?? "";
    message.numParticipants = object.numParticipants ?? 0;
    message.numPublishers = object.numPublishers ?? 0;
    message.activeRecording = object.activeRecording ?? false;
    message.version = (object.version !== undefined && object.version !== null)
      ? TimedVersion.fromPartial(object.version)
      : undefined;
    return message;
  },
};

function createBaseCodec(): Codec {
  return { mime: "", fmtpLine: "" };
}

export const Codec: MessageFns<Codec> = {
  encode(message: Codec, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mime !== "") {
      writer.uint32(10).string(message.mime);
    }
    if (message.fmtpLine !== "") {
      writer.uint32(18).string(message.fmtpLine);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Codec {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCodec();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mime = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.fmtpLine = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Codec {
    return {
      mime: isSet(object.mime) ? globalThis.String(object.mime) : "",
      fmtpLine: isSet(object.fmtpLine) ? globalThis.String(object.fmtpLine) : "",
    };
  },

  toJSON(message: Codec): unknown {
    const obj: any = {};
    if (message.mime !== "") {
      obj.mime = message.mime;
    }
    if (message.fmtpLine !== "") {
      obj.fmtpLine = message.fmtpLine;
    }
    return obj;
  },

  create(base?: DeepPartial<Codec>): Codec {
    return Codec.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Codec>): Codec {
    const message = createBaseCodec();
    message.mime = object.mime ?? "";
    message.fmtpLine = object.fmtpLine ?? "";
    return message;
  },
};

function createBasePlayoutDelay(): PlayoutDelay {
  return { enabled: false, min: 0, max: 0 };
}

export const PlayoutDelay: MessageFns<PlayoutDelay> = {
  encode(message: PlayoutDelay, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.enabled !== false) {
      writer.uint32(8).bool(message.enabled);
    }
    if (message.min !== 0) {
      writer.uint32(16).uint32(message.min);
    }
    if (message.max !== 0) {
      writer.uint32(24).uint32(message.max);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PlayoutDelay {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePlayoutDelay();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.enabled = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.min = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.max = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PlayoutDelay {
    return {
      enabled: isSet(object.enabled) ? globalThis.Boolean(object.enabled) : false,
      min: isSet(object.min) ? globalThis.Number(object.min) : 0,
      max: isSet(object.max) ? globalThis.Number(object.max) : 0,
    };
  },

  toJSON(message: PlayoutDelay): unknown {
    const obj: any = {};
    if (message.enabled !== false) {
      obj.enabled = message.enabled;
    }
    if (message.min !== 0) {
      obj.min = Math.round(message.min);
    }
    if (message.max !== 0) {
      obj.max = Math.round(message.max);
    }
    return obj;
  },

  create(base?: DeepPartial<PlayoutDelay>): PlayoutDelay {
    return PlayoutDelay.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<PlayoutDelay>): PlayoutDelay {
    const message = createBasePlayoutDelay();
    message.enabled = object.enabled ?? false;
    message.min = object.min ?? 0;
    message.max = object.max ?? 0;
    return message;
  },
};

function createBaseParticipantPermission(): ParticipantPermission {
  return {
    canSubscribe: false,
    canPublish: false,
    canPublishData: false,
    canPublishSources: [],
    hidden: false,
    recorder: false,
    canUpdateMetadata: false,
    agent: false,
    canSubscribeMetrics: false,
  };
}

export const ParticipantPermission: MessageFns<ParticipantPermission> = {
  encode(message: ParticipantPermission, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.canSubscribe !== false) {
      writer.uint32(8).bool(message.canSubscribe);
    }
    if (message.canPublish !== false) {
      writer.uint32(16).bool(message.canPublish);
    }
    if (message.canPublishData !== false) {
      writer.uint32(24).bool(message.canPublishData);
    }
    writer.uint32(74).fork();
    for (const v of message.canPublishSources) {
      writer.int32(v);
    }
    writer.join();
    if (message.hidden !== false) {
      writer.uint32(56).bool(message.hidden);
    }
    if (message.recorder !== false) {
      writer.uint32(64).bool(message.recorder);
    }
    if (message.canUpdateMetadata !== false) {
      writer.uint32(80).bool(message.canUpdateMetadata);
    }
    if (message.agent !== false) {
      writer.uint32(88).bool(message.agent);
    }
    if (message.canSubscribeMetrics !== false) {
      writer.uint32(96).bool(message.canSubscribeMetrics);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParticipantPermission {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParticipantPermission();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.canSubscribe = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.canPublish = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.canPublishData = reader.bool();
          continue;
        }
        case 9: {
          if (tag === 72) {
            message.canPublishSources.push(reader.int32() as any);

            continue;
          }

          if (tag === 74) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.canPublishSources.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.hidden = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.recorder = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.canUpdateMetadata = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.agent = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.canSubscribeMetrics = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParticipantPermission {
    return {
      canSubscribe: isSet(object.canSubscribe) ? globalThis.Boolean(object.canSubscribe) : false,
      canPublish: isSet(object.canPublish) ? globalThis.Boolean(object.canPublish) : false,
      canPublishData: isSet(object.canPublishData) ? globalThis.Boolean(object.canPublishData) : false,
      canPublishSources: globalThis.Array.isArray(object?.canPublishSources)
        ? object.canPublishSources.map((e: any) => trackSourceFromJSON(e))
        : [],
      hidden: isSet(object.hidden) ? globalThis.Boolean(object.hidden) : false,
      recorder: isSet(object.recorder) ? globalThis.Boolean(object.recorder) : false,
      canUpdateMetadata: isSet(object.canUpdateMetadata) ? globalThis.Boolean(object.canUpdateMetadata) : false,
      agent: isSet(object.agent) ? globalThis.Boolean(object.agent) : false,
      canSubscribeMetrics: isSet(object.canSubscribeMetrics) ? globalThis.Boolean(object.canSubscribeMetrics) : false,
    };
  },

  toJSON(message: ParticipantPermission): unknown {
    const obj: any = {};
    if (message.canSubscribe !== false) {
      obj.canSubscribe = message.canSubscribe;
    }
    if (message.canPublish !== false) {
      obj.canPublish = message.canPublish;
    }
    if (message.canPublishData !== false) {
      obj.canPublishData = message.canPublishData;
    }
    if (message.canPublishSources?.length) {
      obj.canPublishSources = message.canPublishSources.map((e) => trackSourceToJSON(e));
    }
    if (message.hidden !== false) {
      obj.hidden = message.hidden;
    }
    if (message.recorder !== false) {
      obj.recorder = message.recorder;
    }
    if (message.canUpdateMetadata !== false) {
      obj.canUpdateMetadata = message.canUpdateMetadata;
    }
    if (message.agent !== false) {
      obj.agent = message.agent;
    }
    if (message.canSubscribeMetrics !== false) {
      obj.canSubscribeMetrics = message.canSubscribeMetrics;
    }
    return obj;
  },

  create(base?: DeepPartial<ParticipantPermission>): ParticipantPermission {
    return ParticipantPermission.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ParticipantPermission>): ParticipantPermission {
    const message = createBaseParticipantPermission();
    message.canSubscribe = object.canSubscribe ?? false;
    message.canPublish = object.canPublish ?? false;
    message.canPublishData = object.canPublishData ?? false;
    message.canPublishSources = object.canPublishSources?.map((e) => e) || [];
    message.hidden = object.hidden ?? false;
    message.recorder = object.recorder ?? false;
    message.canUpdateMetadata = object.canUpdateMetadata ?? false;
    message.agent = object.agent ?? false;
    message.canSubscribeMetrics = object.canSubscribeMetrics ?? false;
    return message;
  },
};

function createBaseParticipantInfo(): ParticipantInfo {
  return {
    sid: "",
    identity: "",
    state: 0,
    tracks: [],
    metadata: "",
    joinedAt: "0",
    joinedAtMs: "0",
    name: "",
    version: 0,
    permission: undefined,
    region: "",
    isPublisher: false,
    kind: 0,
    attributes: {},
    disconnectReason: 0,
    kindDetails: [],
  };
}

export const ParticipantInfo: MessageFns<ParticipantInfo> = {
  encode(message: ParticipantInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sid !== "") {
      writer.uint32(10).string(message.sid);
    }
    if (message.identity !== "") {
      writer.uint32(18).string(message.identity);
    }
    if (message.state !== 0) {
      writer.uint32(24).int32(message.state);
    }
    for (const v of message.tracks) {
      TrackInfo.encode(v!, writer.uint32(34).fork()).join();
    }
    if (message.metadata !== "") {
      writer.uint32(42).string(message.metadata);
    }
    if (message.joinedAt !== "0") {
      writer.uint32(48).int64(message.joinedAt);
    }
    if (message.joinedAtMs !== "0") {
      writer.uint32(136).int64(message.joinedAtMs);
    }
    if (message.name !== "") {
      writer.uint32(74).string(message.name);
    }
    if (message.version !== 0) {
      writer.uint32(80).uint32(message.version);
    }
    if (message.permission !== undefined) {
      ParticipantPermission.encode(message.permission, writer.uint32(90).fork()).join();
    }
    if (message.region !== "") {
      writer.uint32(98).string(message.region);
    }
    if (message.isPublisher !== false) {
      writer.uint32(104).bool(message.isPublisher);
    }
    if (message.kind !== 0) {
      writer.uint32(112).int32(message.kind);
    }
    Object.entries(message.attributes).forEach(([key, value]) => {
      ParticipantInfo_AttributesEntry.encode({ key: key as any, value }, writer.uint32(122).fork()).join();
    });
    if (message.disconnectReason !== 0) {
      writer.uint32(128).int32(message.disconnectReason);
    }
    writer.uint32(146).fork();
    for (const v of message.kindDetails) {
      writer.int32(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParticipantInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParticipantInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.identity = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.tracks.push(TrackInfo.decode(reader, reader.uint32()));
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.metadata = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.joinedAt = reader.int64().toString();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.joinedAtMs = reader.int64().toString();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.version = reader.uint32();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.permission = ParticipantPermission.decode(reader, reader.uint32());
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.region = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.isPublisher = reader.bool();
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.kind = reader.int32() as any;
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          const entry15 = ParticipantInfo_AttributesEntry.decode(reader, reader.uint32());
          if (entry15.value !== undefined) {
            message.attributes[entry15.key] = entry15.value;
          }
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.disconnectReason = reader.int32() as any;
          continue;
        }
        case 18: {
          if (tag === 144) {
            message.kindDetails.push(reader.int32() as any);

            continue;
          }

          if (tag === 146) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.kindDetails.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParticipantInfo {
    return {
      sid: isSet(object.sid) ? globalThis.String(object.sid) : "",
      identity: isSet(object.identity) ? globalThis.String(object.identity) : "",
      state: isSet(object.state) ? participantInfo_StateFromJSON(object.state) : 0,
      tracks: globalThis.Array.isArray(object?.tracks) ? object.tracks.map((e: any) => TrackInfo.fromJSON(e)) : [],
      metadata: isSet(object.metadata) ? globalThis.String(object.metadata) : "",
      joinedAt: isSet(object.joinedAt) ? globalThis.String(object.joinedAt) : "0",
      joinedAtMs: isSet(object.joinedAtMs) ? globalThis.String(object.joinedAtMs) : "0",
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      permission: isSet(object.permission) ? ParticipantPermission.fromJSON(object.permission) : undefined,
      region: isSet(object.region) ? globalThis.String(object.region) : "",
      isPublisher: isSet(object.isPublisher) ? globalThis.Boolean(object.isPublisher) : false,
      kind: isSet(object.kind) ? participantInfo_KindFromJSON(object.kind) : 0,
      attributes: isObject(object.attributes)
        ? Object.entries(object.attributes).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      disconnectReason: isSet(object.disconnectReason) ? disconnectReasonFromJSON(object.disconnectReason) : 0,
      kindDetails: globalThis.Array.isArray(object?.kindDetails)
        ? object.kindDetails.map((e: any) => participantInfo_KindDetailFromJSON(e))
        : [],
    };
  },

  toJSON(message: ParticipantInfo): unknown {
    const obj: any = {};
    if (message.sid !== "") {
      obj.sid = message.sid;
    }
    if (message.identity !== "") {
      obj.identity = message.identity;
    }
    if (message.state !== 0) {
      obj.state = participantInfo_StateToJSON(message.state);
    }
    if (message.tracks?.length) {
      obj.tracks = message.tracks.map((e) => TrackInfo.toJSON(e));
    }
    if (message.metadata !== "") {
      obj.metadata = message.metadata;
    }
    if (message.joinedAt !== "0") {
      obj.joinedAt = message.joinedAt;
    }
    if (message.joinedAtMs !== "0") {
      obj.joinedAtMs = message.joinedAtMs;
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.permission !== undefined) {
      obj.permission = ParticipantPermission.toJSON(message.permission);
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    if (message.isPublisher !== false) {
      obj.isPublisher = message.isPublisher;
    }
    if (message.kind !== 0) {
      obj.kind = participantInfo_KindToJSON(message.kind);
    }
    if (message.attributes) {
      const entries = Object.entries(message.attributes);
      if (entries.length > 0) {
        obj.attributes = {};
        entries.forEach(([k, v]) => {
          obj.attributes[k] = v;
        });
      }
    }
    if (message.disconnectReason !== 0) {
      obj.disconnectReason = disconnectReasonToJSON(message.disconnectReason);
    }
    if (message.kindDetails?.length) {
      obj.kindDetails = message.kindDetails.map((e) => participantInfo_KindDetailToJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ParticipantInfo>): ParticipantInfo {
    return ParticipantInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ParticipantInfo>): ParticipantInfo {
    const message = createBaseParticipantInfo();
    message.sid = object.sid ?? "";
    message.identity = object.identity ?? "";
    message.state = object.state ?? 0;
    message.tracks = object.tracks?.map((e) => TrackInfo.fromPartial(e)) || [];
    message.metadata = object.metadata ?? "";
    message.joinedAt = object.joinedAt ?? "0";
    message.joinedAtMs = object.joinedAtMs ?? "0";
    message.name = object.name ?? "";
    message.version = object.version ?? 0;
    message.permission = (object.permission !== undefined && object.permission !== null)
      ? ParticipantPermission.fromPartial(object.permission)
      : undefined;
    message.region = object.region ?? "";
    message.isPublisher = object.isPublisher ?? false;
    message.kind = object.kind ?? 0;
    message.attributes = Object.entries(object.attributes ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    message.disconnectReason = object.disconnectReason ?? 0;
    message.kindDetails = object.kindDetails?.map((e) => e) || [];
    return message;
  },
};

function createBaseParticipantInfo_AttributesEntry(): ParticipantInfo_AttributesEntry {
  return { key: "", value: "" };
}

export const ParticipantInfo_AttributesEntry: MessageFns<ParticipantInfo_AttributesEntry> = {
  encode(message: ParticipantInfo_AttributesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParticipantInfo_AttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParticipantInfo_AttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParticipantInfo_AttributesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: ParticipantInfo_AttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<ParticipantInfo_AttributesEntry>): ParticipantInfo_AttributesEntry {
    return ParticipantInfo_AttributesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ParticipantInfo_AttributesEntry>): ParticipantInfo_AttributesEntry {
    const message = createBaseParticipantInfo_AttributesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseEncryption(): Encryption {
  return {};
}

export const Encryption: MessageFns<Encryption> = {
  encode(_: Encryption, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Encryption {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEncryption();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Encryption {
    return {};
  },

  toJSON(_: Encryption): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<Encryption>): Encryption {
    return Encryption.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<Encryption>): Encryption {
    const message = createBaseEncryption();
    return message;
  },
};

function createBaseSimulcastCodecInfo(): SimulcastCodecInfo {
  return { mimeType: "", mid: "", cid: "", layers: [] };
}

export const SimulcastCodecInfo: MessageFns<SimulcastCodecInfo> = {
  encode(message: SimulcastCodecInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.mimeType !== "") {
      writer.uint32(10).string(message.mimeType);
    }
    if (message.mid !== "") {
      writer.uint32(18).string(message.mid);
    }
    if (message.cid !== "") {
      writer.uint32(26).string(message.cid);
    }
    for (const v of message.layers) {
      VideoLayer.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SimulcastCodecInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSimulcastCodecInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.mimeType = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.mid = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.cid = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.layers.push(VideoLayer.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SimulcastCodecInfo {
    return {
      mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
      mid: isSet(object.mid) ? globalThis.String(object.mid) : "",
      cid: isSet(object.cid) ? globalThis.String(object.cid) : "",
      layers: globalThis.Array.isArray(object?.layers) ? object.layers.map((e: any) => VideoLayer.fromJSON(e)) : [],
    };
  },

  toJSON(message: SimulcastCodecInfo): unknown {
    const obj: any = {};
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    if (message.mid !== "") {
      obj.mid = message.mid;
    }
    if (message.cid !== "") {
      obj.cid = message.cid;
    }
    if (message.layers?.length) {
      obj.layers = message.layers.map((e) => VideoLayer.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<SimulcastCodecInfo>): SimulcastCodecInfo {
    return SimulcastCodecInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SimulcastCodecInfo>): SimulcastCodecInfo {
    const message = createBaseSimulcastCodecInfo();
    message.mimeType = object.mimeType ?? "";
    message.mid = object.mid ?? "";
    message.cid = object.cid ?? "";
    message.layers = object.layers?.map((e) => VideoLayer.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTrackInfo(): TrackInfo {
  return {
    sid: "",
    type: 0,
    name: "",
    muted: false,
    width: 0,
    height: 0,
    simulcast: false,
    disableDtx: false,
    source: 0,
    layers: [],
    mimeType: "",
    mid: "",
    codecs: [],
    stereo: false,
    disableRed: false,
    encryption: 0,
    stream: "",
    version: undefined,
    audioFeatures: [],
    backupCodecPolicy: 0,
  };
}

export const TrackInfo: MessageFns<TrackInfo> = {
  encode(message: TrackInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sid !== "") {
      writer.uint32(10).string(message.sid);
    }
    if (message.type !== 0) {
      writer.uint32(16).int32(message.type);
    }
    if (message.name !== "") {
      writer.uint32(26).string(message.name);
    }
    if (message.muted !== false) {
      writer.uint32(32).bool(message.muted);
    }
    if (message.width !== 0) {
      writer.uint32(40).uint32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(48).uint32(message.height);
    }
    if (message.simulcast !== false) {
      writer.uint32(56).bool(message.simulcast);
    }
    if (message.disableDtx !== false) {
      writer.uint32(64).bool(message.disableDtx);
    }
    if (message.source !== 0) {
      writer.uint32(72).int32(message.source);
    }
    for (const v of message.layers) {
      VideoLayer.encode(v!, writer.uint32(82).fork()).join();
    }
    if (message.mimeType !== "") {
      writer.uint32(90).string(message.mimeType);
    }
    if (message.mid !== "") {
      writer.uint32(98).string(message.mid);
    }
    for (const v of message.codecs) {
      SimulcastCodecInfo.encode(v!, writer.uint32(106).fork()).join();
    }
    if (message.stereo !== false) {
      writer.uint32(112).bool(message.stereo);
    }
    if (message.disableRed !== false) {
      writer.uint32(120).bool(message.disableRed);
    }
    if (message.encryption !== 0) {
      writer.uint32(128).int32(message.encryption);
    }
    if (message.stream !== "") {
      writer.uint32(138).string(message.stream);
    }
    if (message.version !== undefined) {
      TimedVersion.encode(message.version, writer.uint32(146).fork()).join();
    }
    writer.uint32(154).fork();
    for (const v of message.audioFeatures) {
      writer.int32(v);
    }
    writer.join();
    if (message.backupCodecPolicy !== 0) {
      writer.uint32(160).int32(message.backupCodecPolicy);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TrackInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTrackInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.type = reader.int32() as any;
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.muted = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.width = reader.uint32();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.height = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.simulcast = reader.bool();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.disableDtx = reader.bool();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.source = reader.int32() as any;
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.layers.push(VideoLayer.decode(reader, reader.uint32()));
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.mimeType = reader.string();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.mid = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.codecs.push(SimulcastCodecInfo.decode(reader, reader.uint32()));
          continue;
        }
        case 14: {
          if (tag !== 112) {
            break;
          }

          message.stereo = reader.bool();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.disableRed = reader.bool();
          continue;
        }
        case 16: {
          if (tag !== 128) {
            break;
          }

          message.encryption = reader.int32() as any;
          continue;
        }
        case 17: {
          if (tag !== 138) {
            break;
          }

          message.stream = reader.string();
          continue;
        }
        case 18: {
          if (tag !== 146) {
            break;
          }

          message.version = TimedVersion.decode(reader, reader.uint32());
          continue;
        }
        case 19: {
          if (tag === 152) {
            message.audioFeatures.push(reader.int32() as any);

            continue;
          }

          if (tag === 154) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.audioFeatures.push(reader.int32() as any);
            }

            continue;
          }

          break;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.backupCodecPolicy = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TrackInfo {
    return {
      sid: isSet(object.sid) ? globalThis.String(object.sid) : "",
      type: isSet(object.type) ? trackTypeFromJSON(object.type) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      muted: isSet(object.muted) ? globalThis.Boolean(object.muted) : false,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      simulcast: isSet(object.simulcast) ? globalThis.Boolean(object.simulcast) : false,
      disableDtx: isSet(object.disableDtx) ? globalThis.Boolean(object.disableDtx) : false,
      source: isSet(object.source) ? trackSourceFromJSON(object.source) : 0,
      layers: globalThis.Array.isArray(object?.layers) ? object.layers.map((e: any) => VideoLayer.fromJSON(e)) : [],
      mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
      mid: isSet(object.mid) ? globalThis.String(object.mid) : "",
      codecs: globalThis.Array.isArray(object?.codecs)
        ? object.codecs.map((e: any) => SimulcastCodecInfo.fromJSON(e))
        : [],
      stereo: isSet(object.stereo) ? globalThis.Boolean(object.stereo) : false,
      disableRed: isSet(object.disableRed) ? globalThis.Boolean(object.disableRed) : false,
      encryption: isSet(object.encryption) ? encryption_TypeFromJSON(object.encryption) : 0,
      stream: isSet(object.stream) ? globalThis.String(object.stream) : "",
      version: isSet(object.version) ? TimedVersion.fromJSON(object.version) : undefined,
      audioFeatures: globalThis.Array.isArray(object?.audioFeatures)
        ? object.audioFeatures.map((e: any) => audioTrackFeatureFromJSON(e))
        : [],
      backupCodecPolicy: isSet(object.backupCodecPolicy) ? backupCodecPolicyFromJSON(object.backupCodecPolicy) : 0,
    };
  },

  toJSON(message: TrackInfo): unknown {
    const obj: any = {};
    if (message.sid !== "") {
      obj.sid = message.sid;
    }
    if (message.type !== 0) {
      obj.type = trackTypeToJSON(message.type);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.muted !== false) {
      obj.muted = message.muted;
    }
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.simulcast !== false) {
      obj.simulcast = message.simulcast;
    }
    if (message.disableDtx !== false) {
      obj.disableDtx = message.disableDtx;
    }
    if (message.source !== 0) {
      obj.source = trackSourceToJSON(message.source);
    }
    if (message.layers?.length) {
      obj.layers = message.layers.map((e) => VideoLayer.toJSON(e));
    }
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    if (message.mid !== "") {
      obj.mid = message.mid;
    }
    if (message.codecs?.length) {
      obj.codecs = message.codecs.map((e) => SimulcastCodecInfo.toJSON(e));
    }
    if (message.stereo !== false) {
      obj.stereo = message.stereo;
    }
    if (message.disableRed !== false) {
      obj.disableRed = message.disableRed;
    }
    if (message.encryption !== 0) {
      obj.encryption = encryption_TypeToJSON(message.encryption);
    }
    if (message.stream !== "") {
      obj.stream = message.stream;
    }
    if (message.version !== undefined) {
      obj.version = TimedVersion.toJSON(message.version);
    }
    if (message.audioFeatures?.length) {
      obj.audioFeatures = message.audioFeatures.map((e) => audioTrackFeatureToJSON(e));
    }
    if (message.backupCodecPolicy !== 0) {
      obj.backupCodecPolicy = backupCodecPolicyToJSON(message.backupCodecPolicy);
    }
    return obj;
  },

  create(base?: DeepPartial<TrackInfo>): TrackInfo {
    return TrackInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TrackInfo>): TrackInfo {
    const message = createBaseTrackInfo();
    message.sid = object.sid ?? "";
    message.type = object.type ?? 0;
    message.name = object.name ?? "";
    message.muted = object.muted ?? false;
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    message.simulcast = object.simulcast ?? false;
    message.disableDtx = object.disableDtx ?? false;
    message.source = object.source ?? 0;
    message.layers = object.layers?.map((e) => VideoLayer.fromPartial(e)) || [];
    message.mimeType = object.mimeType ?? "";
    message.mid = object.mid ?? "";
    message.codecs = object.codecs?.map((e) => SimulcastCodecInfo.fromPartial(e)) || [];
    message.stereo = object.stereo ?? false;
    message.disableRed = object.disableRed ?? false;
    message.encryption = object.encryption ?? 0;
    message.stream = object.stream ?? "";
    message.version = (object.version !== undefined && object.version !== null)
      ? TimedVersion.fromPartial(object.version)
      : undefined;
    message.audioFeatures = object.audioFeatures?.map((e) => e) || [];
    message.backupCodecPolicy = object.backupCodecPolicy ?? 0;
    return message;
  },
};

function createBaseVideoLayer(): VideoLayer {
  return { quality: 0, width: 0, height: 0, bitrate: 0, ssrc: 0 };
}

export const VideoLayer: MessageFns<VideoLayer> = {
  encode(message: VideoLayer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.quality !== 0) {
      writer.uint32(8).int32(message.quality);
    }
    if (message.width !== 0) {
      writer.uint32(16).uint32(message.width);
    }
    if (message.height !== 0) {
      writer.uint32(24).uint32(message.height);
    }
    if (message.bitrate !== 0) {
      writer.uint32(32).uint32(message.bitrate);
    }
    if (message.ssrc !== 0) {
      writer.uint32(40).uint32(message.ssrc);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoLayer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoLayer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.quality = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.width = reader.uint32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.height = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.bitrate = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.ssrc = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VideoLayer {
    return {
      quality: isSet(object.quality) ? videoQualityFromJSON(object.quality) : 0,
      width: isSet(object.width) ? globalThis.Number(object.width) : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      bitrate: isSet(object.bitrate) ? globalThis.Number(object.bitrate) : 0,
      ssrc: isSet(object.ssrc) ? globalThis.Number(object.ssrc) : 0,
    };
  },

  toJSON(message: VideoLayer): unknown {
    const obj: any = {};
    if (message.quality !== 0) {
      obj.quality = videoQualityToJSON(message.quality);
    }
    if (message.width !== 0) {
      obj.width = Math.round(message.width);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.bitrate !== 0) {
      obj.bitrate = Math.round(message.bitrate);
    }
    if (message.ssrc !== 0) {
      obj.ssrc = Math.round(message.ssrc);
    }
    return obj;
  },

  create(base?: DeepPartial<VideoLayer>): VideoLayer {
    return VideoLayer.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VideoLayer>): VideoLayer {
    const message = createBaseVideoLayer();
    message.quality = object.quality ?? 0;
    message.width = object.width ?? 0;
    message.height = object.height ?? 0;
    message.bitrate = object.bitrate ?? 0;
    message.ssrc = object.ssrc ?? 0;
    return message;
  },
};

function createBaseDataPacket(): DataPacket {
  return { kind: 0, participantIdentity: "", destinationIdentities: [], value: undefined };
}

export const DataPacket: MessageFns<DataPacket> = {
  encode(message: DataPacket, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.kind !== 0) {
      writer.uint32(8).int32(message.kind);
    }
    if (message.participantIdentity !== "") {
      writer.uint32(34).string(message.participantIdentity);
    }
    for (const v of message.destinationIdentities) {
      writer.uint32(42).string(v!);
    }
    switch (message.value?.$case) {
      case "user":
        UserPacket.encode(message.value.user, writer.uint32(18).fork()).join();
        break;
      case "speaker":
        ActiveSpeakerUpdate.encode(message.value.speaker, writer.uint32(26).fork()).join();
        break;
      case "sipDtmf":
        SipDTMF.encode(message.value.sipDtmf, writer.uint32(50).fork()).join();
        break;
      case "transcription":
        Transcription.encode(message.value.transcription, writer.uint32(58).fork()).join();
        break;
      case "metrics":
        MetricsBatch.encode(message.value.metrics, writer.uint32(66).fork()).join();
        break;
      case "chatMessage":
        ChatMessage.encode(message.value.chatMessage, writer.uint32(74).fork()).join();
        break;
      case "rpcRequest":
        RpcRequest.encode(message.value.rpcRequest, writer.uint32(82).fork()).join();
        break;
      case "rpcAck":
        RpcAck.encode(message.value.rpcAck, writer.uint32(90).fork()).join();
        break;
      case "rpcResponse":
        RpcResponse.encode(message.value.rpcResponse, writer.uint32(98).fork()).join();
        break;
      case "streamHeader":
        DataStream_Header.encode(message.value.streamHeader, writer.uint32(106).fork()).join();
        break;
      case "streamChunk":
        DataStream_Chunk.encode(message.value.streamChunk, writer.uint32(114).fork()).join();
        break;
      case "streamTrailer":
        DataStream_Trailer.encode(message.value.streamTrailer, writer.uint32(122).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataPacket {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataPacket();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.kind = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.participantIdentity = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.destinationIdentities.push(reader.string());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = { $case: "user", user: UserPacket.decode(reader, reader.uint32()) };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.value = { $case: "speaker", speaker: ActiveSpeakerUpdate.decode(reader, reader.uint32()) };
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.value = { $case: "sipDtmf", sipDtmf: SipDTMF.decode(reader, reader.uint32()) };
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.value = { $case: "transcription", transcription: Transcription.decode(reader, reader.uint32()) };
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.value = { $case: "metrics", metrics: MetricsBatch.decode(reader, reader.uint32()) };
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.value = { $case: "chatMessage", chatMessage: ChatMessage.decode(reader, reader.uint32()) };
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.value = { $case: "rpcRequest", rpcRequest: RpcRequest.decode(reader, reader.uint32()) };
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.value = { $case: "rpcAck", rpcAck: RpcAck.decode(reader, reader.uint32()) };
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.value = { $case: "rpcResponse", rpcResponse: RpcResponse.decode(reader, reader.uint32()) };
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.value = { $case: "streamHeader", streamHeader: DataStream_Header.decode(reader, reader.uint32()) };
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.value = { $case: "streamChunk", streamChunk: DataStream_Chunk.decode(reader, reader.uint32()) };
          continue;
        }
        case 15: {
          if (tag !== 122) {
            break;
          }

          message.value = { $case: "streamTrailer", streamTrailer: DataStream_Trailer.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataPacket {
    return {
      kind: isSet(object.kind) ? dataPacket_KindFromJSON(object.kind) : 0,
      participantIdentity: isSet(object.participantIdentity) ? globalThis.String(object.participantIdentity) : "",
      destinationIdentities: globalThis.Array.isArray(object?.destinationIdentities)
        ? object.destinationIdentities.map((e: any) => globalThis.String(e))
        : [],
      value: isSet(object.user)
        ? { $case: "user", user: UserPacket.fromJSON(object.user) }
        : isSet(object.speaker)
        ? { $case: "speaker", speaker: ActiveSpeakerUpdate.fromJSON(object.speaker) }
        : isSet(object.sipDtmf)
        ? { $case: "sipDtmf", sipDtmf: SipDTMF.fromJSON(object.sipDtmf) }
        : isSet(object.transcription)
        ? { $case: "transcription", transcription: Transcription.fromJSON(object.transcription) }
        : isSet(object.metrics)
        ? { $case: "metrics", metrics: MetricsBatch.fromJSON(object.metrics) }
        : isSet(object.chatMessage)
        ? { $case: "chatMessage", chatMessage: ChatMessage.fromJSON(object.chatMessage) }
        : isSet(object.rpcRequest)
        ? { $case: "rpcRequest", rpcRequest: RpcRequest.fromJSON(object.rpcRequest) }
        : isSet(object.rpcAck)
        ? { $case: "rpcAck", rpcAck: RpcAck.fromJSON(object.rpcAck) }
        : isSet(object.rpcResponse)
        ? { $case: "rpcResponse", rpcResponse: RpcResponse.fromJSON(object.rpcResponse) }
        : isSet(object.streamHeader)
        ? { $case: "streamHeader", streamHeader: DataStream_Header.fromJSON(object.streamHeader) }
        : isSet(object.streamChunk)
        ? { $case: "streamChunk", streamChunk: DataStream_Chunk.fromJSON(object.streamChunk) }
        : isSet(object.streamTrailer)
        ? { $case: "streamTrailer", streamTrailer: DataStream_Trailer.fromJSON(object.streamTrailer) }
        : undefined,
    };
  },

  toJSON(message: DataPacket): unknown {
    const obj: any = {};
    if (message.kind !== 0) {
      obj.kind = dataPacket_KindToJSON(message.kind);
    }
    if (message.participantIdentity !== "") {
      obj.participantIdentity = message.participantIdentity;
    }
    if (message.destinationIdentities?.length) {
      obj.destinationIdentities = message.destinationIdentities;
    }
    if (message.value?.$case === "user") {
      obj.user = UserPacket.toJSON(message.value.user);
    } else if (message.value?.$case === "speaker") {
      obj.speaker = ActiveSpeakerUpdate.toJSON(message.value.speaker);
    } else if (message.value?.$case === "sipDtmf") {
      obj.sipDtmf = SipDTMF.toJSON(message.value.sipDtmf);
    } else if (message.value?.$case === "transcription") {
      obj.transcription = Transcription.toJSON(message.value.transcription);
    } else if (message.value?.$case === "metrics") {
      obj.metrics = MetricsBatch.toJSON(message.value.metrics);
    } else if (message.value?.$case === "chatMessage") {
      obj.chatMessage = ChatMessage.toJSON(message.value.chatMessage);
    } else if (message.value?.$case === "rpcRequest") {
      obj.rpcRequest = RpcRequest.toJSON(message.value.rpcRequest);
    } else if (message.value?.$case === "rpcAck") {
      obj.rpcAck = RpcAck.toJSON(message.value.rpcAck);
    } else if (message.value?.$case === "rpcResponse") {
      obj.rpcResponse = RpcResponse.toJSON(message.value.rpcResponse);
    } else if (message.value?.$case === "streamHeader") {
      obj.streamHeader = DataStream_Header.toJSON(message.value.streamHeader);
    } else if (message.value?.$case === "streamChunk") {
      obj.streamChunk = DataStream_Chunk.toJSON(message.value.streamChunk);
    } else if (message.value?.$case === "streamTrailer") {
      obj.streamTrailer = DataStream_Trailer.toJSON(message.value.streamTrailer);
    }
    return obj;
  },

  create(base?: DeepPartial<DataPacket>): DataPacket {
    return DataPacket.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataPacket>): DataPacket {
    const message = createBaseDataPacket();
    message.kind = object.kind ?? 0;
    message.participantIdentity = object.participantIdentity ?? "";
    message.destinationIdentities = object.destinationIdentities?.map((e) => e) || [];
    switch (object.value?.$case) {
      case "user": {
        if (object.value?.user !== undefined && object.value?.user !== null) {
          message.value = { $case: "user", user: UserPacket.fromPartial(object.value.user) };
        }
        break;
      }
      case "speaker": {
        if (object.value?.speaker !== undefined && object.value?.speaker !== null) {
          message.value = { $case: "speaker", speaker: ActiveSpeakerUpdate.fromPartial(object.value.speaker) };
        }
        break;
      }
      case "sipDtmf": {
        if (object.value?.sipDtmf !== undefined && object.value?.sipDtmf !== null) {
          message.value = { $case: "sipDtmf", sipDtmf: SipDTMF.fromPartial(object.value.sipDtmf) };
        }
        break;
      }
      case "transcription": {
        if (object.value?.transcription !== undefined && object.value?.transcription !== null) {
          message.value = {
            $case: "transcription",
            transcription: Transcription.fromPartial(object.value.transcription),
          };
        }
        break;
      }
      case "metrics": {
        if (object.value?.metrics !== undefined && object.value?.metrics !== null) {
          message.value = { $case: "metrics", metrics: MetricsBatch.fromPartial(object.value.metrics) };
        }
        break;
      }
      case "chatMessage": {
        if (object.value?.chatMessage !== undefined && object.value?.chatMessage !== null) {
          message.value = { $case: "chatMessage", chatMessage: ChatMessage.fromPartial(object.value.chatMessage) };
        }
        break;
      }
      case "rpcRequest": {
        if (object.value?.rpcRequest !== undefined && object.value?.rpcRequest !== null) {
          message.value = { $case: "rpcRequest", rpcRequest: RpcRequest.fromPartial(object.value.rpcRequest) };
        }
        break;
      }
      case "rpcAck": {
        if (object.value?.rpcAck !== undefined && object.value?.rpcAck !== null) {
          message.value = { $case: "rpcAck", rpcAck: RpcAck.fromPartial(object.value.rpcAck) };
        }
        break;
      }
      case "rpcResponse": {
        if (object.value?.rpcResponse !== undefined && object.value?.rpcResponse !== null) {
          message.value = { $case: "rpcResponse", rpcResponse: RpcResponse.fromPartial(object.value.rpcResponse) };
        }
        break;
      }
      case "streamHeader": {
        if (object.value?.streamHeader !== undefined && object.value?.streamHeader !== null) {
          message.value = {
            $case: "streamHeader",
            streamHeader: DataStream_Header.fromPartial(object.value.streamHeader),
          };
        }
        break;
      }
      case "streamChunk": {
        if (object.value?.streamChunk !== undefined && object.value?.streamChunk !== null) {
          message.value = { $case: "streamChunk", streamChunk: DataStream_Chunk.fromPartial(object.value.streamChunk) };
        }
        break;
      }
      case "streamTrailer": {
        if (object.value?.streamTrailer !== undefined && object.value?.streamTrailer !== null) {
          message.value = {
            $case: "streamTrailer",
            streamTrailer: DataStream_Trailer.fromPartial(object.value.streamTrailer),
          };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseActiveSpeakerUpdate(): ActiveSpeakerUpdate {
  return { speakers: [] };
}

export const ActiveSpeakerUpdate: MessageFns<ActiveSpeakerUpdate> = {
  encode(message: ActiveSpeakerUpdate, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.speakers) {
      SpeakerInfo.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ActiveSpeakerUpdate {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseActiveSpeakerUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.speakers.push(SpeakerInfo.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ActiveSpeakerUpdate {
    return {
      speakers: globalThis.Array.isArray(object?.speakers)
        ? object.speakers.map((e: any) => SpeakerInfo.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ActiveSpeakerUpdate): unknown {
    const obj: any = {};
    if (message.speakers?.length) {
      obj.speakers = message.speakers.map((e) => SpeakerInfo.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<ActiveSpeakerUpdate>): ActiveSpeakerUpdate {
    return ActiveSpeakerUpdate.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ActiveSpeakerUpdate>): ActiveSpeakerUpdate {
    const message = createBaseActiveSpeakerUpdate();
    message.speakers = object.speakers?.map((e) => SpeakerInfo.fromPartial(e)) || [];
    return message;
  },
};

function createBaseSpeakerInfo(): SpeakerInfo {
  return { sid: "", level: 0, active: false };
}

export const SpeakerInfo: MessageFns<SpeakerInfo> = {
  encode(message: SpeakerInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sid !== "") {
      writer.uint32(10).string(message.sid);
    }
    if (message.level !== 0) {
      writer.uint32(21).float(message.level);
    }
    if (message.active !== false) {
      writer.uint32(24).bool(message.active);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SpeakerInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSpeakerInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 21) {
            break;
          }

          message.level = reader.float();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.active = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SpeakerInfo {
    return {
      sid: isSet(object.sid) ? globalThis.String(object.sid) : "",
      level: isSet(object.level) ? globalThis.Number(object.level) : 0,
      active: isSet(object.active) ? globalThis.Boolean(object.active) : false,
    };
  },

  toJSON(message: SpeakerInfo): unknown {
    const obj: any = {};
    if (message.sid !== "") {
      obj.sid = message.sid;
    }
    if (message.level !== 0) {
      obj.level = message.level;
    }
    if (message.active !== false) {
      obj.active = message.active;
    }
    return obj;
  },

  create(base?: DeepPartial<SpeakerInfo>): SpeakerInfo {
    return SpeakerInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SpeakerInfo>): SpeakerInfo {
    const message = createBaseSpeakerInfo();
    message.sid = object.sid ?? "";
    message.level = object.level ?? 0;
    message.active = object.active ?? false;
    return message;
  },
};

function createBaseUserPacket(): UserPacket {
  return {
    participantSid: "",
    participantIdentity: "",
    payload: new Uint8Array(0),
    destinationSids: [],
    destinationIdentities: [],
    topic: undefined,
    id: undefined,
    startTime: undefined,
    endTime: undefined,
    nonce: new Uint8Array(0),
  };
}

export const UserPacket: MessageFns<UserPacket> = {
  encode(message: UserPacket, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.participantSid !== "") {
      writer.uint32(10).string(message.participantSid);
    }
    if (message.participantIdentity !== "") {
      writer.uint32(42).string(message.participantIdentity);
    }
    if (message.payload.length !== 0) {
      writer.uint32(18).bytes(message.payload);
    }
    for (const v of message.destinationSids) {
      writer.uint32(26).string(v!);
    }
    for (const v of message.destinationIdentities) {
      writer.uint32(50).string(v!);
    }
    if (message.topic !== undefined) {
      writer.uint32(34).string(message.topic);
    }
    if (message.id !== undefined) {
      writer.uint32(66).string(message.id);
    }
    if (message.startTime !== undefined) {
      writer.uint32(72).uint64(message.startTime);
    }
    if (message.endTime !== undefined) {
      writer.uint32(80).uint64(message.endTime);
    }
    if (message.nonce.length !== 0) {
      writer.uint32(90).bytes(message.nonce);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UserPacket {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserPacket();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.participantSid = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.participantIdentity = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.payload = reader.bytes();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.destinationSids.push(reader.string());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.destinationIdentities.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.topic = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.startTime = reader.uint64().toString();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.endTime = reader.uint64().toString();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.nonce = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UserPacket {
    return {
      participantSid: isSet(object.participantSid) ? globalThis.String(object.participantSid) : "",
      participantIdentity: isSet(object.participantIdentity) ? globalThis.String(object.participantIdentity) : "",
      payload: isSet(object.payload) ? bytesFromBase64(object.payload) : new Uint8Array(0),
      destinationSids: globalThis.Array.isArray(object?.destinationSids)
        ? object.destinationSids.map((e: any) => globalThis.String(e))
        : [],
      destinationIdentities: globalThis.Array.isArray(object?.destinationIdentities)
        ? object.destinationIdentities.map((e: any) => globalThis.String(e))
        : [],
      topic: isSet(object.topic) ? globalThis.String(object.topic) : undefined,
      id: isSet(object.id) ? globalThis.String(object.id) : undefined,
      startTime: isSet(object.startTime) ? globalThis.String(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? globalThis.String(object.endTime) : undefined,
      nonce: isSet(object.nonce) ? bytesFromBase64(object.nonce) : new Uint8Array(0),
    };
  },

  toJSON(message: UserPacket): unknown {
    const obj: any = {};
    if (message.participantSid !== "") {
      obj.participantSid = message.participantSid;
    }
    if (message.participantIdentity !== "") {
      obj.participantIdentity = message.participantIdentity;
    }
    if (message.payload.length !== 0) {
      obj.payload = base64FromBytes(message.payload);
    }
    if (message.destinationSids?.length) {
      obj.destinationSids = message.destinationSids;
    }
    if (message.destinationIdentities?.length) {
      obj.destinationIdentities = message.destinationIdentities;
    }
    if (message.topic !== undefined) {
      obj.topic = message.topic;
    }
    if (message.id !== undefined) {
      obj.id = message.id;
    }
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime;
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime;
    }
    if (message.nonce.length !== 0) {
      obj.nonce = base64FromBytes(message.nonce);
    }
    return obj;
  },

  create(base?: DeepPartial<UserPacket>): UserPacket {
    return UserPacket.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<UserPacket>): UserPacket {
    const message = createBaseUserPacket();
    message.participantSid = object.participantSid ?? "";
    message.participantIdentity = object.participantIdentity ?? "";
    message.payload = object.payload ?? new Uint8Array(0);
    message.destinationSids = object.destinationSids?.map((e) => e) || [];
    message.destinationIdentities = object.destinationIdentities?.map((e) => e) || [];
    message.topic = object.topic ?? undefined;
    message.id = object.id ?? undefined;
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.nonce = object.nonce ?? new Uint8Array(0);
    return message;
  },
};

function createBaseSipDTMF(): SipDTMF {
  return { code: 0, digit: "" };
}

export const SipDTMF: MessageFns<SipDTMF> = {
  encode(message: SipDTMF, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(24).uint32(message.code);
    }
    if (message.digit !== "") {
      writer.uint32(34).string(message.digit);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SipDTMF {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSipDTMF();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.code = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.digit = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): SipDTMF {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      digit: isSet(object.digit) ? globalThis.String(object.digit) : "",
    };
  },

  toJSON(message: SipDTMF): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.digit !== "") {
      obj.digit = message.digit;
    }
    return obj;
  },

  create(base?: DeepPartial<SipDTMF>): SipDTMF {
    return SipDTMF.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SipDTMF>): SipDTMF {
    const message = createBaseSipDTMF();
    message.code = object.code ?? 0;
    message.digit = object.digit ?? "";
    return message;
  },
};

function createBaseTranscription(): Transcription {
  return { transcribedParticipantIdentity: "", trackId: "", segments: [] };
}

export const Transcription: MessageFns<Transcription> = {
  encode(message: Transcription, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.transcribedParticipantIdentity !== "") {
      writer.uint32(18).string(message.transcribedParticipantIdentity);
    }
    if (message.trackId !== "") {
      writer.uint32(26).string(message.trackId);
    }
    for (const v of message.segments) {
      TranscriptionSegment.encode(v!, writer.uint32(34).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Transcription {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranscription();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.transcribedParticipantIdentity = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.trackId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.segments.push(TranscriptionSegment.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Transcription {
    return {
      transcribedParticipantIdentity: isSet(object.transcribedParticipantIdentity)
        ? globalThis.String(object.transcribedParticipantIdentity)
        : "",
      trackId: isSet(object.trackId) ? globalThis.String(object.trackId) : "",
      segments: globalThis.Array.isArray(object?.segments)
        ? object.segments.map((e: any) => TranscriptionSegment.fromJSON(e))
        : [],
    };
  },

  toJSON(message: Transcription): unknown {
    const obj: any = {};
    if (message.transcribedParticipantIdentity !== "") {
      obj.transcribedParticipantIdentity = message.transcribedParticipantIdentity;
    }
    if (message.trackId !== "") {
      obj.trackId = message.trackId;
    }
    if (message.segments?.length) {
      obj.segments = message.segments.map((e) => TranscriptionSegment.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<Transcription>): Transcription {
    return Transcription.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Transcription>): Transcription {
    const message = createBaseTranscription();
    message.transcribedParticipantIdentity = object.transcribedParticipantIdentity ?? "";
    message.trackId = object.trackId ?? "";
    message.segments = object.segments?.map((e) => TranscriptionSegment.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTranscriptionSegment(): TranscriptionSegment {
  return { id: "", text: "", startTime: "0", endTime: "0", final: false, language: "" };
}

export const TranscriptionSegment: MessageFns<TranscriptionSegment> = {
  encode(message: TranscriptionSegment, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.text !== "") {
      writer.uint32(18).string(message.text);
    }
    if (message.startTime !== "0") {
      writer.uint32(24).uint64(message.startTime);
    }
    if (message.endTime !== "0") {
      writer.uint32(32).uint64(message.endTime);
    }
    if (message.final !== false) {
      writer.uint32(40).bool(message.final);
    }
    if (message.language !== "") {
      writer.uint32(50).string(message.language);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TranscriptionSegment {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTranscriptionSegment();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.text = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.startTime = reader.uint64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.endTime = reader.uint64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.final = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.language = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TranscriptionSegment {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      text: isSet(object.text) ? globalThis.String(object.text) : "",
      startTime: isSet(object.startTime) ? globalThis.String(object.startTime) : "0",
      endTime: isSet(object.endTime) ? globalThis.String(object.endTime) : "0",
      final: isSet(object.final) ? globalThis.Boolean(object.final) : false,
      language: isSet(object.language) ? globalThis.String(object.language) : "",
    };
  },

  toJSON(message: TranscriptionSegment): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.text !== "") {
      obj.text = message.text;
    }
    if (message.startTime !== "0") {
      obj.startTime = message.startTime;
    }
    if (message.endTime !== "0") {
      obj.endTime = message.endTime;
    }
    if (message.final !== false) {
      obj.final = message.final;
    }
    if (message.language !== "") {
      obj.language = message.language;
    }
    return obj;
  },

  create(base?: DeepPartial<TranscriptionSegment>): TranscriptionSegment {
    return TranscriptionSegment.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TranscriptionSegment>): TranscriptionSegment {
    const message = createBaseTranscriptionSegment();
    message.id = object.id ?? "";
    message.text = object.text ?? "";
    message.startTime = object.startTime ?? "0";
    message.endTime = object.endTime ?? "0";
    message.final = object.final ?? false;
    message.language = object.language ?? "";
    return message;
  },
};

function createBaseChatMessage(): ChatMessage {
  return { id: "", timestamp: "0", editTimestamp: undefined, message: "", deleted: false, generated: false };
}

export const ChatMessage: MessageFns<ChatMessage> = {
  encode(message: ChatMessage, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.timestamp !== "0") {
      writer.uint32(16).int64(message.timestamp);
    }
    if (message.editTimestamp !== undefined) {
      writer.uint32(24).int64(message.editTimestamp);
    }
    if (message.message !== "") {
      writer.uint32(34).string(message.message);
    }
    if (message.deleted !== false) {
      writer.uint32(40).bool(message.deleted);
    }
    if (message.generated !== false) {
      writer.uint32(48).bool(message.generated);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ChatMessage {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseChatMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timestamp = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.editTimestamp = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.deleted = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.generated = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ChatMessage {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "0",
      editTimestamp: isSet(object.editTimestamp) ? globalThis.String(object.editTimestamp) : undefined,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      deleted: isSet(object.deleted) ? globalThis.Boolean(object.deleted) : false,
      generated: isSet(object.generated) ? globalThis.Boolean(object.generated) : false,
    };
  },

  toJSON(message: ChatMessage): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.timestamp !== "0") {
      obj.timestamp = message.timestamp;
    }
    if (message.editTimestamp !== undefined) {
      obj.editTimestamp = message.editTimestamp;
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.deleted !== false) {
      obj.deleted = message.deleted;
    }
    if (message.generated !== false) {
      obj.generated = message.generated;
    }
    return obj;
  },

  create(base?: DeepPartial<ChatMessage>): ChatMessage {
    return ChatMessage.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ChatMessage>): ChatMessage {
    const message = createBaseChatMessage();
    message.id = object.id ?? "";
    message.timestamp = object.timestamp ?? "0";
    message.editTimestamp = object.editTimestamp ?? undefined;
    message.message = object.message ?? "";
    message.deleted = object.deleted ?? false;
    message.generated = object.generated ?? false;
    return message;
  },
};

function createBaseRpcRequest(): RpcRequest {
  return { id: "", method: "", payload: "", responseTimeoutMs: 0, version: 0 };
}

export const RpcRequest: MessageFns<RpcRequest> = {
  encode(message: RpcRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== "") {
      writer.uint32(10).string(message.id);
    }
    if (message.method !== "") {
      writer.uint32(18).string(message.method);
    }
    if (message.payload !== "") {
      writer.uint32(26).string(message.payload);
    }
    if (message.responseTimeoutMs !== 0) {
      writer.uint32(32).uint32(message.responseTimeoutMs);
    }
    if (message.version !== 0) {
      writer.uint32(40).uint32(message.version);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RpcRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRpcRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.id = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.method = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.payload = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.responseTimeoutMs = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.version = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RpcRequest {
    return {
      id: isSet(object.id) ? globalThis.String(object.id) : "",
      method: isSet(object.method) ? globalThis.String(object.method) : "",
      payload: isSet(object.payload) ? globalThis.String(object.payload) : "",
      responseTimeoutMs: isSet(object.responseTimeoutMs) ? globalThis.Number(object.responseTimeoutMs) : 0,
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
    };
  },

  toJSON(message: RpcRequest): unknown {
    const obj: any = {};
    if (message.id !== "") {
      obj.id = message.id;
    }
    if (message.method !== "") {
      obj.method = message.method;
    }
    if (message.payload !== "") {
      obj.payload = message.payload;
    }
    if (message.responseTimeoutMs !== 0) {
      obj.responseTimeoutMs = Math.round(message.responseTimeoutMs);
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    return obj;
  },

  create(base?: DeepPartial<RpcRequest>): RpcRequest {
    return RpcRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RpcRequest>): RpcRequest {
    const message = createBaseRpcRequest();
    message.id = object.id ?? "";
    message.method = object.method ?? "";
    message.payload = object.payload ?? "";
    message.responseTimeoutMs = object.responseTimeoutMs ?? 0;
    message.version = object.version ?? 0;
    return message;
  },
};

function createBaseRpcAck(): RpcAck {
  return { requestId: "" };
}

export const RpcAck: MessageFns<RpcAck> = {
  encode(message: RpcAck, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RpcAck {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRpcAck();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RpcAck {
    return { requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "" };
  },

  toJSON(message: RpcAck): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    return obj;
  },

  create(base?: DeepPartial<RpcAck>): RpcAck {
    return RpcAck.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RpcAck>): RpcAck {
    const message = createBaseRpcAck();
    message.requestId = object.requestId ?? "";
    return message;
  },
};

function createBaseRpcResponse(): RpcResponse {
  return { requestId: "", value: undefined };
}

export const RpcResponse: MessageFns<RpcResponse> = {
  encode(message: RpcResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.requestId !== "") {
      writer.uint32(10).string(message.requestId);
    }
    switch (message.value?.$case) {
      case "payload":
        writer.uint32(18).string(message.value.payload);
        break;
      case "error":
        RpcError.encode(message.value.error, writer.uint32(26).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RpcResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRpcResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.requestId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = { $case: "payload", payload: reader.string() };
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.value = { $case: "error", error: RpcError.decode(reader, reader.uint32()) };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RpcResponse {
    return {
      requestId: isSet(object.requestId) ? globalThis.String(object.requestId) : "",
      value: isSet(object.payload)
        ? { $case: "payload", payload: globalThis.String(object.payload) }
        : isSet(object.error)
        ? { $case: "error", error: RpcError.fromJSON(object.error) }
        : undefined,
    };
  },

  toJSON(message: RpcResponse): unknown {
    const obj: any = {};
    if (message.requestId !== "") {
      obj.requestId = message.requestId;
    }
    if (message.value?.$case === "payload") {
      obj.payload = message.value.payload;
    } else if (message.value?.$case === "error") {
      obj.error = RpcError.toJSON(message.value.error);
    }
    return obj;
  },

  create(base?: DeepPartial<RpcResponse>): RpcResponse {
    return RpcResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RpcResponse>): RpcResponse {
    const message = createBaseRpcResponse();
    message.requestId = object.requestId ?? "";
    switch (object.value?.$case) {
      case "payload": {
        if (object.value?.payload !== undefined && object.value?.payload !== null) {
          message.value = { $case: "payload", payload: object.value.payload };
        }
        break;
      }
      case "error": {
        if (object.value?.error !== undefined && object.value?.error !== null) {
          message.value = { $case: "error", error: RpcError.fromPartial(object.value.error) };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseRpcError(): RpcError {
  return { code: 0, message: "", data: "" };
}

export const RpcError: MessageFns<RpcError> = {
  encode(message: RpcError, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.code !== 0) {
      writer.uint32(8).uint32(message.code);
    }
    if (message.message !== "") {
      writer.uint32(18).string(message.message);
    }
    if (message.data !== "") {
      writer.uint32(26).string(message.data);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RpcError {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRpcError();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.code = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RpcError {
    return {
      code: isSet(object.code) ? globalThis.Number(object.code) : 0,
      message: isSet(object.message) ? globalThis.String(object.message) : "",
      data: isSet(object.data) ? globalThis.String(object.data) : "",
    };
  },

  toJSON(message: RpcError): unknown {
    const obj: any = {};
    if (message.code !== 0) {
      obj.code = Math.round(message.code);
    }
    if (message.message !== "") {
      obj.message = message.message;
    }
    if (message.data !== "") {
      obj.data = message.data;
    }
    return obj;
  },

  create(base?: DeepPartial<RpcError>): RpcError {
    return RpcError.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RpcError>): RpcError {
    const message = createBaseRpcError();
    message.code = object.code ?? 0;
    message.message = object.message ?? "";
    message.data = object.data ?? "";
    return message;
  },
};

function createBaseParticipantTracks(): ParticipantTracks {
  return { participantSid: "", trackSids: [] };
}

export const ParticipantTracks: MessageFns<ParticipantTracks> = {
  encode(message: ParticipantTracks, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.participantSid !== "") {
      writer.uint32(10).string(message.participantSid);
    }
    for (const v of message.trackSids) {
      writer.uint32(18).string(v!);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ParticipantTracks {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParticipantTracks();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.participantSid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.trackSids.push(reader.string());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ParticipantTracks {
    return {
      participantSid: isSet(object.participantSid) ? globalThis.String(object.participantSid) : "",
      trackSids: globalThis.Array.isArray(object?.trackSids)
        ? object.trackSids.map((e: any) => globalThis.String(e))
        : [],
    };
  },

  toJSON(message: ParticipantTracks): unknown {
    const obj: any = {};
    if (message.participantSid !== "") {
      obj.participantSid = message.participantSid;
    }
    if (message.trackSids?.length) {
      obj.trackSids = message.trackSids;
    }
    return obj;
  },

  create(base?: DeepPartial<ParticipantTracks>): ParticipantTracks {
    return ParticipantTracks.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ParticipantTracks>): ParticipantTracks {
    const message = createBaseParticipantTracks();
    message.participantSid = object.participantSid ?? "";
    message.trackSids = object.trackSids?.map((e) => e) || [];
    return message;
  },
};

function createBaseServerInfo(): ServerInfo {
  return { edition: 0, version: "", protocol: 0, region: "", nodeId: "", debugInfo: "", agentProtocol: 0 };
}

export const ServerInfo: MessageFns<ServerInfo> = {
  encode(message: ServerInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.edition !== 0) {
      writer.uint32(8).int32(message.edition);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    if (message.protocol !== 0) {
      writer.uint32(24).int32(message.protocol);
    }
    if (message.region !== "") {
      writer.uint32(34).string(message.region);
    }
    if (message.nodeId !== "") {
      writer.uint32(42).string(message.nodeId);
    }
    if (message.debugInfo !== "") {
      writer.uint32(50).string(message.debugInfo);
    }
    if (message.agentProtocol !== 0) {
      writer.uint32(56).int32(message.agentProtocol);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ServerInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseServerInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.edition = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.protocol = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.region = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.nodeId = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.debugInfo = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.agentProtocol = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ServerInfo {
    return {
      edition: isSet(object.edition) ? serverInfo_EditionFromJSON(object.edition) : 0,
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      protocol: isSet(object.protocol) ? globalThis.Number(object.protocol) : 0,
      region: isSet(object.region) ? globalThis.String(object.region) : "",
      nodeId: isSet(object.nodeId) ? globalThis.String(object.nodeId) : "",
      debugInfo: isSet(object.debugInfo) ? globalThis.String(object.debugInfo) : "",
      agentProtocol: isSet(object.agentProtocol) ? globalThis.Number(object.agentProtocol) : 0,
    };
  },

  toJSON(message: ServerInfo): unknown {
    const obj: any = {};
    if (message.edition !== 0) {
      obj.edition = serverInfo_EditionToJSON(message.edition);
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.protocol !== 0) {
      obj.protocol = Math.round(message.protocol);
    }
    if (message.region !== "") {
      obj.region = message.region;
    }
    if (message.nodeId !== "") {
      obj.nodeId = message.nodeId;
    }
    if (message.debugInfo !== "") {
      obj.debugInfo = message.debugInfo;
    }
    if (message.agentProtocol !== 0) {
      obj.agentProtocol = Math.round(message.agentProtocol);
    }
    return obj;
  },

  create(base?: DeepPartial<ServerInfo>): ServerInfo {
    return ServerInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ServerInfo>): ServerInfo {
    const message = createBaseServerInfo();
    message.edition = object.edition ?? 0;
    message.version = object.version ?? "";
    message.protocol = object.protocol ?? 0;
    message.region = object.region ?? "";
    message.nodeId = object.nodeId ?? "";
    message.debugInfo = object.debugInfo ?? "";
    message.agentProtocol = object.agentProtocol ?? 0;
    return message;
  },
};

function createBaseClientInfo(): ClientInfo {
  return {
    sdk: 0,
    version: "",
    protocol: 0,
    os: "",
    osVersion: "",
    deviceModel: "",
    browser: "",
    browserVersion: "",
    address: "",
    network: "",
    otherSdks: "",
  };
}

export const ClientInfo: MessageFns<ClientInfo> = {
  encode(message: ClientInfo, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sdk !== 0) {
      writer.uint32(8).int32(message.sdk);
    }
    if (message.version !== "") {
      writer.uint32(18).string(message.version);
    }
    if (message.protocol !== 0) {
      writer.uint32(24).int32(message.protocol);
    }
    if (message.os !== "") {
      writer.uint32(34).string(message.os);
    }
    if (message.osVersion !== "") {
      writer.uint32(42).string(message.osVersion);
    }
    if (message.deviceModel !== "") {
      writer.uint32(50).string(message.deviceModel);
    }
    if (message.browser !== "") {
      writer.uint32(58).string(message.browser);
    }
    if (message.browserVersion !== "") {
      writer.uint32(66).string(message.browserVersion);
    }
    if (message.address !== "") {
      writer.uint32(74).string(message.address);
    }
    if (message.network !== "") {
      writer.uint32(82).string(message.network);
    }
    if (message.otherSdks !== "") {
      writer.uint32(90).string(message.otherSdks);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientInfo {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.sdk = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.version = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.protocol = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.os = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.osVersion = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.deviceModel = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.browser = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.browserVersion = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.address = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.network = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 90) {
            break;
          }

          message.otherSdks = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientInfo {
    return {
      sdk: isSet(object.sdk) ? clientInfo_SDKFromJSON(object.sdk) : 0,
      version: isSet(object.version) ? globalThis.String(object.version) : "",
      protocol: isSet(object.protocol) ? globalThis.Number(object.protocol) : 0,
      os: isSet(object.os) ? globalThis.String(object.os) : "",
      osVersion: isSet(object.osVersion) ? globalThis.String(object.osVersion) : "",
      deviceModel: isSet(object.deviceModel) ? globalThis.String(object.deviceModel) : "",
      browser: isSet(object.browser) ? globalThis.String(object.browser) : "",
      browserVersion: isSet(object.browserVersion) ? globalThis.String(object.browserVersion) : "",
      address: isSet(object.address) ? globalThis.String(object.address) : "",
      network: isSet(object.network) ? globalThis.String(object.network) : "",
      otherSdks: isSet(object.otherSdks) ? globalThis.String(object.otherSdks) : "",
    };
  },

  toJSON(message: ClientInfo): unknown {
    const obj: any = {};
    if (message.sdk !== 0) {
      obj.sdk = clientInfo_SDKToJSON(message.sdk);
    }
    if (message.version !== "") {
      obj.version = message.version;
    }
    if (message.protocol !== 0) {
      obj.protocol = Math.round(message.protocol);
    }
    if (message.os !== "") {
      obj.os = message.os;
    }
    if (message.osVersion !== "") {
      obj.osVersion = message.osVersion;
    }
    if (message.deviceModel !== "") {
      obj.deviceModel = message.deviceModel;
    }
    if (message.browser !== "") {
      obj.browser = message.browser;
    }
    if (message.browserVersion !== "") {
      obj.browserVersion = message.browserVersion;
    }
    if (message.address !== "") {
      obj.address = message.address;
    }
    if (message.network !== "") {
      obj.network = message.network;
    }
    if (message.otherSdks !== "") {
      obj.otherSdks = message.otherSdks;
    }
    return obj;
  },

  create(base?: DeepPartial<ClientInfo>): ClientInfo {
    return ClientInfo.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ClientInfo>): ClientInfo {
    const message = createBaseClientInfo();
    message.sdk = object.sdk ?? 0;
    message.version = object.version ?? "";
    message.protocol = object.protocol ?? 0;
    message.os = object.os ?? "";
    message.osVersion = object.osVersion ?? "";
    message.deviceModel = object.deviceModel ?? "";
    message.browser = object.browser ?? "";
    message.browserVersion = object.browserVersion ?? "";
    message.address = object.address ?? "";
    message.network = object.network ?? "";
    message.otherSdks = object.otherSdks ?? "";
    return message;
  },
};

function createBaseClientConfiguration(): ClientConfiguration {
  return { video: undefined, screen: undefined, resumeConnection: 0, disabledCodecs: undefined, forceRelay: 0 };
}

export const ClientConfiguration: MessageFns<ClientConfiguration> = {
  encode(message: ClientConfiguration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.video !== undefined) {
      VideoConfiguration.encode(message.video, writer.uint32(10).fork()).join();
    }
    if (message.screen !== undefined) {
      VideoConfiguration.encode(message.screen, writer.uint32(18).fork()).join();
    }
    if (message.resumeConnection !== 0) {
      writer.uint32(24).int32(message.resumeConnection);
    }
    if (message.disabledCodecs !== undefined) {
      DisabledCodecs.encode(message.disabledCodecs, writer.uint32(34).fork()).join();
    }
    if (message.forceRelay !== 0) {
      writer.uint32(40).int32(message.forceRelay);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ClientConfiguration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseClientConfiguration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.video = VideoConfiguration.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.screen = VideoConfiguration.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.resumeConnection = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.disabledCodecs = DisabledCodecs.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.forceRelay = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ClientConfiguration {
    return {
      video: isSet(object.video) ? VideoConfiguration.fromJSON(object.video) : undefined,
      screen: isSet(object.screen) ? VideoConfiguration.fromJSON(object.screen) : undefined,
      resumeConnection: isSet(object.resumeConnection) ? clientConfigSettingFromJSON(object.resumeConnection) : 0,
      disabledCodecs: isSet(object.disabledCodecs) ? DisabledCodecs.fromJSON(object.disabledCodecs) : undefined,
      forceRelay: isSet(object.forceRelay) ? clientConfigSettingFromJSON(object.forceRelay) : 0,
    };
  },

  toJSON(message: ClientConfiguration): unknown {
    const obj: any = {};
    if (message.video !== undefined) {
      obj.video = VideoConfiguration.toJSON(message.video);
    }
    if (message.screen !== undefined) {
      obj.screen = VideoConfiguration.toJSON(message.screen);
    }
    if (message.resumeConnection !== 0) {
      obj.resumeConnection = clientConfigSettingToJSON(message.resumeConnection);
    }
    if (message.disabledCodecs !== undefined) {
      obj.disabledCodecs = DisabledCodecs.toJSON(message.disabledCodecs);
    }
    if (message.forceRelay !== 0) {
      obj.forceRelay = clientConfigSettingToJSON(message.forceRelay);
    }
    return obj;
  },

  create(base?: DeepPartial<ClientConfiguration>): ClientConfiguration {
    return ClientConfiguration.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ClientConfiguration>): ClientConfiguration {
    const message = createBaseClientConfiguration();
    message.video = (object.video !== undefined && object.video !== null)
      ? VideoConfiguration.fromPartial(object.video)
      : undefined;
    message.screen = (object.screen !== undefined && object.screen !== null)
      ? VideoConfiguration.fromPartial(object.screen)
      : undefined;
    message.resumeConnection = object.resumeConnection ?? 0;
    message.disabledCodecs = (object.disabledCodecs !== undefined && object.disabledCodecs !== null)
      ? DisabledCodecs.fromPartial(object.disabledCodecs)
      : undefined;
    message.forceRelay = object.forceRelay ?? 0;
    return message;
  },
};

function createBaseVideoConfiguration(): VideoConfiguration {
  return { hardwareEncoder: 0 };
}

export const VideoConfiguration: MessageFns<VideoConfiguration> = {
  encode(message: VideoConfiguration, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.hardwareEncoder !== 0) {
      writer.uint32(8).int32(message.hardwareEncoder);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VideoConfiguration {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVideoConfiguration();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.hardwareEncoder = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VideoConfiguration {
    return { hardwareEncoder: isSet(object.hardwareEncoder) ? clientConfigSettingFromJSON(object.hardwareEncoder) : 0 };
  },

  toJSON(message: VideoConfiguration): unknown {
    const obj: any = {};
    if (message.hardwareEncoder !== 0) {
      obj.hardwareEncoder = clientConfigSettingToJSON(message.hardwareEncoder);
    }
    return obj;
  },

  create(base?: DeepPartial<VideoConfiguration>): VideoConfiguration {
    return VideoConfiguration.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VideoConfiguration>): VideoConfiguration {
    const message = createBaseVideoConfiguration();
    message.hardwareEncoder = object.hardwareEncoder ?? 0;
    return message;
  },
};

function createBaseDisabledCodecs(): DisabledCodecs {
  return { codecs: [], publish: [] };
}

export const DisabledCodecs: MessageFns<DisabledCodecs> = {
  encode(message: DisabledCodecs, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.codecs) {
      Codec.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.publish) {
      Codec.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DisabledCodecs {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDisabledCodecs();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.codecs.push(Codec.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.publish.push(Codec.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DisabledCodecs {
    return {
      codecs: globalThis.Array.isArray(object?.codecs) ? object.codecs.map((e: any) => Codec.fromJSON(e)) : [],
      publish: globalThis.Array.isArray(object?.publish) ? object.publish.map((e: any) => Codec.fromJSON(e)) : [],
    };
  },

  toJSON(message: DisabledCodecs): unknown {
    const obj: any = {};
    if (message.codecs?.length) {
      obj.codecs = message.codecs.map((e) => Codec.toJSON(e));
    }
    if (message.publish?.length) {
      obj.publish = message.publish.map((e) => Codec.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<DisabledCodecs>): DisabledCodecs {
    return DisabledCodecs.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DisabledCodecs>): DisabledCodecs {
    const message = createBaseDisabledCodecs();
    message.codecs = object.codecs?.map((e) => Codec.fromPartial(e)) || [];
    message.publish = object.publish?.map((e) => Codec.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRTPDrift(): RTPDrift {
  return {
    startTime: undefined,
    endTime: undefined,
    duration: 0,
    startTimestamp: "0",
    endTimestamp: "0",
    rtpClockTicks: "0",
    driftSamples: "0",
    driftMs: 0,
    clockRate: 0,
  };
}

export const RTPDrift: MessageFns<RTPDrift> = {
  encode(message: RTPDrift, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.duration !== 0) {
      writer.uint32(25).double(message.duration);
    }
    if (message.startTimestamp !== "0") {
      writer.uint32(32).uint64(message.startTimestamp);
    }
    if (message.endTimestamp !== "0") {
      writer.uint32(40).uint64(message.endTimestamp);
    }
    if (message.rtpClockTicks !== "0") {
      writer.uint32(48).uint64(message.rtpClockTicks);
    }
    if (message.driftSamples !== "0") {
      writer.uint32(56).int64(message.driftSamples);
    }
    if (message.driftMs !== 0) {
      writer.uint32(65).double(message.driftMs);
    }
    if (message.clockRate !== 0) {
      writer.uint32(73).double(message.clockRate);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RTPDrift {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRTPDrift();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.duration = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.startTimestamp = reader.uint64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.endTimestamp = reader.uint64().toString();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.rtpClockTicks = reader.uint64().toString();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.driftSamples = reader.int64().toString();
          continue;
        }
        case 8: {
          if (tag !== 65) {
            break;
          }

          message.driftMs = reader.double();
          continue;
        }
        case 9: {
          if (tag !== 73) {
            break;
          }

          message.clockRate = reader.double();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RTPDrift {
    return {
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : 0,
      startTimestamp: isSet(object.startTimestamp) ? globalThis.String(object.startTimestamp) : "0",
      endTimestamp: isSet(object.endTimestamp) ? globalThis.String(object.endTimestamp) : "0",
      rtpClockTicks: isSet(object.rtpClockTicks) ? globalThis.String(object.rtpClockTicks) : "0",
      driftSamples: isSet(object.driftSamples) ? globalThis.String(object.driftSamples) : "0",
      driftMs: isSet(object.driftMs) ? globalThis.Number(object.driftMs) : 0,
      clockRate: isSet(object.clockRate) ? globalThis.Number(object.clockRate) : 0,
    };
  },

  toJSON(message: RTPDrift): unknown {
    const obj: any = {};
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.duration !== 0) {
      obj.duration = message.duration;
    }
    if (message.startTimestamp !== "0") {
      obj.startTimestamp = message.startTimestamp;
    }
    if (message.endTimestamp !== "0") {
      obj.endTimestamp = message.endTimestamp;
    }
    if (message.rtpClockTicks !== "0") {
      obj.rtpClockTicks = message.rtpClockTicks;
    }
    if (message.driftSamples !== "0") {
      obj.driftSamples = message.driftSamples;
    }
    if (message.driftMs !== 0) {
      obj.driftMs = message.driftMs;
    }
    if (message.clockRate !== 0) {
      obj.clockRate = message.clockRate;
    }
    return obj;
  },

  create(base?: DeepPartial<RTPDrift>): RTPDrift {
    return RTPDrift.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RTPDrift>): RTPDrift {
    const message = createBaseRTPDrift();
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.duration = object.duration ?? 0;
    message.startTimestamp = object.startTimestamp ?? "0";
    message.endTimestamp = object.endTimestamp ?? "0";
    message.rtpClockTicks = object.rtpClockTicks ?? "0";
    message.driftSamples = object.driftSamples ?? "0";
    message.driftMs = object.driftMs ?? 0;
    message.clockRate = object.clockRate ?? 0;
    return message;
  },
};

function createBaseRTPStats(): RTPStats {
  return {
    startTime: undefined,
    endTime: undefined,
    duration: 0,
    packets: 0,
    packetRate: 0,
    bytes: "0",
    headerBytes: "0",
    bitrate: 0,
    packetsLost: 0,
    packetLossRate: 0,
    packetLossPercentage: 0,
    packetsDuplicate: 0,
    packetDuplicateRate: 0,
    bytesDuplicate: "0",
    headerBytesDuplicate: "0",
    bitrateDuplicate: 0,
    packetsPadding: 0,
    packetPaddingRate: 0,
    bytesPadding: "0",
    headerBytesPadding: "0",
    bitratePadding: 0,
    packetsOutOfOrder: 0,
    frames: 0,
    frameRate: 0,
    jitterCurrent: 0,
    jitterMax: 0,
    gapHistogram: {},
    nacks: 0,
    nackAcks: 0,
    nackMisses: 0,
    nackRepeated: 0,
    plis: 0,
    lastPli: undefined,
    firs: 0,
    lastFir: undefined,
    rttCurrent: 0,
    rttMax: 0,
    keyFrames: 0,
    lastKeyFrame: undefined,
    layerLockPlis: 0,
    lastLayerLockPli: undefined,
    packetDrift: undefined,
    ntpReportDrift: undefined,
    rebasedReportDrift: undefined,
    receivedReportDrift: undefined,
  };
}

export const RTPStats: MessageFns<RTPStats> = {
  encode(message: RTPStats, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(10).fork()).join();
    }
    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(18).fork()).join();
    }
    if (message.duration !== 0) {
      writer.uint32(25).double(message.duration);
    }
    if (message.packets !== 0) {
      writer.uint32(32).uint32(message.packets);
    }
    if (message.packetRate !== 0) {
      writer.uint32(41).double(message.packetRate);
    }
    if (message.bytes !== "0") {
      writer.uint32(48).uint64(message.bytes);
    }
    if (message.headerBytes !== "0") {
      writer.uint32(312).uint64(message.headerBytes);
    }
    if (message.bitrate !== 0) {
      writer.uint32(57).double(message.bitrate);
    }
    if (message.packetsLost !== 0) {
      writer.uint32(64).uint32(message.packetsLost);
    }
    if (message.packetLossRate !== 0) {
      writer.uint32(73).double(message.packetLossRate);
    }
    if (message.packetLossPercentage !== 0) {
      writer.uint32(85).float(message.packetLossPercentage);
    }
    if (message.packetsDuplicate !== 0) {
      writer.uint32(88).uint32(message.packetsDuplicate);
    }
    if (message.packetDuplicateRate !== 0) {
      writer.uint32(97).double(message.packetDuplicateRate);
    }
    if (message.bytesDuplicate !== "0") {
      writer.uint32(104).uint64(message.bytesDuplicate);
    }
    if (message.headerBytesDuplicate !== "0") {
      writer.uint32(320).uint64(message.headerBytesDuplicate);
    }
    if (message.bitrateDuplicate !== 0) {
      writer.uint32(113).double(message.bitrateDuplicate);
    }
    if (message.packetsPadding !== 0) {
      writer.uint32(120).uint32(message.packetsPadding);
    }
    if (message.packetPaddingRate !== 0) {
      writer.uint32(129).double(message.packetPaddingRate);
    }
    if (message.bytesPadding !== "0") {
      writer.uint32(136).uint64(message.bytesPadding);
    }
    if (message.headerBytesPadding !== "0") {
      writer.uint32(328).uint64(message.headerBytesPadding);
    }
    if (message.bitratePadding !== 0) {
      writer.uint32(145).double(message.bitratePadding);
    }
    if (message.packetsOutOfOrder !== 0) {
      writer.uint32(152).uint32(message.packetsOutOfOrder);
    }
    if (message.frames !== 0) {
      writer.uint32(160).uint32(message.frames);
    }
    if (message.frameRate !== 0) {
      writer.uint32(169).double(message.frameRate);
    }
    if (message.jitterCurrent !== 0) {
      writer.uint32(177).double(message.jitterCurrent);
    }
    if (message.jitterMax !== 0) {
      writer.uint32(185).double(message.jitterMax);
    }
    Object.entries(message.gapHistogram).forEach(([key, value]) => {
      RTPStats_GapHistogramEntry.encode({ key: key as any, value }, writer.uint32(194).fork()).join();
    });
    if (message.nacks !== 0) {
      writer.uint32(200).uint32(message.nacks);
    }
    if (message.nackAcks !== 0) {
      writer.uint32(296).uint32(message.nackAcks);
    }
    if (message.nackMisses !== 0) {
      writer.uint32(208).uint32(message.nackMisses);
    }
    if (message.nackRepeated !== 0) {
      writer.uint32(304).uint32(message.nackRepeated);
    }
    if (message.plis !== 0) {
      writer.uint32(216).uint32(message.plis);
    }
    if (message.lastPli !== undefined) {
      Timestamp.encode(toTimestamp(message.lastPli), writer.uint32(226).fork()).join();
    }
    if (message.firs !== 0) {
      writer.uint32(232).uint32(message.firs);
    }
    if (message.lastFir !== undefined) {
      Timestamp.encode(toTimestamp(message.lastFir), writer.uint32(242).fork()).join();
    }
    if (message.rttCurrent !== 0) {
      writer.uint32(248).uint32(message.rttCurrent);
    }
    if (message.rttMax !== 0) {
      writer.uint32(256).uint32(message.rttMax);
    }
    if (message.keyFrames !== 0) {
      writer.uint32(264).uint32(message.keyFrames);
    }
    if (message.lastKeyFrame !== undefined) {
      Timestamp.encode(toTimestamp(message.lastKeyFrame), writer.uint32(274).fork()).join();
    }
    if (message.layerLockPlis !== 0) {
      writer.uint32(280).uint32(message.layerLockPlis);
    }
    if (message.lastLayerLockPli !== undefined) {
      Timestamp.encode(toTimestamp(message.lastLayerLockPli), writer.uint32(290).fork()).join();
    }
    if (message.packetDrift !== undefined) {
      RTPDrift.encode(message.packetDrift, writer.uint32(354).fork()).join();
    }
    if (message.ntpReportDrift !== undefined) {
      RTPDrift.encode(message.ntpReportDrift, writer.uint32(362).fork()).join();
    }
    if (message.rebasedReportDrift !== undefined) {
      RTPDrift.encode(message.rebasedReportDrift, writer.uint32(370).fork()).join();
    }
    if (message.receivedReportDrift !== undefined) {
      RTPDrift.encode(message.receivedReportDrift, writer.uint32(378).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RTPStats {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRTPStats();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 25) {
            break;
          }

          message.duration = reader.double();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.packets = reader.uint32();
          continue;
        }
        case 5: {
          if (tag !== 41) {
            break;
          }

          message.packetRate = reader.double();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.bytes = reader.uint64().toString();
          continue;
        }
        case 39: {
          if (tag !== 312) {
            break;
          }

          message.headerBytes = reader.uint64().toString();
          continue;
        }
        case 7: {
          if (tag !== 57) {
            break;
          }

          message.bitrate = reader.double();
          continue;
        }
        case 8: {
          if (tag !== 64) {
            break;
          }

          message.packetsLost = reader.uint32();
          continue;
        }
        case 9: {
          if (tag !== 73) {
            break;
          }

          message.packetLossRate = reader.double();
          continue;
        }
        case 10: {
          if (tag !== 85) {
            break;
          }

          message.packetLossPercentage = reader.float();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.packetsDuplicate = reader.uint32();
          continue;
        }
        case 12: {
          if (tag !== 97) {
            break;
          }

          message.packetDuplicateRate = reader.double();
          continue;
        }
        case 13: {
          if (tag !== 104) {
            break;
          }

          message.bytesDuplicate = reader.uint64().toString();
          continue;
        }
        case 40: {
          if (tag !== 320) {
            break;
          }

          message.headerBytesDuplicate = reader.uint64().toString();
          continue;
        }
        case 14: {
          if (tag !== 113) {
            break;
          }

          message.bitrateDuplicate = reader.double();
          continue;
        }
        case 15: {
          if (tag !== 120) {
            break;
          }

          message.packetsPadding = reader.uint32();
          continue;
        }
        case 16: {
          if (tag !== 129) {
            break;
          }

          message.packetPaddingRate = reader.double();
          continue;
        }
        case 17: {
          if (tag !== 136) {
            break;
          }

          message.bytesPadding = reader.uint64().toString();
          continue;
        }
        case 41: {
          if (tag !== 328) {
            break;
          }

          message.headerBytesPadding = reader.uint64().toString();
          continue;
        }
        case 18: {
          if (tag !== 145) {
            break;
          }

          message.bitratePadding = reader.double();
          continue;
        }
        case 19: {
          if (tag !== 152) {
            break;
          }

          message.packetsOutOfOrder = reader.uint32();
          continue;
        }
        case 20: {
          if (tag !== 160) {
            break;
          }

          message.frames = reader.uint32();
          continue;
        }
        case 21: {
          if (tag !== 169) {
            break;
          }

          message.frameRate = reader.double();
          continue;
        }
        case 22: {
          if (tag !== 177) {
            break;
          }

          message.jitterCurrent = reader.double();
          continue;
        }
        case 23: {
          if (tag !== 185) {
            break;
          }

          message.jitterMax = reader.double();
          continue;
        }
        case 24: {
          if (tag !== 194) {
            break;
          }

          const entry24 = RTPStats_GapHistogramEntry.decode(reader, reader.uint32());
          if (entry24.value !== undefined) {
            message.gapHistogram[entry24.key] = entry24.value;
          }
          continue;
        }
        case 25: {
          if (tag !== 200) {
            break;
          }

          message.nacks = reader.uint32();
          continue;
        }
        case 37: {
          if (tag !== 296) {
            break;
          }

          message.nackAcks = reader.uint32();
          continue;
        }
        case 26: {
          if (tag !== 208) {
            break;
          }

          message.nackMisses = reader.uint32();
          continue;
        }
        case 38: {
          if (tag !== 304) {
            break;
          }

          message.nackRepeated = reader.uint32();
          continue;
        }
        case 27: {
          if (tag !== 216) {
            break;
          }

          message.plis = reader.uint32();
          continue;
        }
        case 28: {
          if (tag !== 226) {
            break;
          }

          message.lastPli = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 29: {
          if (tag !== 232) {
            break;
          }

          message.firs = reader.uint32();
          continue;
        }
        case 30: {
          if (tag !== 242) {
            break;
          }

          message.lastFir = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 31: {
          if (tag !== 248) {
            break;
          }

          message.rttCurrent = reader.uint32();
          continue;
        }
        case 32: {
          if (tag !== 256) {
            break;
          }

          message.rttMax = reader.uint32();
          continue;
        }
        case 33: {
          if (tag !== 264) {
            break;
          }

          message.keyFrames = reader.uint32();
          continue;
        }
        case 34: {
          if (tag !== 274) {
            break;
          }

          message.lastKeyFrame = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 35: {
          if (tag !== 280) {
            break;
          }

          message.layerLockPlis = reader.uint32();
          continue;
        }
        case 36: {
          if (tag !== 290) {
            break;
          }

          message.lastLayerLockPli = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 44: {
          if (tag !== 354) {
            break;
          }

          message.packetDrift = RTPDrift.decode(reader, reader.uint32());
          continue;
        }
        case 45: {
          if (tag !== 362) {
            break;
          }

          message.ntpReportDrift = RTPDrift.decode(reader, reader.uint32());
          continue;
        }
        case 46: {
          if (tag !== 370) {
            break;
          }

          message.rebasedReportDrift = RTPDrift.decode(reader, reader.uint32());
          continue;
        }
        case 47: {
          if (tag !== 378) {
            break;
          }

          message.receivedReportDrift = RTPDrift.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RTPStats {
    return {
      startTime: isSet(object.startTime) ? fromJsonTimestamp(object.startTime) : undefined,
      endTime: isSet(object.endTime) ? fromJsonTimestamp(object.endTime) : undefined,
      duration: isSet(object.duration) ? globalThis.Number(object.duration) : 0,
      packets: isSet(object.packets) ? globalThis.Number(object.packets) : 0,
      packetRate: isSet(object.packetRate) ? globalThis.Number(object.packetRate) : 0,
      bytes: isSet(object.bytes) ? globalThis.String(object.bytes) : "0",
      headerBytes: isSet(object.headerBytes) ? globalThis.String(object.headerBytes) : "0",
      bitrate: isSet(object.bitrate) ? globalThis.Number(object.bitrate) : 0,
      packetsLost: isSet(object.packetsLost) ? globalThis.Number(object.packetsLost) : 0,
      packetLossRate: isSet(object.packetLossRate) ? globalThis.Number(object.packetLossRate) : 0,
      packetLossPercentage: isSet(object.packetLossPercentage) ? globalThis.Number(object.packetLossPercentage) : 0,
      packetsDuplicate: isSet(object.packetsDuplicate) ? globalThis.Number(object.packetsDuplicate) : 0,
      packetDuplicateRate: isSet(object.packetDuplicateRate) ? globalThis.Number(object.packetDuplicateRate) : 0,
      bytesDuplicate: isSet(object.bytesDuplicate) ? globalThis.String(object.bytesDuplicate) : "0",
      headerBytesDuplicate: isSet(object.headerBytesDuplicate) ? globalThis.String(object.headerBytesDuplicate) : "0",
      bitrateDuplicate: isSet(object.bitrateDuplicate) ? globalThis.Number(object.bitrateDuplicate) : 0,
      packetsPadding: isSet(object.packetsPadding) ? globalThis.Number(object.packetsPadding) : 0,
      packetPaddingRate: isSet(object.packetPaddingRate) ? globalThis.Number(object.packetPaddingRate) : 0,
      bytesPadding: isSet(object.bytesPadding) ? globalThis.String(object.bytesPadding) : "0",
      headerBytesPadding: isSet(object.headerBytesPadding) ? globalThis.String(object.headerBytesPadding) : "0",
      bitratePadding: isSet(object.bitratePadding) ? globalThis.Number(object.bitratePadding) : 0,
      packetsOutOfOrder: isSet(object.packetsOutOfOrder) ? globalThis.Number(object.packetsOutOfOrder) : 0,
      frames: isSet(object.frames) ? globalThis.Number(object.frames) : 0,
      frameRate: isSet(object.frameRate) ? globalThis.Number(object.frameRate) : 0,
      jitterCurrent: isSet(object.jitterCurrent) ? globalThis.Number(object.jitterCurrent) : 0,
      jitterMax: isSet(object.jitterMax) ? globalThis.Number(object.jitterMax) : 0,
      gapHistogram: isObject(object.gapHistogram)
        ? Object.entries(object.gapHistogram).reduce<{ [key: number]: number }>((acc, [key, value]) => {
          acc[globalThis.Number(key)] = Number(value);
          return acc;
        }, {})
        : {},
      nacks: isSet(object.nacks) ? globalThis.Number(object.nacks) : 0,
      nackAcks: isSet(object.nackAcks) ? globalThis.Number(object.nackAcks) : 0,
      nackMisses: isSet(object.nackMisses) ? globalThis.Number(object.nackMisses) : 0,
      nackRepeated: isSet(object.nackRepeated) ? globalThis.Number(object.nackRepeated) : 0,
      plis: isSet(object.plis) ? globalThis.Number(object.plis) : 0,
      lastPli: isSet(object.lastPli) ? fromJsonTimestamp(object.lastPli) : undefined,
      firs: isSet(object.firs) ? globalThis.Number(object.firs) : 0,
      lastFir: isSet(object.lastFir) ? fromJsonTimestamp(object.lastFir) : undefined,
      rttCurrent: isSet(object.rttCurrent) ? globalThis.Number(object.rttCurrent) : 0,
      rttMax: isSet(object.rttMax) ? globalThis.Number(object.rttMax) : 0,
      keyFrames: isSet(object.keyFrames) ? globalThis.Number(object.keyFrames) : 0,
      lastKeyFrame: isSet(object.lastKeyFrame) ? fromJsonTimestamp(object.lastKeyFrame) : undefined,
      layerLockPlis: isSet(object.layerLockPlis) ? globalThis.Number(object.layerLockPlis) : 0,
      lastLayerLockPli: isSet(object.lastLayerLockPli) ? fromJsonTimestamp(object.lastLayerLockPli) : undefined,
      packetDrift: isSet(object.packetDrift) ? RTPDrift.fromJSON(object.packetDrift) : undefined,
      ntpReportDrift: isSet(object.ntpReportDrift) ? RTPDrift.fromJSON(object.ntpReportDrift) : undefined,
      rebasedReportDrift: isSet(object.rebasedReportDrift) ? RTPDrift.fromJSON(object.rebasedReportDrift) : undefined,
      receivedReportDrift: isSet(object.receivedReportDrift)
        ? RTPDrift.fromJSON(object.receivedReportDrift)
        : undefined,
    };
  },

  toJSON(message: RTPStats): unknown {
    const obj: any = {};
    if (message.startTime !== undefined) {
      obj.startTime = message.startTime.toISOString();
    }
    if (message.endTime !== undefined) {
      obj.endTime = message.endTime.toISOString();
    }
    if (message.duration !== 0) {
      obj.duration = message.duration;
    }
    if (message.packets !== 0) {
      obj.packets = Math.round(message.packets);
    }
    if (message.packetRate !== 0) {
      obj.packetRate = message.packetRate;
    }
    if (message.bytes !== "0") {
      obj.bytes = message.bytes;
    }
    if (message.headerBytes !== "0") {
      obj.headerBytes = message.headerBytes;
    }
    if (message.bitrate !== 0) {
      obj.bitrate = message.bitrate;
    }
    if (message.packetsLost !== 0) {
      obj.packetsLost = Math.round(message.packetsLost);
    }
    if (message.packetLossRate !== 0) {
      obj.packetLossRate = message.packetLossRate;
    }
    if (message.packetLossPercentage !== 0) {
      obj.packetLossPercentage = message.packetLossPercentage;
    }
    if (message.packetsDuplicate !== 0) {
      obj.packetsDuplicate = Math.round(message.packetsDuplicate);
    }
    if (message.packetDuplicateRate !== 0) {
      obj.packetDuplicateRate = message.packetDuplicateRate;
    }
    if (message.bytesDuplicate !== "0") {
      obj.bytesDuplicate = message.bytesDuplicate;
    }
    if (message.headerBytesDuplicate !== "0") {
      obj.headerBytesDuplicate = message.headerBytesDuplicate;
    }
    if (message.bitrateDuplicate !== 0) {
      obj.bitrateDuplicate = message.bitrateDuplicate;
    }
    if (message.packetsPadding !== 0) {
      obj.packetsPadding = Math.round(message.packetsPadding);
    }
    if (message.packetPaddingRate !== 0) {
      obj.packetPaddingRate = message.packetPaddingRate;
    }
    if (message.bytesPadding !== "0") {
      obj.bytesPadding = message.bytesPadding;
    }
    if (message.headerBytesPadding !== "0") {
      obj.headerBytesPadding = message.headerBytesPadding;
    }
    if (message.bitratePadding !== 0) {
      obj.bitratePadding = message.bitratePadding;
    }
    if (message.packetsOutOfOrder !== 0) {
      obj.packetsOutOfOrder = Math.round(message.packetsOutOfOrder);
    }
    if (message.frames !== 0) {
      obj.frames = Math.round(message.frames);
    }
    if (message.frameRate !== 0) {
      obj.frameRate = message.frameRate;
    }
    if (message.jitterCurrent !== 0) {
      obj.jitterCurrent = message.jitterCurrent;
    }
    if (message.jitterMax !== 0) {
      obj.jitterMax = message.jitterMax;
    }
    if (message.gapHistogram) {
      const entries = Object.entries(message.gapHistogram);
      if (entries.length > 0) {
        obj.gapHistogram = {};
        entries.forEach(([k, v]) => {
          obj.gapHistogram[k] = Math.round(v);
        });
      }
    }
    if (message.nacks !== 0) {
      obj.nacks = Math.round(message.nacks);
    }
    if (message.nackAcks !== 0) {
      obj.nackAcks = Math.round(message.nackAcks);
    }
    if (message.nackMisses !== 0) {
      obj.nackMisses = Math.round(message.nackMisses);
    }
    if (message.nackRepeated !== 0) {
      obj.nackRepeated = Math.round(message.nackRepeated);
    }
    if (message.plis !== 0) {
      obj.plis = Math.round(message.plis);
    }
    if (message.lastPli !== undefined) {
      obj.lastPli = message.lastPli.toISOString();
    }
    if (message.firs !== 0) {
      obj.firs = Math.round(message.firs);
    }
    if (message.lastFir !== undefined) {
      obj.lastFir = message.lastFir.toISOString();
    }
    if (message.rttCurrent !== 0) {
      obj.rttCurrent = Math.round(message.rttCurrent);
    }
    if (message.rttMax !== 0) {
      obj.rttMax = Math.round(message.rttMax);
    }
    if (message.keyFrames !== 0) {
      obj.keyFrames = Math.round(message.keyFrames);
    }
    if (message.lastKeyFrame !== undefined) {
      obj.lastKeyFrame = message.lastKeyFrame.toISOString();
    }
    if (message.layerLockPlis !== 0) {
      obj.layerLockPlis = Math.round(message.layerLockPlis);
    }
    if (message.lastLayerLockPli !== undefined) {
      obj.lastLayerLockPli = message.lastLayerLockPli.toISOString();
    }
    if (message.packetDrift !== undefined) {
      obj.packetDrift = RTPDrift.toJSON(message.packetDrift);
    }
    if (message.ntpReportDrift !== undefined) {
      obj.ntpReportDrift = RTPDrift.toJSON(message.ntpReportDrift);
    }
    if (message.rebasedReportDrift !== undefined) {
      obj.rebasedReportDrift = RTPDrift.toJSON(message.rebasedReportDrift);
    }
    if (message.receivedReportDrift !== undefined) {
      obj.receivedReportDrift = RTPDrift.toJSON(message.receivedReportDrift);
    }
    return obj;
  },

  create(base?: DeepPartial<RTPStats>): RTPStats {
    return RTPStats.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RTPStats>): RTPStats {
    const message = createBaseRTPStats();
    message.startTime = object.startTime ?? undefined;
    message.endTime = object.endTime ?? undefined;
    message.duration = object.duration ?? 0;
    message.packets = object.packets ?? 0;
    message.packetRate = object.packetRate ?? 0;
    message.bytes = object.bytes ?? "0";
    message.headerBytes = object.headerBytes ?? "0";
    message.bitrate = object.bitrate ?? 0;
    message.packetsLost = object.packetsLost ?? 0;
    message.packetLossRate = object.packetLossRate ?? 0;
    message.packetLossPercentage = object.packetLossPercentage ?? 0;
    message.packetsDuplicate = object.packetsDuplicate ?? 0;
    message.packetDuplicateRate = object.packetDuplicateRate ?? 0;
    message.bytesDuplicate = object.bytesDuplicate ?? "0";
    message.headerBytesDuplicate = object.headerBytesDuplicate ?? "0";
    message.bitrateDuplicate = object.bitrateDuplicate ?? 0;
    message.packetsPadding = object.packetsPadding ?? 0;
    message.packetPaddingRate = object.packetPaddingRate ?? 0;
    message.bytesPadding = object.bytesPadding ?? "0";
    message.headerBytesPadding = object.headerBytesPadding ?? "0";
    message.bitratePadding = object.bitratePadding ?? 0;
    message.packetsOutOfOrder = object.packetsOutOfOrder ?? 0;
    message.frames = object.frames ?? 0;
    message.frameRate = object.frameRate ?? 0;
    message.jitterCurrent = object.jitterCurrent ?? 0;
    message.jitterMax = object.jitterMax ?? 0;
    message.gapHistogram = Object.entries(object.gapHistogram ?? {}).reduce<{ [key: number]: number }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[globalThis.Number(key)] = globalThis.Number(value);
        }
        return acc;
      },
      {},
    );
    message.nacks = object.nacks ?? 0;
    message.nackAcks = object.nackAcks ?? 0;
    message.nackMisses = object.nackMisses ?? 0;
    message.nackRepeated = object.nackRepeated ?? 0;
    message.plis = object.plis ?? 0;
    message.lastPli = object.lastPli ?? undefined;
    message.firs = object.firs ?? 0;
    message.lastFir = object.lastFir ?? undefined;
    message.rttCurrent = object.rttCurrent ?? 0;
    message.rttMax = object.rttMax ?? 0;
    message.keyFrames = object.keyFrames ?? 0;
    message.lastKeyFrame = object.lastKeyFrame ?? undefined;
    message.layerLockPlis = object.layerLockPlis ?? 0;
    message.lastLayerLockPli = object.lastLayerLockPli ?? undefined;
    message.packetDrift = (object.packetDrift !== undefined && object.packetDrift !== null)
      ? RTPDrift.fromPartial(object.packetDrift)
      : undefined;
    message.ntpReportDrift = (object.ntpReportDrift !== undefined && object.ntpReportDrift !== null)
      ? RTPDrift.fromPartial(object.ntpReportDrift)
      : undefined;
    message.rebasedReportDrift = (object.rebasedReportDrift !== undefined && object.rebasedReportDrift !== null)
      ? RTPDrift.fromPartial(object.rebasedReportDrift)
      : undefined;
    message.receivedReportDrift = (object.receivedReportDrift !== undefined && object.receivedReportDrift !== null)
      ? RTPDrift.fromPartial(object.receivedReportDrift)
      : undefined;
    return message;
  },
};

function createBaseRTPStats_GapHistogramEntry(): RTPStats_GapHistogramEntry {
  return { key: 0, value: 0 };
}

export const RTPStats_GapHistogramEntry: MessageFns<RTPStats_GapHistogramEntry> = {
  encode(message: RTPStats_GapHistogramEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== 0) {
      writer.uint32(8).int32(message.key);
    }
    if (message.value !== 0) {
      writer.uint32(16).uint32(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RTPStats_GapHistogramEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRTPStats_GapHistogramEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.key = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.value = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RTPStats_GapHistogramEntry {
    return {
      key: isSet(object.key) ? globalThis.Number(object.key) : 0,
      value: isSet(object.value) ? globalThis.Number(object.value) : 0,
    };
  },

  toJSON(message: RTPStats_GapHistogramEntry): unknown {
    const obj: any = {};
    if (message.key !== 0) {
      obj.key = Math.round(message.key);
    }
    if (message.value !== 0) {
      obj.value = Math.round(message.value);
    }
    return obj;
  },

  create(base?: DeepPartial<RTPStats_GapHistogramEntry>): RTPStats_GapHistogramEntry {
    return RTPStats_GapHistogramEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RTPStats_GapHistogramEntry>): RTPStats_GapHistogramEntry {
    const message = createBaseRTPStats_GapHistogramEntry();
    message.key = object.key ?? 0;
    message.value = object.value ?? 0;
    return message;
  },
};

function createBaseRTCPSenderReportState(): RTCPSenderReportState {
  return {
    rtpTimestamp: 0,
    rtpTimestampExt: "0",
    ntpTimestamp: "0",
    at: "0",
    atAdjusted: "0",
    packets: 0,
    octets: "0",
  };
}

export const RTCPSenderReportState: MessageFns<RTCPSenderReportState> = {
  encode(message: RTCPSenderReportState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.rtpTimestamp !== 0) {
      writer.uint32(8).uint32(message.rtpTimestamp);
    }
    if (message.rtpTimestampExt !== "0") {
      writer.uint32(16).uint64(message.rtpTimestampExt);
    }
    if (message.ntpTimestamp !== "0") {
      writer.uint32(24).uint64(message.ntpTimestamp);
    }
    if (message.at !== "0") {
      writer.uint32(32).int64(message.at);
    }
    if (message.atAdjusted !== "0") {
      writer.uint32(40).int64(message.atAdjusted);
    }
    if (message.packets !== 0) {
      writer.uint32(48).uint32(message.packets);
    }
    if (message.octets !== "0") {
      writer.uint32(56).uint64(message.octets);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RTCPSenderReportState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRTCPSenderReportState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.rtpTimestamp = reader.uint32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.rtpTimestampExt = reader.uint64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.ntpTimestamp = reader.uint64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.at = reader.int64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.atAdjusted = reader.int64().toString();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.packets = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.octets = reader.uint64().toString();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RTCPSenderReportState {
    return {
      rtpTimestamp: isSet(object.rtpTimestamp) ? globalThis.Number(object.rtpTimestamp) : 0,
      rtpTimestampExt: isSet(object.rtpTimestampExt) ? globalThis.String(object.rtpTimestampExt) : "0",
      ntpTimestamp: isSet(object.ntpTimestamp) ? globalThis.String(object.ntpTimestamp) : "0",
      at: isSet(object.at) ? globalThis.String(object.at) : "0",
      atAdjusted: isSet(object.atAdjusted) ? globalThis.String(object.atAdjusted) : "0",
      packets: isSet(object.packets) ? globalThis.Number(object.packets) : 0,
      octets: isSet(object.octets) ? globalThis.String(object.octets) : "0",
    };
  },

  toJSON(message: RTCPSenderReportState): unknown {
    const obj: any = {};
    if (message.rtpTimestamp !== 0) {
      obj.rtpTimestamp = Math.round(message.rtpTimestamp);
    }
    if (message.rtpTimestampExt !== "0") {
      obj.rtpTimestampExt = message.rtpTimestampExt;
    }
    if (message.ntpTimestamp !== "0") {
      obj.ntpTimestamp = message.ntpTimestamp;
    }
    if (message.at !== "0") {
      obj.at = message.at;
    }
    if (message.atAdjusted !== "0") {
      obj.atAdjusted = message.atAdjusted;
    }
    if (message.packets !== 0) {
      obj.packets = Math.round(message.packets);
    }
    if (message.octets !== "0") {
      obj.octets = message.octets;
    }
    return obj;
  },

  create(base?: DeepPartial<RTCPSenderReportState>): RTCPSenderReportState {
    return RTCPSenderReportState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RTCPSenderReportState>): RTCPSenderReportState {
    const message = createBaseRTCPSenderReportState();
    message.rtpTimestamp = object.rtpTimestamp ?? 0;
    message.rtpTimestampExt = object.rtpTimestampExt ?? "0";
    message.ntpTimestamp = object.ntpTimestamp ?? "0";
    message.at = object.at ?? "0";
    message.atAdjusted = object.atAdjusted ?? "0";
    message.packets = object.packets ?? 0;
    message.octets = object.octets ?? "0";
    return message;
  },
};

function createBaseRTPForwarderState(): RTPForwarderState {
  return {
    started: false,
    referenceLayerSpatial: 0,
    preStartTime: "0",
    extFirstTimestamp: "0",
    dummyStartTimestampOffset: "0",
    rtpMunger: undefined,
    codecMunger: undefined,
    senderReportState: [],
  };
}

export const RTPForwarderState: MessageFns<RTPForwarderState> = {
  encode(message: RTPForwarderState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.started !== false) {
      writer.uint32(8).bool(message.started);
    }
    if (message.referenceLayerSpatial !== 0) {
      writer.uint32(16).int32(message.referenceLayerSpatial);
    }
    if (message.preStartTime !== "0") {
      writer.uint32(24).int64(message.preStartTime);
    }
    if (message.extFirstTimestamp !== "0") {
      writer.uint32(32).uint64(message.extFirstTimestamp);
    }
    if (message.dummyStartTimestampOffset !== "0") {
      writer.uint32(40).uint64(message.dummyStartTimestampOffset);
    }
    if (message.rtpMunger !== undefined) {
      RTPMungerState.encode(message.rtpMunger, writer.uint32(50).fork()).join();
    }
    switch (message.codecMunger?.$case) {
      case "vp8Munger":
        VP8MungerState.encode(message.codecMunger.vp8Munger, writer.uint32(58).fork()).join();
        break;
    }
    for (const v of message.senderReportState) {
      RTCPSenderReportState.encode(v!, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RTPForwarderState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRTPForwarderState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.started = reader.bool();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.referenceLayerSpatial = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.preStartTime = reader.int64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.extFirstTimestamp = reader.uint64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.dummyStartTimestampOffset = reader.uint64().toString();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.rtpMunger = RTPMungerState.decode(reader, reader.uint32());
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.codecMunger = { $case: "vp8Munger", vp8Munger: VP8MungerState.decode(reader, reader.uint32()) };
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.senderReportState.push(RTCPSenderReportState.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RTPForwarderState {
    return {
      started: isSet(object.started) ? globalThis.Boolean(object.started) : false,
      referenceLayerSpatial: isSet(object.referenceLayerSpatial) ? globalThis.Number(object.referenceLayerSpatial) : 0,
      preStartTime: isSet(object.preStartTime) ? globalThis.String(object.preStartTime) : "0",
      extFirstTimestamp: isSet(object.extFirstTimestamp) ? globalThis.String(object.extFirstTimestamp) : "0",
      dummyStartTimestampOffset: isSet(object.dummyStartTimestampOffset)
        ? globalThis.String(object.dummyStartTimestampOffset)
        : "0",
      rtpMunger: isSet(object.rtpMunger) ? RTPMungerState.fromJSON(object.rtpMunger) : undefined,
      codecMunger: isSet(object.vp8Munger)
        ? { $case: "vp8Munger", vp8Munger: VP8MungerState.fromJSON(object.vp8Munger) }
        : undefined,
      senderReportState: globalThis.Array.isArray(object?.senderReportState)
        ? object.senderReportState.map((e: any) => RTCPSenderReportState.fromJSON(e))
        : [],
    };
  },

  toJSON(message: RTPForwarderState): unknown {
    const obj: any = {};
    if (message.started !== false) {
      obj.started = message.started;
    }
    if (message.referenceLayerSpatial !== 0) {
      obj.referenceLayerSpatial = Math.round(message.referenceLayerSpatial);
    }
    if (message.preStartTime !== "0") {
      obj.preStartTime = message.preStartTime;
    }
    if (message.extFirstTimestamp !== "0") {
      obj.extFirstTimestamp = message.extFirstTimestamp;
    }
    if (message.dummyStartTimestampOffset !== "0") {
      obj.dummyStartTimestampOffset = message.dummyStartTimestampOffset;
    }
    if (message.rtpMunger !== undefined) {
      obj.rtpMunger = RTPMungerState.toJSON(message.rtpMunger);
    }
    if (message.codecMunger?.$case === "vp8Munger") {
      obj.vp8Munger = VP8MungerState.toJSON(message.codecMunger.vp8Munger);
    }
    if (message.senderReportState?.length) {
      obj.senderReportState = message.senderReportState.map((e) => RTCPSenderReportState.toJSON(e));
    }
    return obj;
  },

  create(base?: DeepPartial<RTPForwarderState>): RTPForwarderState {
    return RTPForwarderState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RTPForwarderState>): RTPForwarderState {
    const message = createBaseRTPForwarderState();
    message.started = object.started ?? false;
    message.referenceLayerSpatial = object.referenceLayerSpatial ?? 0;
    message.preStartTime = object.preStartTime ?? "0";
    message.extFirstTimestamp = object.extFirstTimestamp ?? "0";
    message.dummyStartTimestampOffset = object.dummyStartTimestampOffset ?? "0";
    message.rtpMunger = (object.rtpMunger !== undefined && object.rtpMunger !== null)
      ? RTPMungerState.fromPartial(object.rtpMunger)
      : undefined;
    switch (object.codecMunger?.$case) {
      case "vp8Munger": {
        if (object.codecMunger?.vp8Munger !== undefined && object.codecMunger?.vp8Munger !== null) {
          message.codecMunger = {
            $case: "vp8Munger",
            vp8Munger: VP8MungerState.fromPartial(object.codecMunger.vp8Munger),
          };
        }
        break;
      }
    }
    message.senderReportState = object.senderReportState?.map((e) => RTCPSenderReportState.fromPartial(e)) || [];
    return message;
  },
};

function createBaseRTPMungerState(): RTPMungerState {
  return {
    extLastSequenceNumber: "0",
    extSecondLastSequenceNumber: "0",
    extLastTimestamp: "0",
    extSecondLastTimestamp: "0",
    lastMarker: false,
    secondLastMarker: false,
  };
}

export const RTPMungerState: MessageFns<RTPMungerState> = {
  encode(message: RTPMungerState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.extLastSequenceNumber !== "0") {
      writer.uint32(8).uint64(message.extLastSequenceNumber);
    }
    if (message.extSecondLastSequenceNumber !== "0") {
      writer.uint32(16).uint64(message.extSecondLastSequenceNumber);
    }
    if (message.extLastTimestamp !== "0") {
      writer.uint32(24).uint64(message.extLastTimestamp);
    }
    if (message.extSecondLastTimestamp !== "0") {
      writer.uint32(32).uint64(message.extSecondLastTimestamp);
    }
    if (message.lastMarker !== false) {
      writer.uint32(40).bool(message.lastMarker);
    }
    if (message.secondLastMarker !== false) {
      writer.uint32(48).bool(message.secondLastMarker);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): RTPMungerState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRTPMungerState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.extLastSequenceNumber = reader.uint64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.extSecondLastSequenceNumber = reader.uint64().toString();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.extLastTimestamp = reader.uint64().toString();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.extSecondLastTimestamp = reader.uint64().toString();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.lastMarker = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.secondLastMarker = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RTPMungerState {
    return {
      extLastSequenceNumber: isSet(object.extLastSequenceNumber)
        ? globalThis.String(object.extLastSequenceNumber)
        : "0",
      extSecondLastSequenceNumber: isSet(object.extSecondLastSequenceNumber)
        ? globalThis.String(object.extSecondLastSequenceNumber)
        : "0",
      extLastTimestamp: isSet(object.extLastTimestamp) ? globalThis.String(object.extLastTimestamp) : "0",
      extSecondLastTimestamp: isSet(object.extSecondLastTimestamp)
        ? globalThis.String(object.extSecondLastTimestamp)
        : "0",
      lastMarker: isSet(object.lastMarker) ? globalThis.Boolean(object.lastMarker) : false,
      secondLastMarker: isSet(object.secondLastMarker) ? globalThis.Boolean(object.secondLastMarker) : false,
    };
  },

  toJSON(message: RTPMungerState): unknown {
    const obj: any = {};
    if (message.extLastSequenceNumber !== "0") {
      obj.extLastSequenceNumber = message.extLastSequenceNumber;
    }
    if (message.extSecondLastSequenceNumber !== "0") {
      obj.extSecondLastSequenceNumber = message.extSecondLastSequenceNumber;
    }
    if (message.extLastTimestamp !== "0") {
      obj.extLastTimestamp = message.extLastTimestamp;
    }
    if (message.extSecondLastTimestamp !== "0") {
      obj.extSecondLastTimestamp = message.extSecondLastTimestamp;
    }
    if (message.lastMarker !== false) {
      obj.lastMarker = message.lastMarker;
    }
    if (message.secondLastMarker !== false) {
      obj.secondLastMarker = message.secondLastMarker;
    }
    return obj;
  },

  create(base?: DeepPartial<RTPMungerState>): RTPMungerState {
    return RTPMungerState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<RTPMungerState>): RTPMungerState {
    const message = createBaseRTPMungerState();
    message.extLastSequenceNumber = object.extLastSequenceNumber ?? "0";
    message.extSecondLastSequenceNumber = object.extSecondLastSequenceNumber ?? "0";
    message.extLastTimestamp = object.extLastTimestamp ?? "0";
    message.extSecondLastTimestamp = object.extSecondLastTimestamp ?? "0";
    message.lastMarker = object.lastMarker ?? false;
    message.secondLastMarker = object.secondLastMarker ?? false;
    return message;
  },
};

function createBaseVP8MungerState(): VP8MungerState {
  return {
    extLastPictureId: 0,
    pictureIdUsed: false,
    lastTl0PicIdx: 0,
    tl0PicIdxUsed: false,
    tidUsed: false,
    lastKeyIdx: 0,
    keyIdxUsed: false,
  };
}

export const VP8MungerState: MessageFns<VP8MungerState> = {
  encode(message: VP8MungerState, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.extLastPictureId !== 0) {
      writer.uint32(8).int32(message.extLastPictureId);
    }
    if (message.pictureIdUsed !== false) {
      writer.uint32(16).bool(message.pictureIdUsed);
    }
    if (message.lastTl0PicIdx !== 0) {
      writer.uint32(24).uint32(message.lastTl0PicIdx);
    }
    if (message.tl0PicIdxUsed !== false) {
      writer.uint32(32).bool(message.tl0PicIdxUsed);
    }
    if (message.tidUsed !== false) {
      writer.uint32(40).bool(message.tidUsed);
    }
    if (message.lastKeyIdx !== 0) {
      writer.uint32(48).uint32(message.lastKeyIdx);
    }
    if (message.keyIdxUsed !== false) {
      writer.uint32(56).bool(message.keyIdxUsed);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VP8MungerState {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVP8MungerState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.extLastPictureId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pictureIdUsed = reader.bool();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.lastTl0PicIdx = reader.uint32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.tl0PicIdxUsed = reader.bool();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.tidUsed = reader.bool();
          continue;
        }
        case 6: {
          if (tag !== 48) {
            break;
          }

          message.lastKeyIdx = reader.uint32();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.keyIdxUsed = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VP8MungerState {
    return {
      extLastPictureId: isSet(object.extLastPictureId) ? globalThis.Number(object.extLastPictureId) : 0,
      pictureIdUsed: isSet(object.pictureIdUsed) ? globalThis.Boolean(object.pictureIdUsed) : false,
      lastTl0PicIdx: isSet(object.lastTl0PicIdx) ? globalThis.Number(object.lastTl0PicIdx) : 0,
      tl0PicIdxUsed: isSet(object.tl0PicIdxUsed) ? globalThis.Boolean(object.tl0PicIdxUsed) : false,
      tidUsed: isSet(object.tidUsed) ? globalThis.Boolean(object.tidUsed) : false,
      lastKeyIdx: isSet(object.lastKeyIdx) ? globalThis.Number(object.lastKeyIdx) : 0,
      keyIdxUsed: isSet(object.keyIdxUsed) ? globalThis.Boolean(object.keyIdxUsed) : false,
    };
  },

  toJSON(message: VP8MungerState): unknown {
    const obj: any = {};
    if (message.extLastPictureId !== 0) {
      obj.extLastPictureId = Math.round(message.extLastPictureId);
    }
    if (message.pictureIdUsed !== false) {
      obj.pictureIdUsed = message.pictureIdUsed;
    }
    if (message.lastTl0PicIdx !== 0) {
      obj.lastTl0PicIdx = Math.round(message.lastTl0PicIdx);
    }
    if (message.tl0PicIdxUsed !== false) {
      obj.tl0PicIdxUsed = message.tl0PicIdxUsed;
    }
    if (message.tidUsed !== false) {
      obj.tidUsed = message.tidUsed;
    }
    if (message.lastKeyIdx !== 0) {
      obj.lastKeyIdx = Math.round(message.lastKeyIdx);
    }
    if (message.keyIdxUsed !== false) {
      obj.keyIdxUsed = message.keyIdxUsed;
    }
    return obj;
  },

  create(base?: DeepPartial<VP8MungerState>): VP8MungerState {
    return VP8MungerState.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<VP8MungerState>): VP8MungerState {
    const message = createBaseVP8MungerState();
    message.extLastPictureId = object.extLastPictureId ?? 0;
    message.pictureIdUsed = object.pictureIdUsed ?? false;
    message.lastTl0PicIdx = object.lastTl0PicIdx ?? 0;
    message.tl0PicIdxUsed = object.tl0PicIdxUsed ?? false;
    message.tidUsed = object.tidUsed ?? false;
    message.lastKeyIdx = object.lastKeyIdx ?? 0;
    message.keyIdxUsed = object.keyIdxUsed ?? false;
    return message;
  },
};

function createBaseTimedVersion(): TimedVersion {
  return { unixMicro: "0", ticks: 0 };
}

export const TimedVersion: MessageFns<TimedVersion> = {
  encode(message: TimedVersion, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.unixMicro !== "0") {
      writer.uint32(8).int64(message.unixMicro);
    }
    if (message.ticks !== 0) {
      writer.uint32(16).int32(message.ticks);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TimedVersion {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTimedVersion();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.unixMicro = reader.int64().toString();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.ticks = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TimedVersion {
    return {
      unixMicro: isSet(object.unixMicro) ? globalThis.String(object.unixMicro) : "0",
      ticks: isSet(object.ticks) ? globalThis.Number(object.ticks) : 0,
    };
  },

  toJSON(message: TimedVersion): unknown {
    const obj: any = {};
    if (message.unixMicro !== "0") {
      obj.unixMicro = message.unixMicro;
    }
    if (message.ticks !== 0) {
      obj.ticks = Math.round(message.ticks);
    }
    return obj;
  },

  create(base?: DeepPartial<TimedVersion>): TimedVersion {
    return TimedVersion.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<TimedVersion>): TimedVersion {
    const message = createBaseTimedVersion();
    message.unixMicro = object.unixMicro ?? "0";
    message.ticks = object.ticks ?? 0;
    return message;
  },
};

function createBaseDataStream(): DataStream {
  return {};
}

export const DataStream: MessageFns<DataStream> = {
  encode(_: DataStream, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataStream {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataStream();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): DataStream {
    return {};
  },

  toJSON(_: DataStream): unknown {
    const obj: any = {};
    return obj;
  },

  create(base?: DeepPartial<DataStream>): DataStream {
    return DataStream.fromPartial(base ?? {});
  },
  fromPartial(_: DeepPartial<DataStream>): DataStream {
    const message = createBaseDataStream();
    return message;
  },
};

function createBaseDataStream_TextHeader(): DataStream_TextHeader {
  return { operationType: 0, version: 0, replyToStreamId: "", attachedStreamIds: [], generated: false };
}

export const DataStream_TextHeader: MessageFns<DataStream_TextHeader> = {
  encode(message: DataStream_TextHeader, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.operationType !== 0) {
      writer.uint32(8).int32(message.operationType);
    }
    if (message.version !== 0) {
      writer.uint32(16).int32(message.version);
    }
    if (message.replyToStreamId !== "") {
      writer.uint32(26).string(message.replyToStreamId);
    }
    for (const v of message.attachedStreamIds) {
      writer.uint32(34).string(v!);
    }
    if (message.generated !== false) {
      writer.uint32(40).bool(message.generated);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataStream_TextHeader {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataStream_TextHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.operationType = reader.int32() as any;
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.version = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.replyToStreamId = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.attachedStreamIds.push(reader.string());
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.generated = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataStream_TextHeader {
    return {
      operationType: isSet(object.operationType) ? dataStream_OperationTypeFromJSON(object.operationType) : 0,
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      replyToStreamId: isSet(object.replyToStreamId) ? globalThis.String(object.replyToStreamId) : "",
      attachedStreamIds: globalThis.Array.isArray(object?.attachedStreamIds)
        ? object.attachedStreamIds.map((e: any) => globalThis.String(e))
        : [],
      generated: isSet(object.generated) ? globalThis.Boolean(object.generated) : false,
    };
  },

  toJSON(message: DataStream_TextHeader): unknown {
    const obj: any = {};
    if (message.operationType !== 0) {
      obj.operationType = dataStream_OperationTypeToJSON(message.operationType);
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.replyToStreamId !== "") {
      obj.replyToStreamId = message.replyToStreamId;
    }
    if (message.attachedStreamIds?.length) {
      obj.attachedStreamIds = message.attachedStreamIds;
    }
    if (message.generated !== false) {
      obj.generated = message.generated;
    }
    return obj;
  },

  create(base?: DeepPartial<DataStream_TextHeader>): DataStream_TextHeader {
    return DataStream_TextHeader.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataStream_TextHeader>): DataStream_TextHeader {
    const message = createBaseDataStream_TextHeader();
    message.operationType = object.operationType ?? 0;
    message.version = object.version ?? 0;
    message.replyToStreamId = object.replyToStreamId ?? "";
    message.attachedStreamIds = object.attachedStreamIds?.map((e) => e) || [];
    message.generated = object.generated ?? false;
    return message;
  },
};

function createBaseDataStream_ByteHeader(): DataStream_ByteHeader {
  return { name: "" };
}

export const DataStream_ByteHeader: MessageFns<DataStream_ByteHeader> = {
  encode(message: DataStream_ByteHeader, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataStream_ByteHeader {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataStream_ByteHeader();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataStream_ByteHeader {
    return { name: isSet(object.name) ? globalThis.String(object.name) : "" };
  },

  toJSON(message: DataStream_ByteHeader): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    return obj;
  },

  create(base?: DeepPartial<DataStream_ByteHeader>): DataStream_ByteHeader {
    return DataStream_ByteHeader.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataStream_ByteHeader>): DataStream_ByteHeader {
    const message = createBaseDataStream_ByteHeader();
    message.name = object.name ?? "";
    return message;
  },
};

function createBaseDataStream_Header(): DataStream_Header {
  return {
    streamId: "",
    timestamp: "0",
    topic: "",
    mimeType: "",
    totalLength: undefined,
    encryptionType: 0,
    attributes: {},
    contentHeader: undefined,
  };
}

export const DataStream_Header: MessageFns<DataStream_Header> = {
  encode(message: DataStream_Header, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.streamId !== "") {
      writer.uint32(10).string(message.streamId);
    }
    if (message.timestamp !== "0") {
      writer.uint32(16).int64(message.timestamp);
    }
    if (message.topic !== "") {
      writer.uint32(26).string(message.topic);
    }
    if (message.mimeType !== "") {
      writer.uint32(34).string(message.mimeType);
    }
    if (message.totalLength !== undefined) {
      writer.uint32(40).uint64(message.totalLength);
    }
    if (message.encryptionType !== 0) {
      writer.uint32(56).int32(message.encryptionType);
    }
    Object.entries(message.attributes).forEach(([key, value]) => {
      DataStream_Header_AttributesEntry.encode({ key: key as any, value }, writer.uint32(66).fork()).join();
    });
    switch (message.contentHeader?.$case) {
      case "textHeader":
        DataStream_TextHeader.encode(message.contentHeader.textHeader, writer.uint32(74).fork()).join();
        break;
      case "byteHeader":
        DataStream_ByteHeader.encode(message.contentHeader.byteHeader, writer.uint32(82).fork()).join();
        break;
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataStream_Header {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataStream_Header();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.streamId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.timestamp = reader.int64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.topic = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.mimeType = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.totalLength = reader.uint64().toString();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.encryptionType = reader.int32() as any;
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          const entry8 = DataStream_Header_AttributesEntry.decode(reader, reader.uint32());
          if (entry8.value !== undefined) {
            message.attributes[entry8.key] = entry8.value;
          }
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.contentHeader = {
            $case: "textHeader",
            textHeader: DataStream_TextHeader.decode(reader, reader.uint32()),
          };
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.contentHeader = {
            $case: "byteHeader",
            byteHeader: DataStream_ByteHeader.decode(reader, reader.uint32()),
          };
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataStream_Header {
    return {
      streamId: isSet(object.streamId) ? globalThis.String(object.streamId) : "",
      timestamp: isSet(object.timestamp) ? globalThis.String(object.timestamp) : "0",
      topic: isSet(object.topic) ? globalThis.String(object.topic) : "",
      mimeType: isSet(object.mimeType) ? globalThis.String(object.mimeType) : "",
      totalLength: isSet(object.totalLength) ? globalThis.String(object.totalLength) : undefined,
      encryptionType: isSet(object.encryptionType) ? encryption_TypeFromJSON(object.encryptionType) : 0,
      attributes: isObject(object.attributes)
        ? Object.entries(object.attributes).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
      contentHeader: isSet(object.textHeader)
        ? { $case: "textHeader", textHeader: DataStream_TextHeader.fromJSON(object.textHeader) }
        : isSet(object.byteHeader)
        ? { $case: "byteHeader", byteHeader: DataStream_ByteHeader.fromJSON(object.byteHeader) }
        : undefined,
    };
  },

  toJSON(message: DataStream_Header): unknown {
    const obj: any = {};
    if (message.streamId !== "") {
      obj.streamId = message.streamId;
    }
    if (message.timestamp !== "0") {
      obj.timestamp = message.timestamp;
    }
    if (message.topic !== "") {
      obj.topic = message.topic;
    }
    if (message.mimeType !== "") {
      obj.mimeType = message.mimeType;
    }
    if (message.totalLength !== undefined) {
      obj.totalLength = message.totalLength;
    }
    if (message.encryptionType !== 0) {
      obj.encryptionType = encryption_TypeToJSON(message.encryptionType);
    }
    if (message.attributes) {
      const entries = Object.entries(message.attributes);
      if (entries.length > 0) {
        obj.attributes = {};
        entries.forEach(([k, v]) => {
          obj.attributes[k] = v;
        });
      }
    }
    if (message.contentHeader?.$case === "textHeader") {
      obj.textHeader = DataStream_TextHeader.toJSON(message.contentHeader.textHeader);
    } else if (message.contentHeader?.$case === "byteHeader") {
      obj.byteHeader = DataStream_ByteHeader.toJSON(message.contentHeader.byteHeader);
    }
    return obj;
  },

  create(base?: DeepPartial<DataStream_Header>): DataStream_Header {
    return DataStream_Header.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataStream_Header>): DataStream_Header {
    const message = createBaseDataStream_Header();
    message.streamId = object.streamId ?? "";
    message.timestamp = object.timestamp ?? "0";
    message.topic = object.topic ?? "";
    message.mimeType = object.mimeType ?? "";
    message.totalLength = object.totalLength ?? undefined;
    message.encryptionType = object.encryptionType ?? 0;
    message.attributes = Object.entries(object.attributes ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    switch (object.contentHeader?.$case) {
      case "textHeader": {
        if (object.contentHeader?.textHeader !== undefined && object.contentHeader?.textHeader !== null) {
          message.contentHeader = {
            $case: "textHeader",
            textHeader: DataStream_TextHeader.fromPartial(object.contentHeader.textHeader),
          };
        }
        break;
      }
      case "byteHeader": {
        if (object.contentHeader?.byteHeader !== undefined && object.contentHeader?.byteHeader !== null) {
          message.contentHeader = {
            $case: "byteHeader",
            byteHeader: DataStream_ByteHeader.fromPartial(object.contentHeader.byteHeader),
          };
        }
        break;
      }
    }
    return message;
  },
};

function createBaseDataStream_Header_AttributesEntry(): DataStream_Header_AttributesEntry {
  return { key: "", value: "" };
}

export const DataStream_Header_AttributesEntry: MessageFns<DataStream_Header_AttributesEntry> = {
  encode(message: DataStream_Header_AttributesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataStream_Header_AttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataStream_Header_AttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataStream_Header_AttributesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: DataStream_Header_AttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<DataStream_Header_AttributesEntry>): DataStream_Header_AttributesEntry {
    return DataStream_Header_AttributesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataStream_Header_AttributesEntry>): DataStream_Header_AttributesEntry {
    const message = createBaseDataStream_Header_AttributesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseDataStream_Chunk(): DataStream_Chunk {
  return { streamId: "", chunkIndex: "0", content: new Uint8Array(0), version: 0, iv: undefined };
}

export const DataStream_Chunk: MessageFns<DataStream_Chunk> = {
  encode(message: DataStream_Chunk, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.streamId !== "") {
      writer.uint32(10).string(message.streamId);
    }
    if (message.chunkIndex !== "0") {
      writer.uint32(16).uint64(message.chunkIndex);
    }
    if (message.content.length !== 0) {
      writer.uint32(26).bytes(message.content);
    }
    if (message.version !== 0) {
      writer.uint32(32).int32(message.version);
    }
    if (message.iv !== undefined) {
      writer.uint32(42).bytes(message.iv);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataStream_Chunk {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataStream_Chunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.streamId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.chunkIndex = reader.uint64().toString();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.content = reader.bytes();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.version = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.iv = reader.bytes();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataStream_Chunk {
    return {
      streamId: isSet(object.streamId) ? globalThis.String(object.streamId) : "",
      chunkIndex: isSet(object.chunkIndex) ? globalThis.String(object.chunkIndex) : "0",
      content: isSet(object.content) ? bytesFromBase64(object.content) : new Uint8Array(0),
      version: isSet(object.version) ? globalThis.Number(object.version) : 0,
      iv: isSet(object.iv) ? bytesFromBase64(object.iv) : undefined,
    };
  },

  toJSON(message: DataStream_Chunk): unknown {
    const obj: any = {};
    if (message.streamId !== "") {
      obj.streamId = message.streamId;
    }
    if (message.chunkIndex !== "0") {
      obj.chunkIndex = message.chunkIndex;
    }
    if (message.content.length !== 0) {
      obj.content = base64FromBytes(message.content);
    }
    if (message.version !== 0) {
      obj.version = Math.round(message.version);
    }
    if (message.iv !== undefined) {
      obj.iv = base64FromBytes(message.iv);
    }
    return obj;
  },

  create(base?: DeepPartial<DataStream_Chunk>): DataStream_Chunk {
    return DataStream_Chunk.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataStream_Chunk>): DataStream_Chunk {
    const message = createBaseDataStream_Chunk();
    message.streamId = object.streamId ?? "";
    message.chunkIndex = object.chunkIndex ?? "0";
    message.content = object.content ?? new Uint8Array(0);
    message.version = object.version ?? 0;
    message.iv = object.iv ?? undefined;
    return message;
  },
};

function createBaseDataStream_Trailer(): DataStream_Trailer {
  return { streamId: "", reason: "", attributes: {} };
}

export const DataStream_Trailer: MessageFns<DataStream_Trailer> = {
  encode(message: DataStream_Trailer, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.streamId !== "") {
      writer.uint32(10).string(message.streamId);
    }
    if (message.reason !== "") {
      writer.uint32(18).string(message.reason);
    }
    Object.entries(message.attributes).forEach(([key, value]) => {
      DataStream_Trailer_AttributesEntry.encode({ key: key as any, value }, writer.uint32(26).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataStream_Trailer {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataStream_Trailer();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.streamId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.reason = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          const entry3 = DataStream_Trailer_AttributesEntry.decode(reader, reader.uint32());
          if (entry3.value !== undefined) {
            message.attributes[entry3.key] = entry3.value;
          }
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataStream_Trailer {
    return {
      streamId: isSet(object.streamId) ? globalThis.String(object.streamId) : "",
      reason: isSet(object.reason) ? globalThis.String(object.reason) : "",
      attributes: isObject(object.attributes)
        ? Object.entries(object.attributes).reduce<{ [key: string]: string }>((acc, [key, value]) => {
          acc[key] = String(value);
          return acc;
        }, {})
        : {},
    };
  },

  toJSON(message: DataStream_Trailer): unknown {
    const obj: any = {};
    if (message.streamId !== "") {
      obj.streamId = message.streamId;
    }
    if (message.reason !== "") {
      obj.reason = message.reason;
    }
    if (message.attributes) {
      const entries = Object.entries(message.attributes);
      if (entries.length > 0) {
        obj.attributes = {};
        entries.forEach(([k, v]) => {
          obj.attributes[k] = v;
        });
      }
    }
    return obj;
  },

  create(base?: DeepPartial<DataStream_Trailer>): DataStream_Trailer {
    return DataStream_Trailer.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataStream_Trailer>): DataStream_Trailer {
    const message = createBaseDataStream_Trailer();
    message.streamId = object.streamId ?? "";
    message.reason = object.reason ?? "";
    message.attributes = Object.entries(object.attributes ?? {}).reduce<{ [key: string]: string }>(
      (acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.String(value);
        }
        return acc;
      },
      {},
    );
    return message;
  },
};

function createBaseDataStream_Trailer_AttributesEntry(): DataStream_Trailer_AttributesEntry {
  return { key: "", value: "" };
}

export const DataStream_Trailer_AttributesEntry: MessageFns<DataStream_Trailer_AttributesEntry> = {
  encode(message: DataStream_Trailer_AttributesEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DataStream_Trailer_AttributesEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDataStream_Trailer_AttributesEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DataStream_Trailer_AttributesEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
    };
  },

  toJSON(message: DataStream_Trailer_AttributesEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    return obj;
  },

  create(base?: DeepPartial<DataStream_Trailer_AttributesEntry>): DataStream_Trailer_AttributesEntry {
    return DataStream_Trailer_AttributesEntry.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DataStream_Trailer_AttributesEntry>): DataStream_Trailer_AttributesEntry {
    const message = createBaseDataStream_Trailer_AttributesEntry();
    message.key = object.key ?? "";
    message.value = object.value ?? "";
    return message;
  },
};

function createBaseWebhookConfig(): WebhookConfig {
  return { url: "", signingKey: "" };
}

export const WebhookConfig: MessageFns<WebhookConfig> = {
  encode(message: WebhookConfig, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.url !== "") {
      writer.uint32(10).string(message.url);
    }
    if (message.signingKey !== "") {
      writer.uint32(18).string(message.signingKey);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WebhookConfig {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWebhookConfig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.url = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.signingKey = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WebhookConfig {
    return {
      url: isSet(object.url) ? globalThis.String(object.url) : "",
      signingKey: isSet(object.signingKey) ? globalThis.String(object.signingKey) : "",
    };
  },

  toJSON(message: WebhookConfig): unknown {
    const obj: any = {};
    if (message.url !== "") {
      obj.url = message.url;
    }
    if (message.signingKey !== "") {
      obj.signingKey = message.signingKey;
    }
    return obj;
  },

  create(base?: DeepPartial<WebhookConfig>): WebhookConfig {
    return WebhookConfig.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<WebhookConfig>): WebhookConfig {
    const message = createBaseWebhookConfig();
    message.url = object.url ?? "";
    message.signingKey = object.signingKey ?? "";
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends { $case: string } ? { [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]> } & { $case: T["$case"] }
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000).toString();
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (globalThis.Number(t.seconds) || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
