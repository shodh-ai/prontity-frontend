syntax = "proto3";

package rox.interaction; // Package name

// For simple notifications if agent calls client and no specific response is needed.
message Empty {}

// Message sent from frontend when a button is clicked
message FrontendButtonClickRequest {
  string button_id = 1;    // Identifier for the button, e.g., "my_action_button"
  string custom_data = 2;  // Optional: any string data you want to send
}

// Response from the agent for the button click
message AgentResponse {
  string status_message = 1; // e.g., "Button click processed"
  string data_payload = 2;   // Optional: any data agent wants to return
}

// Message for dispatching UI actions to the frontend
message UIAction {
  enum ActionType {
    UNSPECIFIED = 0;
    ALERT = 1;
    DISMISS_ALERT = 2;
    // You can add other specific UI action types here later
    // e.g., SHOW_MODAL = 3; UPDATE_ELEMENT = 4;
  }
  ActionType action_type = 1;
  optional Alert alert = 2; // Payload for alert actions
  // Add other optional fields for different action types, e.g.:
  // optional Modal modal_payload = 3;
  // optional ElementUpdate update_payload = 4;
}

message Alert {
  string title = 1;
  string message = 2;
  repeated AlertButton buttons = 3;
}

message AlertButton {
  string label = 1;
  UIAction action = 2; // The action to perform when this button is clicked (e.g., DISMISS_ALERT)
}

// Message sent from frontend on page load to notify the agent
message NotifyPageLoadRequest {
  string task_stage = 1;     // e.g., "ROX_WELCOME_INIT"
  string user_id = 2;        // User's identifier
  string current_page = 3;   // e.g., "P1_RoxHome"
  string session_id = 4;     // LiveKit Room SID or custom session ID
  string chat_history = 5;   // Serialized chat history (e.g., JSON string)
  optional string transcript = 6; // Optional: e.g., "client_loaded_rox_page"
}

// Service the agent will implement (called by frontend)
service AgentInteraction {
  rpc HandleFrontendButton(FrontendButtonClickRequest) returns (AgentResponse);
  rpc NotifyPageLoad(NotifyPageLoadRequest) returns (AgentResponse); // Agent acknowledges page load
}

// Message to represent a single text highlight range
message HighlightRangeProto {
  string id = 1;                 // Unique identifier for the highlight
  int32 start = 2;               // Start position (ProseMirror index)
  int32 end = 3;                 // End position (ProseMirror index)
  string type = 4;               // Type of highlight (e.g., 'grammar', 'suggestion')
  optional string message = 5;    // Optional message/comment
  optional string wrong_version = 6; // Optional original text needing correction
  optional string correct_version = 7;// Optional suggested correction
}

// Message to represent a single text strikethrough range
message StrikeThroughRangeProto {
  string id = 1;                 // Unique identifier for the strikethrough
  int32 start = 2;               // Start position (ProseMirror index)
  int32 end = 3;                 // End position (ProseMirror index)
  string type = 4;               // Type of strikethrough (e.g., 'deletion', 'suggestion')
  optional string message = 5;    // Optional message/comment
}

// Message to represent a single text edit suggestion
message SuggestTextEditPayloadProto {
  string suggestion_id = 1;     // Unique identifier for the suggestion
  int32 start_pos = 2;          // Start position (ProseMirror index)
  int32 end_pos = 3;            // End position (ProseMirror index)
  string original_text = 4;     // The text to be replaced
  string new_text = 5;          // The suggested new text
}

// Message for showing an inline, non-intrusive suggestion
message ShowInlineSuggestionPayloadProto {
  string suggestion_id = 1;     // Unique ID for this suggestion
  int32 start_pos = 2;          // Start position in the editor (ProseMirror index)
  int32 end_pos = 3;            // End position in the editor (ProseMirror index)
  string suggestion_text = 4;   // Text to show on hover/click (e.g., "Consider rephrasing for clarity.")
  string suggestion_type = 5;   // Type of suggestion (e.g., "grammar", "style", "clarity") - for potential styling/iconography
}

// Message for showing a tooltip or comment
message ShowTooltipOrCommentPayloadProto {
  string id = 1;                  // Unique ID for this tooltip/comment
  int32 start_pos = 2;            // Start position in the editor (ProseMirror index)
  int32 end_pos = 3;              // End position in the editor (ProseMirror index)
  string text = 4;                // The content of the tooltip/comment
  string tooltip_type = 5;        // E.g., "info", "suggestion", "error", "question" - for styling/iconography
  // string anchor_element_id = 6; // Optional: If targeting a non-text element by ID, could be added back.
}

// Message for setting the entire content of a rich text editor
message SetEditorContentPayloadProto {
  oneof content_format {
    string html_content = 1;  // Full HTML content
    string json_content = 2;  // Tiptap JSON content as a string
  }
  // string target_editor_id = 3; // Optional: if multiple editors, specify which one. Consider if needed or if target_element_id is sufficient.
}

// Message for appending text to an editor in real-time
message AppendTextToEditorRealtimePayloadProto {
  string text_chunk = 1;        // The chunk of text to append
  optional string stream_id = 2; // Optional: ID to group related chunks if part of a continuous stream
  optional bool is_final_chunk = 3; // Indicates if this is the last chunk in a stream
  // string target_editor_id = 4; // Optional: if multiple editors, specify which one. Consider if needed or if target_element_id is sufficient.
}

// Optional: Service the frontend could implement (called by agent for updates)
// service ClientNotification {
//   rpc NotifyClient(AgentUpdate) returns (Empty);
// }
// message AgentUpdate {
//   string update_type = 1;
//   string content = 2;
// }

// Enum to define what kind of UI action the agent wants the client to perform
enum ClientUIActionType {
  NO_ACTION = 0;
  SHOW_ALERT = 1;
  UPDATE_TEXT_CONTENT = 2;
  TOGGLE_ELEMENT_VISIBILITY = 3;
  START_TIMER = 4;
  STOP_TIMER = 5;
  PAUSE_TIMER = 6;
  RESET_TIMER = 7;
  UPDATE_PROGRESS_INDICATOR = 8;
  UPDATE_SCORE_OR_PROGRESS = 9;
  // UI Control & State Actions
  SHOW_ELEMENT = 10;
  HIDE_ELEMENT = 11;
  // Navigation Actions
  NAVIGATE_TO_PAGE = 12;
  // Content Display Actions
  UPDATE_LIVE_TRANSCRIPT = 13;
  DISPLAY_TRANSCRIPT_OR_TEXT = 14;
  DISPLAY_REMARKS_LIST = 15;
  
  // Button & Input Actions
  SET_BUTTON_PROPERTIES = 21;
  ENABLE_BUTTON = 22;
  DISABLE_BUTTON = 23;
  SHOW_BUTTON_OPTIONS = 24;
  CLEAR_INPUT_FIELD = 25;
  
  // Editor & Content Actions
  SET_EDITOR_READONLY_SECTIONS = 26;
  
  // Feedback & Loading Actions
  SHOW_LOADING_INDICATOR = 27;
  // Add more actions here as needed

  HIGHLIGHT_TEXT_RANGES = 28; // Action to highlight text ranges
  SUGGEST_TEXT_EDIT = 29;     // Action to suggest a text edit
  SHOW_INLINE_SUGGESTION = 30; // Action to show a non-intrusive inline suggestion
  SHOW_TOOLTIP_OR_COMMENT = 31;  // Action to display a tooltip or comment
  SET_EDITOR_CONTENT = 32;       // Action to set the entire content of an editor
  APPEND_TEXT_TO_EDITOR_REALTIME = 33; // Action to append text chunks to an editor
  STRIKETHROUGH_TEXT_RANGES = 34;      // Action to strikethrough text ranges
  // Add more actions here, e.g., CLICK_BUTTON, CHANGE_IMAGE_SRC
}

// Request from Agent to Client to perform a UI action
message AgentToClientUIActionRequest {
  string request_id = 1; // Optional: for tracking/correlation
  ClientUIActionType action_type = 2;
  string target_element_id = 3;   // Optional: ID of the HTML element to target
  map<string, string> parameters = 4; // Flexible parameters, e.g.,
  repeated HighlightRangeProto highlight_ranges_payload = 5; // Payload for HIGHLIGHT_TEXT_RANGES
  optional SuggestTextEditPayloadProto suggest_text_edit_payload = 6; // Payload for SUGGEST_TEXT_EDIT
  optional ShowInlineSuggestionPayloadProto show_inline_suggestion_payload = 7; // Payload for SHOW_INLINE_SUGGESTION
  optional ShowTooltipOrCommentPayloadProto show_tooltip_or_comment_payload = 8; // Payload for SHOW_TOOLTIP_OR_COMMENT
  optional SetEditorContentPayloadProto set_editor_content_payload = 9;       // Payload for SET_EDITOR_CONTENT
  optional AppendTextToEditorRealtimePayloadProto append_text_to_editor_realtime_payload = 10; // Payload for APPEND_TEXT_TO_EDITOR_REALTIME
  repeated StrikeThroughRangeProto strikethrough_ranges_payload = 11; // Payload for STRIKETHROUGH_TEXT_RANGES
                                      // For SHOW_ALERT: {"message": "Hello!", "type": "info/error/warning"}
                                      // For UPDATE_TEXT_CONTENT: {"text": "New content"}
                                      // For TOGGLE_ELEMENT_VISIBILITY: {"visible": "true/false"} (or just toggle)
}

// Response from Client to Agent after attempting the UI action
message ClientUIActionResponse {
  string request_id = 1; // Corresponds to AgentToClientUIActionRequest.request_id
  bool success = 2;
  string message = 3;    // e.g., "Alert shown", "Element #myText updated", "Error: Element #xyz not found"
}

// Service the CLIENT will implement, and the AGENT will call
service ClientSideUI {
  rpc PerformUIAction(AgentToClientUIActionRequest) returns (ClientUIActionResponse);
}